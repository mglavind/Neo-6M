
Neo-6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800b998  0800b998  0001b998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c068  0800c068  000209c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c068  0800c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c070  0800c070  000209c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c078  0800c078  0001c078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  0800c07c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200009c4  0800ca40  000209c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  0800ca40  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e538  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226a  00000000  00000000  0002ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00031c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca79  00000000  00000000  00032680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9f4  00000000  00000000  0004f0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c28  00000000  00000000  0005daed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  00101768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c4 	.word	0x200009c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b97c 	.word	0x0800b97c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	0800b97c 	.word	0x0800b97c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	WakeUpCounter = SleepTimeSeconds / WakeupTimebase; 	// Wakeup counter is calculated now
 800101e:	4b54      	ldr	r3, [pc, #336]	; (8001170 <main+0x158>)
 8001020:	edd3 6a00 	vldr	s13, [r3]
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <main+0x15c>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	4b52      	ldr	r3, [pc, #328]	; (8001178 <main+0x160>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
	WakeUpCounterUint = (uint32_t)WakeUpCounter; // The Wakeup counter is converted to hex
 8001034:	4b50      	ldr	r3, [pc, #320]	; (8001178 <main+0x160>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 2a90 	vmov	r2, s15
 8001042:	4b4e      	ldr	r3, [pc, #312]	; (800117c <main+0x164>)
 8001044:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fe3b 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f8b5 	bl	80011b8 <SystemClock_Config>
  void ClearBuffer(void);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9a9 	bl	80013a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001052:	f000 f947 	bl	80012e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001056:	f000 f975 	bl	8001344 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800105a:	f000 f913 	bl	8001284 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  //
  //LoraInit();
  char *str = "test1 \r\n";
 800105e:	4b48      	ldr	r3, [pc, #288]	; (8001180 <main+0x168>)
 8001060:	623b      	str	r3, [r7, #32]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001062:	6a38      	ldr	r0, [r7, #32]
 8001064:	f7ff f8be 	bl	80001e4 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	6a39      	ldr	r1, [r7, #32]
 8001072:	4844      	ldr	r0, [pc, #272]	; (8001184 <main+0x16c>)
 8001074:	f003 f8c8 	bl	8004208 <HAL_UART_Transmit>

  GPSData gpsData; // Laver et instance af vores struct
  gpsData.fix = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]


  str = "test2 \r\n";
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <main+0x170>)
 800107e:	623b      	str	r3, [r7, #32]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001080:	6a38      	ldr	r0, [r7, #32]
 8001082:	f7ff f8af 	bl	80001e4 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	6a39      	ldr	r1, [r7, #32]
 8001090:	483c      	ldr	r0, [pc, #240]	; (8001184 <main+0x16c>)
 8001092:	f003 f8b9 	bl	8004208 <HAL_UART_Transmit>




// When waking up
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <main+0x174>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d126      	bne.n	80010f0 <main+0xd8>
    {
  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <main+0x174>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a39      	ldr	r2, [pc, #228]	; (800118c <main+0x174>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6013      	str	r3, [r2, #0]

  	  /** display  the string **/
  	  char *str = "Wakeup from the STANDBY MODE\n\n";
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <main+0x178>)
 80010b0:	61fb      	str	r3, [r7, #28]
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80010b2:	69f8      	ldr	r0, [r7, #28]
 80010b4:	f7ff f896 	bl	80001e4 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c0:	69f9      	ldr	r1, [r7, #28]
 80010c2:	4830      	ldr	r0, [pc, #192]	; (8001184 <main+0x16c>)
 80010c4:	f003 f8a0 	bl	8004208 <HAL_UART_Transmit>

  	  /** Blink the LED **/
  	  for (int i=0; i<20; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
 80010cc:	e00a      	b.n	80010e4 <main+0xcc>
  	  {
  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	4830      	ldr	r0, [pc, #192]	; (8001194 <main+0x17c>)
 80010d4:	f001 f990 	bl	80023f8 <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 80010d8:	20c8      	movs	r0, #200	; 0xc8
 80010da:	f000 fe57 	bl	8001d8c <HAL_Delay>
  	  for (int i=0; i<20; i++)
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2b13      	cmp	r3, #19
 80010e8:	ddf1      	ble.n	80010ce <main+0xb6>

  	  /** Disable the WWAKEUP PIN **/
  	  //HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0

  	  /** Deactivate the RTC wakeup  **/
  	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80010ea:	482b      	ldr	r0, [pc, #172]	; (8001198 <main+0x180>)
 80010ec:	f002 ffb8 	bl	8004060 <HAL_RTCEx_DeactivateWakeUpTimer>
    }



  str = "test3 \r\n";
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <main+0x184>)
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80010f4:	6a38      	ldr	r0, [r7, #32]
 80010f6:	f7ff f875 	bl	80001e4 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	6a39      	ldr	r1, [r7, #32]
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <main+0x16c>)
 8001106:	f003 f87f 	bl	8004208 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <main+0x188>)
 8001110:	f001 f95a 	bl	80023c8 <HAL_GPIO_WritePin>

  HAL_Delay(3000);
 8001114:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001118:	f000 fe38 	bl	8001d8c <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)". ", 2, 10);
 800111c:	230a      	movs	r3, #10
 800111e:	2202      	movs	r2, #2
 8001120:	4920      	ldr	r1, [pc, #128]	; (80011a4 <main+0x18c>)
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <main+0x16c>)
 8001124:	f003 f870 	bl	8004208 <HAL_UART_Transmit>

  ClearBuffer();
 8001128:	f000 fb34 	bl	8001794 <ClearBuffer>
  HAL_UART_Receive_IT(&huart1, RecievedData, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	491e      	ldr	r1, [pc, #120]	; (80011a8 <main+0x190>)
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <main+0x194>)
 8001132:	f003 f9bc 	bl	80044ae <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (gpsData.fix){
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d011      	beq.n	8001160 <main+0x148>
		  // if fix = 1, har vi en position, og vi kan sende vores position
		  // Power down af GPS?
		  char *str = "We got a fix! \r\n";
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <main+0x198>)
 800113e:	61bb      	str	r3, [r7, #24]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001140:	69b8      	ldr	r0, [r7, #24]
 8001142:	f7ff f84f 	bl	80001e4 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <main+0x16c>)
 8001152:	f003 f859 	bl	8004208 <HAL_UART_Transmit>
		  // Handle Lora, Sæt GoToSleep til 1, hvis success med Tx.
		  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <main+0x188>)
 800115c:	f001 f934 	bl	80023c8 <HAL_GPIO_WritePin>
	  }

	  if (GoToSleep) {
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <main+0x19c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e6      	beq.n	8001136 <main+0x11e>
		  EnterStandbyMode();
 8001168:	f000 fb32 	bl	80017d0 <EnterStandbyMode>
	  if (gpsData.fix){
 800116c:	e7e3      	b.n	8001136 <main+0x11e>
 800116e:	bf00      	nop
 8001170:	20000004 	.word	0x20000004
 8001174:	20000000 	.word	0x20000000
 8001178:	20000a30 	.word	0x20000a30
 800117c:	20000a34 	.word	0x20000a34
 8001180:	0800b998 	.word	0x0800b998
 8001184:	20000b1c 	.word	0x20000b1c
 8001188:	0800b9a4 	.word	0x0800b9a4
 800118c:	40007000 	.word	0x40007000
 8001190:	0800b9b0 	.word	0x0800b9b0
 8001194:	48000400 	.word	0x48000400
 8001198:	20000a74 	.word	0x20000a74
 800119c:	0800b9d0 	.word	0x0800b9d0
 80011a0:	48000800 	.word	0x48000800
 80011a4:	0800b9dc 	.word	0x0800b9dc
 80011a8:	200009e4 	.word	0x200009e4
 80011ac:	20000a94 	.word	0x20000a94
 80011b0:	0800b9e0 	.word	0x0800b9e0
 80011b4:	20000a70 	.word	0x20000a70

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09c      	sub	sp, #112	; 0x70
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 faf2 	bl	80057b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2234      	movs	r2, #52	; 0x34
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fae4 	bl	80057b0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011e8:	f001 f944 	bl	8002474 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemClock_Config+0xc8>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a23      	ldr	r2, [pc, #140]	; (8001280 <SystemClock_Config+0xc8>)
 80011f2:	f023 0318 	bic.w	r3, r3, #24
 80011f6:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011f8:	2306      	movs	r3, #6
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2310      	movs	r3, #16
 8001206:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001210:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001214:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121a:	4618      	mov	r0, r3
 800121c:	f001 f952 	bl	80024c4 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001226:	f000 fb31 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2302      	movs	r3, #2
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001244:	2102      	movs	r1, #2
 8001246:	4618      	mov	r0, r3
 8001248:	f002 f97a 	bl	8003540 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001252:	f000 fb1b 	bl	800188c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8001256:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800125a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001264:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fb9f 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001274:	f000 fb0a 	bl	800188c <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3770      	adds	r7, #112	; 0x70
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000

08001284 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_RTC_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_RTC_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_RTC_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_RTC_Init+0x58>)
 8001296:	227f      	movs	r2, #127	; 0x7f
 8001298:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_RTC_Init+0x58>)
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_RTC_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_RTC_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_RTC_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b2:	480a      	ldr	r0, [pc, #40]	; (80012dc <MX_RTC_Init+0x58>)
 80012b4:	f002 fd0c 	bl	8003cd0 <HAL_RTC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80012be:	f000 fae5 	bl	800188c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_RTC_Init+0x58>)
 80012c8:	f002 fe08 	bl	8003edc <HAL_RTCEx_SetWakeUpTimer_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 fadb 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000a74 	.word	0x20000a74
 80012e0:	40002800 	.word	0x40002800

080012e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_USART1_UART_Init+0x58>)
 80012ea:	4a15      	ldr	r2, [pc, #84]	; (8001340 <MX_USART1_UART_Init+0x5c>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_USART1_UART_Init+0x58>)
 80012f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_USART1_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x58>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x58>)
 8001328:	f002 ff20 	bl	800416c <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 faab 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000a94 	.word	0x20000a94
 8001340:	40013800 	.word	0x40013800

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART2_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_USART2_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001350:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x58>)
 8001388:	f002 fef0 	bl	800416c <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001392:	f000 fa7b 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000b1c 	.word	0x20000b1c
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a2c      	ldr	r2, [pc, #176]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <MX_GPIO_Init+0xfc>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_GPIO_Init+0xfc>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <MX_GPIO_Init+0xfc>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_GPIO_Init+0xfc>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001420:	4820      	ldr	r0, [pc, #128]	; (80014a4 <MX_GPIO_Init+0x100>)
 8001422:	f000 ffd1 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	481f      	ldr	r0, [pc, #124]	; (80014a8 <MX_GPIO_Init+0x104>)
 800142c:	f000 ffcc 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin_Pin */
  GPIO_InitStruct.Pin = B1_Pin_Pin;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_Pin_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <MX_GPIO_Init+0x104>)
 8001448:	f000 fe4c 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	480f      	ldr	r0, [pc, #60]	; (80014a4 <MX_GPIO_Init+0x100>)
 8001466:	f000 fe3d 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PWR_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_Pin;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_PWR_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <MX_GPIO_Init+0x104>)
 8001482:	f000 fe2f 	bl	80020e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2028      	movs	r0, #40	; 0x28
 800148c:	f000 fd7d 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f000 fd96 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800

080014ac <parseNMEA>:
/* USER CODE BEGIN 4 */




void parseNMEA(char* msg, GPSData* data) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    char* token;
    token = strtok(msg, ",");
 80014b6:	493d      	ldr	r1, [pc, #244]	; (80015ac <parseNMEA+0x100>)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f004 ffe3 	bl	8006484 <strtok>
 80014be:	60f8      	str	r0, [r7, #12]
    int count = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]

    if (strcmp(token, "$GPGGA")) {
 80014c4:	493a      	ldr	r1, [pc, #232]	; (80015b0 <parseNMEA+0x104>)
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7fe fe82 	bl	80001d0 <strcmp>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d057      	beq.n	8001582 <parseNMEA+0xd6>
		while (token != NULL) {
 80014d2:	e052      	b.n	800157a <parseNMEA+0xce>
			count++;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
			switch (count) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b02      	subs	r3, #2
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d846      	bhi.n	8001570 <parseNMEA+0xc4>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <parseNMEA+0x3c>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001501 	.word	0x08001501
 80014ec:	0800151b 	.word	0x0800151b
 80014f0:	08001535 	.word	0x08001535
 80014f4:	0800153f 	.word	0x0800153f
 80014f8:	08001559 	.word	0x08001559
 80014fc:	08001563 	.word	0x08001563
				case 2:
					// Process altitude value
					data->altitude = atof(token);
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f004 f923 	bl	800574c <atof>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb7b 	bl	8000c08 <__aeabi_d2f>
 8001512:	4602      	mov	r2, r0
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]
					break;
 8001518:	e02a      	b.n	8001570 <parseNMEA+0xc4>
				case 3:
					// Process latitude value
					data->latitude = atof(token);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f004 f916 	bl	800574c <atof>
 8001520:	ec53 2b10 	vmov	r2, r3, d0
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb6e 	bl	8000c08 <__aeabi_d2f>
 800152c:	4602      	mov	r2, r0
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	605a      	str	r2, [r3, #4]
					break;
 8001532:	e01d      	b.n	8001570 <parseNMEA+0xc4>
				case 4:
					// Process latitude area value
					data->latitudeArea = token[0];
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	721a      	strb	r2, [r3, #8]
					break;
 800153c:	e018      	b.n	8001570 <parseNMEA+0xc4>
				case 5:
					// Process longitude value
					data->longitude = atof(token);
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f004 f904 	bl	800574c <atof>
 8001544:	ec53 2b10 	vmov	r2, r3, d0
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fb5c 	bl	8000c08 <__aeabi_d2f>
 8001550:	4602      	mov	r2, r0
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	60da      	str	r2, [r3, #12]
					break;
 8001556:	e00b      	b.n	8001570 <parseNMEA+0xc4>
				case 6:
					// Process longitude area value
					data->longitudeArea = token[0];
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	741a      	strb	r2, [r3, #16]
					break;
 8001560:	e006      	b.n	8001570 <parseNMEA+0xc4>
				case 7:
					// Process fix value
					data->fix = atoi(token);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f004 f8f5 	bl	8005752 <atoi>
 8001568:	4602      	mov	r2, r0
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	615a      	str	r2, [r3, #20]
					break;
 800156e:	bf00      	nop
				}
			token = strtok(NULL, ",");
 8001570:	490e      	ldr	r1, [pc, #56]	; (80015ac <parseNMEA+0x100>)
 8001572:	2000      	movs	r0, #0
 8001574:	f004 ff86 	bl	8006484 <strtok>
 8001578:	60f8      	str	r0, [r7, #12]
		while (token != NULL) {
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1a9      	bne.n	80014d4 <parseNMEA+0x28>
    else {
    	len = snprintf(buffer, sizeof(buffer), "unknown NMEA message \n");
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
    }

}
 8001580:	e010      	b.n	80015a4 <parseNMEA+0xf8>
    	len = snprintf(buffer, sizeof(buffer), "unknown NMEA message \n");
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <parseNMEA+0x108>)
 8001584:	2132      	movs	r1, #50	; 0x32
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <parseNMEA+0x10c>)
 8001588:	f004 f91a 	bl	80057c0 <snprintf>
 800158c:	4603      	mov	r3, r0
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <parseNMEA+0x110>)
 8001590:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <parseNMEA+0x110>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <parseNMEA+0x10c>)
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <parseNMEA+0x114>)
 80015a0:	f002 fe32 	bl	8004208 <HAL_UART_Transmit>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800b9f4 	.word	0x0800b9f4
 80015b0:	0800b9f8 	.word	0x0800b9f8
 80015b4:	0800ba00 	.word	0x0800ba00
 80015b8:	20000a38 	.word	0x20000a38
 80015bc:	20000a6c 	.word	0x20000a6c
 80015c0:	20000b1c 	.word	0x20000b1c

080015c4 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	6078      	str	r0, [r7, #4]
	// This has been soft defined in HAL, and can be redefined here.
	HAL_UART_Receive_IT(&huart1, RecievedData, 70);
 80015cc:	2246      	movs	r2, #70	; 0x46
 80015ce:	4963      	ldr	r1, [pc, #396]	; (800175c <HAL_UART_RxCpltCallback+0x198>)
 80015d0:	4863      	ldr	r0, [pc, #396]	; (8001760 <HAL_UART_RxCpltCallback+0x19c>)
 80015d2:	f002 ff6c 	bl	80044ae <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Interrupt received data: ", 25, 100);
 80015d6:	2364      	movs	r3, #100	; 0x64
 80015d8:	2219      	movs	r2, #25
 80015da:	4962      	ldr	r1, [pc, #392]	; (8001764 <HAL_UART_RxCpltCallback+0x1a0>)
 80015dc:	4862      	ldr	r0, [pc, #392]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 80015de:	f002 fe13 	bl	8004208 <HAL_UART_Transmit>
	len = snprintf(buffer, sizeof(buffer), RecievedData);
 80015e2:	4a5e      	ldr	r2, [pc, #376]	; (800175c <HAL_UART_RxCpltCallback+0x198>)
 80015e4:	2132      	movs	r1, #50	; 0x32
 80015e6:	4861      	ldr	r0, [pc, #388]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80015e8:	f004 f8ea 	bl	80057c0 <snprintf>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80015f0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);
 80015f2:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	2364      	movs	r3, #100	; 0x64
 80015fa:	495c      	ldr	r1, [pc, #368]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80015fc:	485a      	ldr	r0, [pc, #360]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 80015fe:	f002 fe03 	bl	8004208 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	2202      	movs	r2, #2
 8001606:	495b      	ldr	r1, [pc, #364]	; (8001774 <HAL_UART_RxCpltCallback+0x1b0>)
 8001608:	4857      	ldr	r0, [pc, #348]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 800160a:	f002 fdfd 	bl	8004208 <HAL_UART_Transmit>

	GPSData gpsData; // Laver et instance af vores struct
	parseNMEA(RecievedData, &gpsData);
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4619      	mov	r1, r3
 8001614:	4851      	ldr	r0, [pc, #324]	; (800175c <HAL_UART_RxCpltCallback+0x198>)
 8001616:	f7ff ff49 	bl	80014ac <parseNMEA>
	// Access the parsed values
	// Altitude
	len = snprintf(buffer, sizeof(buffer), "Altitude: %.2f\r\n", gpsData.altitude);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffa3 	bl	8000568 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	e9cd 2300 	strd	r2, r3, [sp]
 800162a:	4a53      	ldr	r2, [pc, #332]	; (8001778 <HAL_UART_RxCpltCallback+0x1b4>)
 800162c:	2132      	movs	r1, #50	; 0x32
 800162e:	484f      	ldr	r0, [pc, #316]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001630:	f004 f8c6 	bl	80057c0 <snprintf>
 8001634:	4603      	mov	r3, r0
 8001636:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 8001638:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800163a:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001644:	4949      	ldr	r1, [pc, #292]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001646:	4848      	ldr	r0, [pc, #288]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 8001648:	f002 fdde 	bl	8004208 <HAL_UART_Transmit>

	// Latitude
	len = snprintf(buffer, sizeof(buffer), "Latitude: %.5f\r\n", gpsData.latitude);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff8a 	bl	8000568 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9cd 2300 	strd	r2, r3, [sp]
 800165c:	4a47      	ldr	r2, [pc, #284]	; (800177c <HAL_UART_RxCpltCallback+0x1b8>)
 800165e:	2132      	movs	r1, #50	; 0x32
 8001660:	4842      	ldr	r0, [pc, #264]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001662:	f004 f8ad 	bl	80057c0 <snprintf>
 8001666:	4603      	mov	r3, r0
 8001668:	4a41      	ldr	r2, [pc, #260]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 800166a:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	b29a      	uxth	r2, r3
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	493d      	ldr	r1, [pc, #244]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001678:	483b      	ldr	r0, [pc, #236]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 800167a:	f002 fdc5 	bl	8004208 <HAL_UART_Transmit>

	// Latitude Area
	len = snprintf(buffer, sizeof(buffer), "Latitude Area: %c\r\n", gpsData.latitudeArea);
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	4a3f      	ldr	r2, [pc, #252]	; (8001780 <HAL_UART_RxCpltCallback+0x1bc>)
 8001682:	2132      	movs	r1, #50	; 0x32
 8001684:	4839      	ldr	r0, [pc, #228]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001686:	f004 f89b 	bl	80057c0 <snprintf>
 800168a:	4603      	mov	r3, r0
 800168c:	4a38      	ldr	r2, [pc, #224]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 800168e:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169a:	4934      	ldr	r1, [pc, #208]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 800169c:	4832      	ldr	r0, [pc, #200]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 800169e:	f002 fdb3 	bl	8004208 <HAL_UART_Transmit>

	// Longitude
	len = snprintf(buffer, sizeof(buffer), "Longitude: %.5f\r\n", gpsData.longitude);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff5f 	bl	8000568 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9cd 2300 	strd	r2, r3, [sp]
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <HAL_UART_RxCpltCallback+0x1c0>)
 80016b4:	2132      	movs	r1, #50	; 0x32
 80016b6:	482d      	ldr	r0, [pc, #180]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80016b8:	f004 f882 	bl	80057c0 <snprintf>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80016c0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016cc:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80016ce:	4826      	ldr	r0, [pc, #152]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 80016d0:	f002 fd9a 	bl	8004208 <HAL_UART_Transmit>

	// Longitude Area
	len = snprintf(buffer, sizeof(buffer), "Longitude Area: %c\r\n", gpsData.longitudeArea);
 80016d4:	7e3b      	ldrb	r3, [r7, #24]
 80016d6:	4a2c      	ldr	r2, [pc, #176]	; (8001788 <HAL_UART_RxCpltCallback+0x1c4>)
 80016d8:	2132      	movs	r1, #50	; 0x32
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80016dc:	f004 f870 	bl	80057c0 <snprintf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80016e4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f0:	491e      	ldr	r1, [pc, #120]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 80016f2:	481d      	ldr	r0, [pc, #116]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 80016f4:	f002 fd88 	bl	8004208 <HAL_UART_Transmit>

	// Fix
	len = snprintf(buffer, sizeof(buffer), "Fix: %d\r\n", gpsData.fix);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4a24      	ldr	r2, [pc, #144]	; (800178c <HAL_UART_RxCpltCallback+0x1c8>)
 80016fc:	2132      	movs	r1, #50	; 0x32
 80016fe:	481b      	ldr	r0, [pc, #108]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001700:	f004 f85e 	bl	80057c0 <snprintf>
 8001704:	4603      	mov	r3, r0
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 8001708:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29a      	uxth	r2, r3
 8001710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001714:	4915      	ldr	r1, [pc, #84]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 8001718:	f002 fd76 	bl	8004208 <HAL_UART_Transmit>

	memset(RecievedData,0, 30);
 800171c:	221e      	movs	r2, #30
 800171e:	2100      	movs	r1, #0
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <HAL_UART_RxCpltCallback+0x198>)
 8001722:	f004 f845 	bl	80057b0 <memset>
	HAL_UART_Receive_IT(&huart1, RecievedData, 700);		//re-starting interrupt
 8001726:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800172a:	490c      	ldr	r1, [pc, #48]	; (800175c <HAL_UART_RxCpltCallback+0x198>)
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <HAL_UART_RxCpltCallback+0x19c>)
 800172e:	f002 febe 	bl	80044ae <HAL_UART_Receive_IT>
	// Fix
	len = snprintf(buffer, sizeof(buffer), "Restat interrupt\r\n");
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_UART_RxCpltCallback+0x1cc>)
 8001734:	2132      	movs	r1, #50	; 0x32
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 8001738:	f004 f842 	bl	80057c0 <snprintf>
 800173c:	4603      	mov	r3, r0
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 8001740:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_UART_RxCpltCallback+0x1ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <HAL_UART_RxCpltCallback+0x1a8>)
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <HAL_UART_RxCpltCallback+0x1a4>)
 8001750:	f002 fd5a 	bl	8004208 <HAL_UART_Transmit>


	}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200009e4 	.word	0x200009e4
 8001760:	20000a94 	.word	0x20000a94
 8001764:	0800ba18 	.word	0x0800ba18
 8001768:	20000b1c 	.word	0x20000b1c
 800176c:	20000a38 	.word	0x20000a38
 8001770:	20000a6c 	.word	0x20000a6c
 8001774:	0800ba34 	.word	0x0800ba34
 8001778:	0800ba38 	.word	0x0800ba38
 800177c:	0800ba4c 	.word	0x0800ba4c
 8001780:	0800ba60 	.word	0x0800ba60
 8001784:	0800ba74 	.word	0x0800ba74
 8001788:	0800ba88 	.word	0x0800ba88
 800178c:	0800baa0 	.word	0x0800baa0
 8001790:	0800baac 	.word	0x0800baac

08001794 <ClearBuffer>:

void ClearBuffer(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	// Clear RN2483 UART buffer before main code execution.
	// HAL_TIMEOUT is received when HAL_UART_Receive is  not done receiving.
	// huart->TxXferCount will then contain the value of bytes left to be received.
	// If size of received data is less than 1 byte (= no data), HAL_TIMEOUT will be returned
	ret = HAL_OK;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <ClearBuffer+0x30>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
	while (ret != HAL_TIMEOUT) ret = HAL_UART_Receive(&huart1, c, 1, 100);	//RN2483 serial
 800179e:	e009      	b.n	80017b4 <ClearBuffer+0x20>
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	2201      	movs	r2, #1
 80017a4:	4908      	ldr	r1, [pc, #32]	; (80017c8 <ClearBuffer+0x34>)
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <ClearBuffer+0x38>)
 80017a8:	f002 fdb8 	bl	800431c <HAL_UART_Receive>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <ClearBuffer+0x30>)
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <ClearBuffer+0x30>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d1f1      	bne.n	80017a0 <ClearBuffer+0xc>
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200009e0 	.word	0x200009e0
 80017c8:	20000a2c 	.word	0x20000a2c
 80017cc:	20000a94 	.word	0x20000a94

080017d0 <EnterStandbyMode>:



void EnterStandbyMode(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

    /** Now enter the standby mode **/
     /* Clear the WU FLAG */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <EnterStandbyMode+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <EnterStandbyMode+0xa0>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6013      	str	r3, [r2, #0]

     /* clear the RTC Wake UP (WU) flag */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <EnterStandbyMode+0xa4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <EnterStandbyMode+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017f2:	60da      	str	r2, [r3, #12]

     /* Display the string */
    char *str = "About to enter the STANDBY MODE\n\n";
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <EnterStandbyMode+0xa8>)
 80017f6:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f7fe fcf3 	bl	80001e4 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	481c      	ldr	r0, [pc, #112]	; (800187c <EnterStandbyMode+0xac>)
 800180a:	f002 fcfd 	bl	8004208 <HAL_UART_Transmit>

     /* Blink the LED */
    for (int i=0; i<5; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e00b      	b.n	800182c <EnterStandbyMode+0x5c>
    {
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001818:	4819      	ldr	r0, [pc, #100]	; (8001880 <EnterStandbyMode+0xb0>)
 800181a:	f000 fded 	bl	80023f8 <HAL_GPIO_TogglePin>
  	  HAL_Delay(750);
 800181e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001822:	f000 fab3 	bl	8001d8c <HAL_Delay>
    for (int i=0; i<5; i++)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b04      	cmp	r3, #4
 8001830:	ddf0      	ble.n	8001814 <EnterStandbyMode+0x44>
    }

     /* Enable the WAKEUP PIN */
    //HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WakeUpCounterUint, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <EnterStandbyMode+0xb4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <EnterStandbyMode+0xa4>)
 800183c:	f002 fb4e 	bl	8003edc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <EnterStandbyMode+0x7a>
    {
      Error_Handler();
 8001846:	f000 f821 	bl	800188c <Error_Handler>
    }

     /* one last string to be sure */
    char *str2 = "STANDBY MODE is ON\n\n";
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <EnterStandbyMode+0xb8>)
 800184c:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe fcc8 	bl	80001e4 <strlen>
 8001854:	4603      	mov	r3, r0
 8001856:	b29a      	uxth	r2, r3
 8001858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <EnterStandbyMode+0xac>)
 8001860:	f002 fcd2 	bl	8004208 <HAL_UART_Transmit>

     /* Finally enter the standby mode */
    HAL_PWR_EnterSTANDBYMode();
 8001864:	f000 fe16 	bl	8002494 <HAL_PWR_EnterSTANDBYMode>

}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40007000 	.word	0x40007000
 8001874:	20000a74 	.word	0x20000a74
 8001878:	0800bac0 	.word	0x0800bac0
 800187c:	20000b1c 	.word	0x20000b1c
 8001880:	48000400 	.word	0x48000400
 8001884:	20000a34 	.word	0x20000a34
 8001888:	0800bae4 	.word	0x0800bae4

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ce:	2007      	movs	r0, #7
 80018d0:	f000 fb50 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_RTC_MspInit+0x50>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d119      	bne.n	8001926 <HAL_RTC_MspInit+0x46>
 80018f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001900:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RTC_MspInit+0x54>)
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	461a      	mov	r2, r3
 8001912:	2301      	movs	r3, #1
 8001914:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2003      	movs	r0, #3
 800191c:	f000 fb35 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 fb4e 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40002800 	.word	0x40002800
 8001934:	10908100 	.word	0x10908100

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_UART_MspInit+0xec>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d132      	bne.n	80019c0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6193      	str	r3, [r2, #24]
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	6153      	str	r3, [r2, #20]
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f000 fb9b 	bl	80020e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2025      	movs	r0, #37	; 0x25
 80019b4:	f000 fae9 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b8:	2025      	movs	r0, #37	; 0x25
 80019ba:	f000 fb02 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019be:	e02d      	b.n	8001a1c <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <HAL_UART_MspInit+0xf4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d128      	bne.n	8001a1c <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	6153      	str	r3, [r2, #20]
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019fa:	230c      	movs	r3, #12
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a18:	f000 fb64 	bl	80020e4 <HAL_GPIO_Init>
}
 8001a1c:	bf00      	nop
 8001a1e:	3730      	adds	r7, #48	; 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40004400 	.word	0x40004400

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f966 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <RTC_WKUP_IRQHandler+0x10>)
 8001a8a:	f002 fb41 	bl	8004110 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000a74 	.word	0x20000a74

08001a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <USART1_IRQHandler+0x10>)
 8001a9e:	f002 fd4b 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000a94 	.word	0x20000a94

08001aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin_Pin);
 8001ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab4:	f000 fcba 	bl	800242c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad6:	f003 fe41 	bl	800575c <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_exit>:

void _exit (int status)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe7 	bl	8001acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0x12>

08001b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
  }

  return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e009      	b.n	8001b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf1      	blt.n	8001b4c <_write+0x12>
  }
  return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_close>:

int _close(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_isatty>:

int _isatty(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f003 fda6 	bl	800575c <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20004000 	.word	0x20004000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000ba4 	.word	0x20000ba4
 8001c44:	20000be8 	.word	0x20000be8

08001c48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c70:	f7ff ffea 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c76:	490d      	ldr	r1, [pc, #52]	; (8001cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <LoopForever+0xe>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	; (8001cb8 <LoopForever+0x16>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f003 fd65 	bl	8005768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9e:	f7ff f9bb 	bl	8001018 <main>

08001ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ca2:	e7fe      	b.n	8001ca2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	200009c4 	.word	0x200009c4
  ldr r2, =_sidata
 8001cb0:	0800c07c 	.word	0x0800c07c
  ldr r2, =_sbss
 8001cb4:	200009c4 	.word	0x200009c4
  ldr r4, =_ebss
 8001cb8:	20000be8 	.word	0x20000be8

08001cbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC1_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_Init+0x28>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_Init+0x28>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f000 f94f 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f808 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cdc:	f7ff fddc 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000

08001cec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f967 	bl	8001fde <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d28:	f000 f92f 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000010 	.word	0x20000010
 8001d48:	2000000c 	.word	0x2000000c

08001d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000010 	.word	0x20000010
 8001d70:	20000ba8 	.word	0x20000ba8

08001d74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000ba8 	.word	0x20000ba8

08001d8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000010 	.word	0x20000010

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002004:	2b02      	cmp	r3, #2
 8002006:	d008      	beq.n	800201a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2204      	movs	r2, #4
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e020      	b.n	800205c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020e 	bic.w	r2, r2, #14
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800207a:	2b02      	cmp	r3, #2
 800207c:	d005      	beq.n	800208a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2204      	movs	r2, #4
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e027      	b.n	80020da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 020e 	bic.w	r2, r2, #14
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
    } 
  }
  return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	e14e      	b.n	8002392 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8140 	beq.w	800238c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d005      	beq.n	8002124 <HAL_GPIO_Init+0x40>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d130      	bne.n	8002186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215a:	2201      	movs	r2, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 0201 	and.w	r2, r3, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d123      	bne.n	8002216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	6939      	ldr	r1, [r7, #16]
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0203 	and.w	r2, r3, #3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 809a 	beq.w	800238c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002258:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1e0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a46      	ldr	r2, [pc, #280]	; (80023b8 <HAL_GPIO_Init+0x2d4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1dc>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_GPIO_Init+0x2d8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1d8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <HAL_GPIO_Init+0x2dc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1d4>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1e2>
 80022b8:	2305      	movs	r3, #5
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1e2>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1e2>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1e2>
 80022c4:	2300      	movs	r3, #0
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d6:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_GPIO_Init+0x2d0>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002308:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002332:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_GPIO_Init+0x2e0>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f aea9 	bne.w	80020f4 <HAL_GPIO_Init+0x10>
  }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	48000800 	.word	0x48000800
 80023c0:	48000c00 	.word	0x48000c00
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43d9      	mvns	r1, r3
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	400b      	ands	r3, r1
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f806 	bl	800245c <HAL_GPIO_EXTI_Callback>
  }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40007000 	.word	0x40007000

08002494 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80024b0:	bf30      	wfi
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40007000 	.word	0x40007000
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f001 b823 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 817d 	beq.w	80027fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002500:	4bbc      	ldr	r3, [pc, #752]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250c:	4bb9      	ldr	r3, [pc, #740]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d15c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x10e>
 8002518:	4bb6      	ldr	r3, [pc, #728]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d155      	bne.n	80025d2 <HAL_RCC_OscConfig+0x10e>
 8002526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800253a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x94>
 8002552:	4ba8      	ldr	r3, [pc, #672]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0xc0>
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002574:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002580:	4b9c      	ldr	r3, [pc, #624]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002588:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800258c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002598:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 811f 	beq.w	80027f8 <HAL_RCC_OscConfig+0x334>
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 8116 	bne.w	80027f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f000 bfaf 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12e>
 80025e4:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a82      	ldr	r2, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e036      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x158>
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7b      	ldr	r2, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a78      	ldr	r2, [pc, #480]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e021      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x184>
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a70      	ldr	r2, [pc, #448]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b6e      	ldr	r3, [pc, #440]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6d      	ldr	r2, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x19c>
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f023 020f 	bic.w	r2, r3, #15
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	495f      	ldr	r1, [pc, #380]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002676:	4313      	orrs	r3, r2
 8002678:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d059      	beq.n	800273e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fb73 	bl	8001d74 <HAL_GetTick>
 800268e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff fb6e 	bl	8001d74 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d902      	bls.n	80026aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f000 bf43 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 80026aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x218>
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x244>
 80026dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800270c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002710:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002714:	fa92 f2a2 	rbit	r2, r2
 8002718:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800271c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f002 021f 	and.w	r2, r2, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ab      	beq.n	8002694 <HAL_RCC_OscConfig+0x1d0>
 800273c:	e05d      	b.n	80027fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff fb19 	bl	8001d74 <HAL_GetTick>
 8002742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fb14 	bl	8001d74 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d902      	bls.n	800275e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	f000 bee9 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 800275e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002762:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002772:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x2cc>
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x2f8>
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_RCC_OscConfig+0x330>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80027d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ab      	bne.n	8002748 <HAL_RCC_OscConfig+0x284>
 80027f0:	e003      	b.n	80027fa <HAL_RCC_OscConfig+0x336>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 817d 	beq.w	8002b0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002810:	4ba6      	ldr	r3, [pc, #664]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800281c:	4ba3      	ldr	r3, [pc, #652]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d172      	bne.n	800290e <HAL_RCC_OscConfig+0x44a>
 8002828:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d16c      	bne.n	800290e <HAL_RCC_OscConfig+0x44a>
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002846:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x3a0>
 800285e:	4b93      	ldr	r3, [pc, #588]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e013      	b.n	800288c <HAL_RCC_OscConfig+0x3c8>
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800287c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2202      	movs	r2, #2
 800288e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002892:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800289e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCC_OscConfig+0x410>
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 be2e 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	21f8      	movs	r1, #248	; 0xf8
 80028ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80028f2:	fa91 f1a1 	rbit	r1, r1
 80028f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80028fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80028fe:	fab1 f181 	clz	r1, r1
 8002902:	b2c9      	uxtb	r1, r1
 8002904:	408b      	lsls	r3, r1
 8002906:	4969      	ldr	r1, [pc, #420]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	e0fd      	b.n	8002b0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8088 	beq.w	8002a30 <HAL_RCC_OscConfig+0x56c>
 8002920:	2301      	movs	r3, #1
 8002922:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002932:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	2301      	movs	r3, #1
 800294a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fa12 	bl	8001d74 <HAL_GetTick>
 8002950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff fa0d 	bl	8001d74 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	f000 bde2 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800297e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_RCC_OscConfig+0x4d8>
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x500>
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2202      	movs	r2, #2
 80029c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0af      	beq.n	8002956 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	21f8      	movs	r1, #248	; 0xf8
 8002a0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a14:	fa91 f1a1 	rbit	r1, r1
 8002a18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a20:	fab1 f181 	clz	r1, r1
 8002a24:	b2c9      	uxtb	r1, r1
 8002a26:	408b      	lsls	r3, r1
 8002a28:	4920      	ldr	r1, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
 8002a2e:	e06c      	b.n	8002b0a <HAL_RCC_OscConfig+0x646>
 8002a30:	2301      	movs	r3, #1
 8002a32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f98a 	bl	8001d74 <HAL_GetTick>
 8002a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7ff f985 	bl	8001d74 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f000 bd5a 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d104      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5ec>
 8002aa6:	4b01      	ldr	r3, [pc, #4]	; (8002aac <HAL_RCC_OscConfig+0x5e8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x614>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ad4:	4bc8      	ldr	r3, [pc, #800]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ade:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ae2:	fa92 f2a2 	rbit	r2, r2
 8002ae6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002aea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f042 0220 	orr.w	r2, r2, #32
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ad      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8110 	beq.w	8002d40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d079      	beq.n	8002c24 <HAL_RCC_OscConfig+0x760>
 8002b30:	2301      	movs	r3, #1
 8002b32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4bab      	ldr	r3, [pc, #684]	; (8002dfc <HAL_RCC_OscConfig+0x938>)
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f90b 	bl	8001d74 <HAL_GetTick>
 8002b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7ff f906 	bl	8001d74 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 bcdb 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd4:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002be0:	2102      	movs	r1, #2
 8002be2:	6019      	str	r1, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f1a3 	rbit	r1, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bfa:	6019      	str	r1, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0a0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x6a0>
 8002c22:	e08d      	b.n	8002d40 <HAL_RCC_OscConfig+0x87c>
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_OscConfig+0x938>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	2300      	movs	r3, #0
 8002c64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7ff f885 	bl	8001d74 <HAL_GetTick>
 8002c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff f880 	bl	8001d74 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d902      	bls.n	8002c86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	f000 bc55 	b.w	8003530 <HAL_RCC_OscConfig+0x106c>
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c8e:	2202      	movs	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	fa93 f2a3 	rbit	r2, r3
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002cf0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002cfe:	2102      	movs	r1, #2
 8002d00:	6019      	str	r1, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f1a3 	rbit	r1, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d18:	6019      	str	r1, [r3, #0]
  return result;
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d197      	bne.n	8002c70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 81a1 	beq.w	8003098 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002d8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dae:	f7fe ffe1 	bl	8001d74 <HAL_GetTick>
 8002db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e009      	b.n	8002dcc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe ffdc 	bl	8001d74 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e3b1      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x93c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_OscConfig+0x940>
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <HAL_RCC_OscConfig+0x934>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	e03c      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	10908120 	.word	0x10908120
 8002e00:	40007000 	.word	0x40007000
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10c      	bne.n	8002e2e <HAL_RCC_OscConfig+0x96a>
 8002e14:	4bc1      	ldr	r3, [pc, #772]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4ac0      	ldr	r2, [pc, #768]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	4bbe      	ldr	r3, [pc, #760]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4abd      	ldr	r2, [pc, #756]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e26:	f023 0304 	bic.w	r3, r3, #4
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	e020      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x994>
 8002e3e:	4bb7      	ldr	r3, [pc, #732]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4ab6      	ldr	r2, [pc, #728]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4bb4      	ldr	r3, [pc, #720]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4ab3      	ldr	r2, [pc, #716]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x9ac>
 8002e58:	4bb0      	ldr	r3, [pc, #704]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4aaf      	ldr	r2, [pc, #700]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4bad      	ldr	r3, [pc, #692]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4aac      	ldr	r2, [pc, #688]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002e6a:	f023 0304 	bic.w	r3, r3, #4
 8002e6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8081 	beq.w	8002f84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe ff77 	bl	8001d74 <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe ff72 	bl	8001d74 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e345      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002eac:	2202      	movs	r2, #2
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ef4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_OscConfig+0xa4c>
 8002f0a:	4b84      	ldr	r3, [pc, #528]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	e013      	b.n	8002f38 <HAL_RCC_OscConfig+0xa74>
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b79      	ldr	r3, [pc, #484]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f40:	2102      	movs	r1, #2
 8002f42:	6011      	str	r1, [r2, #0]
 8002f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	fa92 f1a2 	rbit	r1, r2
 8002f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f5a:	6011      	str	r1, [r2, #0]
  return result;
 8002f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d084      	beq.n	8002e8c <HAL_RCC_OscConfig+0x9c8>
 8002f82:	e07f      	b.n	8003084 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fef6 	bl	8001d74 <HAL_GetTick>
 8002f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00b      	b.n	8002fa6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe fef1 	bl	8001d74 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e2c4      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fae:	2202      	movs	r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002fec:	601a      	str	r2, [r3, #0]
  return result;
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ff6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0xb4e>
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	e013      	b.n	800303a <HAL_RCC_OscConfig+0xb76>
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800303e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003042:	2102      	movs	r1, #2
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	fa92 f1a2 	rbit	r1, r2
 8003054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003058:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800305c:	6011      	str	r1, [r2, #0]
  return result;
 800305e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003062:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f002 021f 	and.w	r2, r2, #31
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d184      	bne.n	8002f8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003084:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003096:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8242 	beq.w	800352e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_RCC_OscConfig+0xc58>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	f000 8213 	beq.w	80034de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	f040 8162 	bne.w	800338e <HAL_RCC_OscConfig+0xeca>
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80030d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2300      	movs	r3, #0
 800310e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fe30 	bl	8001d74 <HAL_GetTick>
 8003114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	e00c      	b.n	8003134 <HAL_RCC_OscConfig+0xc70>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fe28 	bl	8001d74 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1fd      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800313c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003158:	601a      	str	r2, [r3, #0]
  return result;
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003162:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_RCC_OscConfig+0xcba>
 8003178:	4bb0      	ldr	r3, [pc, #704]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e027      	b.n	80031ce <HAL_RCC_OscConfig+0xd0a>
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4b9c      	ldr	r3, [pc, #624]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80031d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031da:	6011      	str	r1, [r2, #0]
 80031dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	fa92 f1a2 	rbit	r1, r2
 80031ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031f2:	6011      	str	r1, [r2, #0]
  return result;
 80031f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	fab2 f282 	clz	r2, r2
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f042 0220 	orr.w	r2, r2, #32
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f002 021f 	and.w	r2, r2, #31
 800320e:	2101      	movs	r1, #1
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d182      	bne.n	8003120 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	430b      	orrs	r3, r1
 800323c:	497f      	ldr	r1, [pc, #508]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800324a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003266:	601a      	str	r2, [r3, #0]
  return result;
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003270:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800327c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	2301      	movs	r3, #1
 8003286:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fd74 	bl	8001d74 <HAL_GetTick>
 800328c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fd6f 	bl	8001d74 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e144      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032ca:	601a      	str	r2, [r3, #0]
  return result;
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe2c>
 80032ea:	4b54      	ldr	r3, [pc, #336]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e027      	b.n	8003340 <HAL_RCC_OscConfig+0xe7c>
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80032f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fa93 f2a3 	rbit	r2, r3
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800331e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003344:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003348:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800334c:	6011      	str	r1, [r2, #0]
 800334e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003352:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fa92 f1a2 	rbit	r1, r2
 800335c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003360:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003364:	6011      	str	r1, [r2, #0]
  return result;
 8003366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	fab2 f282 	clz	r2, r2
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f002 021f 	and.w	r2, r2, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d082      	beq.n	8003292 <HAL_RCC_OscConfig+0xdce>
 800338c:	e0cf      	b.n	800352e <HAL_RCC_OscConfig+0x106a>
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003396:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800339a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fa93 f2a3 	rbit	r2, r3
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033b2:	601a      	str	r2, [r3, #0]
  return result;
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fcce 	bl	8001d74 <HAL_GetTick>
 80033d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033dc:	e009      	b.n	80033f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe fcc9 	bl	8001d74 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e09e      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80033fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003416:	601a      	str	r2, [r3, #0]
  return result;
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003420:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d104      	bne.n	8003440 <HAL_RCC_OscConfig+0xf7c>
 8003436:	4b01      	ldr	r3, [pc, #4]	; (800343c <HAL_RCC_OscConfig+0xf78>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e029      	b.n	8003490 <HAL_RCC_OscConfig+0xfcc>
 800343c:	40021000 	.word	0x40021000
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800346e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCC_OscConfig+0x1078>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003494:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003498:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034b4:	6011      	str	r1, [r2, #0]
  return result;
 80034b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d180      	bne.n	80033de <HAL_RCC_OscConfig+0xf1a>
 80034dc:	e027      	b.n	800352e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e01e      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_RCC_OscConfig+0x1078>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80034fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	429a      	cmp	r2, r3
 8003510:	d10b      	bne.n	800352a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003512:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09e      	sub	sp, #120	; 0x78
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e162      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b90      	ldr	r3, [pc, #576]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b8d      	ldr	r3, [pc, #564]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	498b      	ldr	r1, [pc, #556]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e14a      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	497f      	ldr	r1, [pc, #508]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80dc 	beq.w	800376c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d13c      	bne.n	8003636 <HAL_RCC_ClockConfig+0xf6>
 80035bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xa6>
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	e00f      	b.n	8003606 <HAL_RCC_ClockConfig+0xc6>
 80035e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	667b      	str	r3, [r7, #100]	; 0x64
 80035f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f8:	663b      	str	r3, [r7, #96]	; 0x60
 80035fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800360a:	65ba      	str	r2, [r7, #88]	; 0x58
 800360c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003614:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d17b      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0f3      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d13c      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x178>
 800363e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003642:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800364c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_RCC_ClockConfig+0x128>
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e00f      	b.n	8003688 <HAL_RCC_ClockConfig+0x148>
 8003668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
 8003676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368c:	63ba      	str	r2, [r7, #56]	; 0x38
 800368e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003690:	fa92 f2a2 	rbit	r2, r2
 8003694:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003698:	fab2 f282 	clz	r2, r2
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f042 0220 	orr.w	r2, r2, #32
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f002 021f 	and.w	r2, r2, #31
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f202 	lsl.w	r2, r1, r2
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13a      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b2      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
 80036b8:	2302      	movs	r3, #2
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x1a0>
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e00d      	b.n	80036fc <HAL_RCC_ClockConfig+0x1bc>
 80036e0:	2302      	movs	r3, #2
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	2302      	movs	r3, #2
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	2202      	movs	r2, #2
 80036fe:	61ba      	str	r2, [r7, #24]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	fa92 f2a2 	rbit	r2, r2
 8003706:	617a      	str	r2, [r7, #20]
  return result;
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f042 0220 	orr.w	r2, r2, #32
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e079      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800373c:	f7fe fb1a 	bl	8001d74 <HAL_GetTick>
 8003740:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fe fb16 	bl	8001d74 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e061      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d214      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4906      	ldr	r1, [pc, #24]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e040      	b.n	800381e <HAL_RCC_ClockConfig+0x2de>
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	491a      	ldr	r1, [pc, #104]	; (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4912      	ldr	r1, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037e2:	f000 f829 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_RCC_ClockConfig+0x2e8>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f0:	22f0      	movs	r2, #240	; 0xf0
 80037f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	60fa      	str	r2, [r7, #12]
  return result;
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	40d3      	lsrs	r3, r2
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x2ec>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	fa21 f303 	lsr.w	r3, r1, r3
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <HAL_RCC_ClockConfig+0x2f0>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_ClockConfig+0x2f4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fa68 	bl	8001cec <HAL_InitTick>
  
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3778      	adds	r7, #120	; 0x78
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	0800bbd8 	.word	0x0800bbd8
 8003830:	20000008 	.word	0x20000008
 8003834:	2000000c 	.word	0x2000000c

08003838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b08b      	sub	sp, #44	; 0x2c
 800383c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003852:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x30>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x36>
 8003866:	e03c      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800386a:	623b      	str	r3, [r7, #32]
      break;
 800386c:	e03c      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003874:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003878:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	607a      	str	r2, [r7, #4]
  return result;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	40d3      	lsrs	r3, r2
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_RCC_GetSysClockFreq+0xc8>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003892:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	220f      	movs	r2, #15
 800389c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	fa92 f2a2 	rbit	r2, r2
 80038a4:	60fa      	str	r2, [r7, #12]
  return result;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	40d3      	lsrs	r3, r2
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038b2:	5cd3      	ldrb	r3, [r2, r3]
 80038b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e004      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	623b      	str	r3, [r7, #32]
      break;
 80038e0:	e002      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80038e4:	623b      	str	r3, [r7, #32]
      break;
 80038e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	372c      	adds	r7, #44	; 0x2c
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	0800bbf0 	.word	0x0800bbf0
 8003904:	0800bc00 	.word	0x0800bc00
 8003908:	003d0900 	.word	0x003d0900

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_RCC_GetHCLKFreq+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000008 	.word	0x20000008

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800392a:	f7ff ffef 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800392e:	4601      	mov	r1, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003938:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800393c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	fa92 f2a2 	rbit	r2, r2
 8003944:	603a      	str	r2, [r7, #0]
  return result;
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	40d3      	lsrs	r3, r2
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	0800bbe8 	.word	0x0800bbe8

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800396e:	f7ff ffcd 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003972:	4601      	mov	r1, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800397c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003980:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	fa92 f2a2 	rbit	r2, r2
 8003988:	603a      	str	r2, [r7, #0]
  return result;
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	40d3      	lsrs	r3, r2
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003996:	5cd3      	ldrb	r3, [r2, r3]
 8003998:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	0800bbe8 	.word	0x0800bbe8

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b092      	sub	sp, #72	; 0x48
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80d4 	beq.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d0:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	61d3      	str	r3, [r2, #28]
 80039e8:	4b48      	ldr	r3, [pc, #288]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe f9af 	bl	8001d74 <HAL_GetTick>
 8003a16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe f9ab 	bl	8001d74 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e14b      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8084 	beq.w	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d07c      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	461a      	mov	r2, r3
 8003a82:	2301      	movs	r3, #1
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe f95b 	bl	8001d74 <HAL_GetTick>
 8003abe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fe f957 	bl	8001d74 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0f5      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	61fb      	str	r3, [r7, #28]
  return result;
 8003af0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0302 	orr.w	r3, r3, #2
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d108      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b06:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	e00d      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	10908100 	.word	0x10908100
 8003b18:	2302      	movs	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	2202      	movs	r2, #2
 8003b2a:	613a      	str	r2, [r7, #16]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	fa92 f2a2 	rbit	r2, r2
 8003b32:	60fa      	str	r2, [r7, #12]
  return result;
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	fab2 f282 	clz	r2, r2
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	f002 021f 	and.w	r2, r2, #31
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0b7      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b52:	4b5e      	ldr	r3, [pc, #376]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	495b      	ldr	r1, [pc, #364]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b84:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f023 0203 	bic.w	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494e      	ldr	r1, [pc, #312]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f023 0210 	bic.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4947      	ldr	r1, [pc, #284]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bc0:	4b42      	ldr	r3, [pc, #264]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	493f      	ldr	r1, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f023 0220 	bic.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	4938      	ldr	r1, [pc, #224]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bfc:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	4930      	ldr	r1, [pc, #192]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4929      	ldr	r1, [pc, #164]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4921      	ldr	r1, [pc, #132]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	491a      	ldr	r1, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	4912      	ldr	r1, [pc, #72]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	490b      	ldr	r1, [pc, #44]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3748      	adds	r7, #72	; 0x48
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e073      	b.n	8003dce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7f5b      	ldrb	r3, [r3, #29]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fdf2 	bl	80018e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d055      	beq.n	8003dbc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	22ca      	movs	r2, #202	; 0xca
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2253      	movs	r2, #83	; 0x53
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f87f 	bl	8003e24 <RTC_EnterInitMode>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12c      	bne.n	8003d8a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6919      	ldr	r1, [r3, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	041a      	lsls	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f886 	bl	8003e92 <RTC_ExitInitMode>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d110      	bne.n	8003db2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dba:	e001      	b.n	8003dc0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0d      	ldr	r2, [pc, #52]	; (8003e20 <HAL_RTC_WaitForSynchro+0x48>)
 8003dea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7fd ffc2 	bl	8001d74 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003df2:	e009      	b.n	8003e08 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003df4:	f7fd ffbe 	bl	8001d74 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e02:	d901      	bls.n	8003e08 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e007      	b.n	8003e18 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ee      	beq.n	8003df4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00017f5f 	.word	0x00017f5f

08003e24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d122      	bne.n	8003e88 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e52:	f7fd ff8f 	bl	8001d74 <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e58:	e00c      	b.n	8003e74 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e5a:	f7fd ff8b 	bl	8001d74 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e68:	d904      	bls.n	8003e74 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <RTC_EnterInitMode+0x64>
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1e8      	bne.n	8003e5a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff8b 	bl	8003dd8 <HAL_RTC_WaitForSynchro>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003ee8:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5a      	ldr	r2, [pc, #360]	; (8004058 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	7f1b      	ldrb	r3, [r3, #28]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e09d      	b.n	8004046 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	22ca      	movs	r2, #202	; 0xca
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2253      	movs	r2, #83	; 0x53
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d018      	beq.n	8003f66 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e076      	b.n	8004046 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003f86:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a32      	ldr	r2, [pc, #200]	; (8004058 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e041      	b.n	8004046 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0e6      	beq.n	8003f9e <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0207 	bic.w	r2, r2, #7
 8003fde:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003ff8:	4b18      	ldr	r3, [pc, #96]	; (800405c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a17      	ldr	r2, [pc, #92]	; (800405c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004002:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800401e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	22ff      	movs	r2, #255	; 0xff
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000008 	.word	0x20000008
 8004058:	10624dd3 	.word	0x10624dd3
 800405c:	40010400 	.word	0x40010400

08004060 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7f1b      	ldrb	r3, [r3, #28]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e047      	b.n	8004108 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	22ca      	movs	r2, #202	; 0xca
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2253      	movs	r2, #83	; 0x53
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040b2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b4:	f7fd fe5e 	bl	8001d74 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040ba:	e013      	b.n	80040e4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040bc:	f7fd fe5a 	bl	8001d74 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ca:	d90b      	bls.n	80040e4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e011      	b.n	8004108 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0e4      	beq.n	80040bc <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800411a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800411e:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800413e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f809 	bl	8004158 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	775a      	strb	r2, [r3, #29]
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40010400 	.word	0x40010400

08004158 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e040      	b.n	8004200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fbd2 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fcca 	bl	8004b44 <UART_SetConfig>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e022      	b.n	8004200 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fdf4 	bl	8004db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fe7b 	bl	8004ef4 <UART_CheckIdleState>
 80041fe:	4603      	mov	r3, r0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421c:	2b20      	cmp	r3, #32
 800421e:	d178      	bne.n	8004312 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_UART_Transmit+0x24>
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e071      	b.n	8004314 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2221      	movs	r2, #33	; 0x21
 800423c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423e:	f7fd fd99 	bl	8001d74 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d108      	bne.n	8004270 <HAL_UART_Transmit+0x68>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e003      	b.n	8004278 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004278:	e030      	b.n	80042dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fedd 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e03c      	b.n	8004314 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ac:	b292      	uxth	r2, r2
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	3302      	adds	r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	e008      	b.n	80042ca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	b292      	uxth	r2, r2
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3301      	adds	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1c8      	bne.n	800427a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2140      	movs	r1, #64	; 0x40
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fea6 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e005      	b.n	8004314 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 80b6 	bne.w	80044a4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Receive+0x28>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0ae      	b.n	80044a6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2222      	movs	r2, #34	; 0x22
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435e:	f7fd fd09 	bl	8001d74 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437c:	d10e      	bne.n	800439c <HAL_UART_Receive+0x80>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <HAL_UART_Receive+0x76>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f240 12ff 	movw	r2, #511	; 0x1ff
 800438c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004390:	e02d      	b.n	80043ee <HAL_UART_Receive+0xd2>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800439a:	e028      	b.n	80043ee <HAL_UART_Receive+0xd2>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_UART_Receive+0xa4>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_UART_Receive+0x9a>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b4:	e01b      	b.n	80043ee <HAL_UART_Receive+0xd2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	227f      	movs	r2, #127	; 0x7f
 80043ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043be:	e016      	b.n	80043ee <HAL_UART_Receive+0xd2>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c8:	d10d      	bne.n	80043e6 <HAL_UART_Receive+0xca>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Receive+0xc0>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	227f      	movs	r2, #127	; 0x7f
 80043d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043da:	e008      	b.n	80043ee <HAL_UART_Receive+0xd2>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	223f      	movs	r2, #63	; 0x3f
 80043e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e4:	e003      	b.n	80043ee <HAL_UART_Receive+0xd2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d108      	bne.n	8004412 <HAL_UART_Receive+0xf6>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e003      	b.n	800441a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800441a:	e037      	b.n	800448c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	2120      	movs	r1, #32
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fe0c 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e033      	b.n	80044a6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800444a:	b29a      	uxth	r2, r3
 800444c:	8a7b      	ldrh	r3, [r7, #18]
 800444e:	4013      	ands	r3, r2
 8004450:	b29a      	uxth	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	3302      	adds	r3, #2
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e00d      	b.n	800447a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004464:	b29b      	uxth	r3, r3
 8004466:	b2da      	uxtb	r2, r3
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4013      	ands	r3, r2
 800446e:	b2da      	uxtb	r2, r3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1c1      	bne.n	800441c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d132      	bne.n	800452c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_Receive_IT+0x24>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02b      	b.n	800452e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	613b      	str	r3, [r7, #16]
   return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	69f9      	ldr	r1, [r7, #28]
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	61bb      	str	r3, [r7, #24]
   return(result);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	461a      	mov	r2, r3
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fdf6 	bl	8005114 <UART_Start_Receive_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0ba      	sub	sp, #232	; 0xe8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800455e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004562:	f640 030f 	movw	r3, #2063	; 0x80f
 8004566:	4013      	ands	r3, r2
 8004568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800456c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d115      	bne.n	80045a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00f      	beq.n	80045a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 82ab 	beq.w	8004aec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
      }
      return;
 800459e:	e2a5      	b.n	8004aec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8117 	beq.w	80047d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045ba:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_UART_IRQHandler+0x298>)
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 810a 	beq.w	80047d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <HAL_UART_IRQHandler+0xbc>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2201      	movs	r2, #1
 80045e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d011      	beq.n	8004624 <HAL_UART_IRQHandler+0xec>
 8004600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2202      	movs	r2, #2
 8004612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	f043 0204 	orr.w	r2, r3, #4
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d011      	beq.n	8004654 <HAL_UART_IRQHandler+0x11c>
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2204      	movs	r2, #4
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	f043 0202 	orr.w	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d017      	beq.n	8004690 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800466c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2208      	movs	r2, #8
 800467e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	f043 0208 	orr.w	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_UART_IRQHandler+0x18a>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8211 	beq.w	8004af0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d005      	beq.n	800471a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004712:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04f      	beq.n	80047ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fdc0 	bl	80052a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d141      	bne.n	80047b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800475a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800475e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1d9      	bne.n	800472e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_UART_IRQHandler+0x29c>)
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd fc6a 	bl	8002068 <HAL_DMA_Abort_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d017      	beq.n	80047ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047a4:	4610      	mov	r0, r2
 80047a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e00f      	b.n	80047ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9b4 	bl	8004b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e00b      	b.n	80047ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9b0 	bl	8004b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e007      	b.n	80047ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9ac 	bl	8004b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047c8:	e192      	b.n	8004af0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	bf00      	nop
    return;
 80047cc:	e190      	b.n	8004af0 <HAL_UART_IRQHandler+0x5b8>
 80047ce:	bf00      	nop
 80047d0:	04000120 	.word	0x04000120
 80047d4:	08005369 	.word	0x08005369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 814b 	bne.w	8004a78 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8144 	beq.w	8004a78 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 813d 	beq.w	8004a78 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	f040 80b5 	bne.w	8004980 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004822:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8164 	beq.w	8004af4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004836:	429a      	cmp	r2, r3
 8004838:	f080 815c 	bcs.w	8004af4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b20      	cmp	r3, #32
 800484e:	f000 8086 	beq.w	800495e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800487c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004880:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004888:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1da      	bne.n	8004852 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e1      	bne.n	800489c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004902:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800490a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e3      	bne.n	80048d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004940:	65bb      	str	r3, [r7, #88]	; 0x58
 8004942:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e4      	bne.n	800491e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fb4c 	bl	8001ff6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004970:	b29b      	uxth	r3, r3
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	b29b      	uxth	r3, r3
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8d7 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800497e:	e0b9      	b.n	8004af4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800498c:	b29b      	uxth	r3, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80ab 	beq.w	8004af8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80049a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80a6 	beq.w	8004af8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e4      	bne.n	80049ac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	623b      	str	r3, [r7, #32]
   return(result);
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a06:	633a      	str	r2, [r7, #48]	; 0x30
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e3      	bne.n	80049e2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e4      	bne.n	8004a2e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f85b 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a76:	e03f      	b.n	8004af8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00e      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x56a>
 8004a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fe4c 	bl	8005738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa0:	e02d      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01c      	beq.n	8004afc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    }
    return;
 8004aca:	e017      	b.n	8004afc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <HAL_UART_IRQHandler+0x5c6>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fc55 	bl	8005394 <UART_EndTransmit_IT>
    return;
 8004aea:	e008      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004aec:	bf00      	nop
 8004aee:	e006      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004af0:	bf00      	nop
 8004af2:	e004      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004afc:	bf00      	nop
  }

}
 8004afe:	37e8      	adds	r7, #232	; 0xe8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8a      	ldr	r3, [pc, #552]	; (8004d98 <UART_SetConfig+0x254>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6979      	ldr	r1, [r7, #20]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a78      	ldr	r2, [pc, #480]	; (8004d9c <UART_SetConfig+0x258>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d120      	bne.n	8004c02 <UART_SetConfig+0xbe>
 8004bc0:	4b77      	ldr	r3, [pc, #476]	; (8004da0 <UART_SetConfig+0x25c>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d817      	bhi.n	8004bfc <UART_SetConfig+0xb8>
 8004bcc:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x90>)
 8004bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd2:	bf00      	nop
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bf1 	.word	0x08004bf1
 8004bdc:	08004bf7 	.word	0x08004bf7
 8004be0:	08004beb 	.word	0x08004beb
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e01d      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e01a      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e017      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e014      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e011      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a67      	ldr	r2, [pc, #412]	; (8004da4 <UART_SetConfig+0x260>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d102      	bne.n	8004c12 <UART_SetConfig+0xce>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e009      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a64      	ldr	r2, [pc, #400]	; (8004da8 <UART_SetConfig+0x264>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d102      	bne.n	8004c22 <UART_SetConfig+0xde>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e001      	b.n	8004c26 <UART_SetConfig+0xe2>
 8004c22:	2310      	movs	r3, #16
 8004c24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d15a      	bne.n	8004ce6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c30:	7ffb      	ldrb	r3, [r7, #31]
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d827      	bhi.n	8004c86 <UART_SetConfig+0x142>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0xf8>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fe60 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8004c64:	61b8      	str	r0, [r7, #24]
        break;
 8004c66:	e013      	b.n	8004c90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe fe7e 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	61b8      	str	r0, [r7, #24]
        break;
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <UART_SetConfig+0x268>)
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e00c      	b.n	8004c90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fddf 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 8004c7a:	61b8      	str	r0, [r7, #24]
        break;
 8004c7c:	e008      	b.n	8004c90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61bb      	str	r3, [r7, #24]
        break;
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d074      	beq.n	8004d80 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d916      	bls.n	8004ce0 <UART_SetConfig+0x19c>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d212      	bcs.n	8004ce0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f023 030f 	bic.w	r3, r3, #15
 8004cc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	89fa      	ldrh	r2, [r7, #14]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	e04f      	b.n	8004d80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77bb      	strb	r3, [r7, #30]
 8004ce4:	e04c      	b.n	8004d80 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d828      	bhi.n	8004d3e <UART_SetConfig+0x1fa>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x1b0>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d2f 	.word	0x08004d2f
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d3f 	.word	0x08004d3f
 8004d14:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fe fe04 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	61b8      	str	r0, [r7, #24]
        break;
 8004d1e:	e013      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fe fe22 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004d24:	61b8      	str	r0, [r7, #24]
        break;
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <UART_SetConfig+0x268>)
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fe fd83 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 8004d32:	61b8      	str	r0, [r7, #24]
        break;
 8004d34:	e008      	b.n	8004d48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3a:	61bb      	str	r3, [r7, #24]
        break;
 8004d3c:	e004      	b.n	8004d48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	77bb      	strb	r3, [r7, #30]
        break;
 8004d46:	bf00      	nop
    }

    if (pclk != 0U)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085a      	lsrs	r2, r3, #1
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d909      	bls.n	8004d7c <UART_SetConfig+0x238>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d205      	bcs.n	8004d7c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e001      	b.n	8004d80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	efff69f3 	.word	0xefff69f3
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40004400 	.word	0x40004400
 8004da8:	40004800 	.word	0x40004800
 8004dac:	007a1200 	.word	0x007a1200

08004db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eae:	d10a      	bne.n	8004ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b098      	sub	sp, #96	; 0x60
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f04:	f7fc ff36 	bl	8001d74 <HAL_GetTick>
 8004f08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d12e      	bne.n	8004f76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f88c 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d021      	beq.n	8004f76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f46:	653b      	str	r3, [r7, #80]	; 0x50
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
 8004f52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e6      	bne.n	8004f32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e062      	b.n	800503c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d149      	bne.n	8005018 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f856 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d03c      	beq.n	8005018 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	623b      	str	r3, [r7, #32]
   return(result);
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff0:	61fa      	str	r2, [r7, #28]
 8004ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	69b9      	ldr	r1, [r7, #24]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e011      	b.n	800503c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3758      	adds	r7, #88	; 0x58
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	e049      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505c:	d045      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fc fe89 	bl	8001d74 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <UART_WaitOnFlagUntilTimeout+0x30>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e048      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d031      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d110      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2208      	movs	r2, #8
 800509a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8ff 	bl	80052a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2208      	movs	r2, #8
 80050a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e029      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c4:	d111      	bne.n	80050ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f8e5 	bl	80052a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e00f      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d0a6      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005114:	b480      	push	{r7}
 8005116:	b097      	sub	sp, #92	; 0x5c
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d10e      	bne.n	8005166 <UART_Start_Receive_IT+0x52>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <UART_Start_Receive_IT+0x48>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800515a:	e02d      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005164:	e028      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <UART_Start_Receive_IT+0x76>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <UART_Start_Receive_IT+0x6c>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800517e:	e01b      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	227f      	movs	r2, #127	; 0x7f
 8005184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005188:	e016      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005192:	d10d      	bne.n	80051b0 <UART_Start_Receive_IT+0x9c>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <UART_Start_Receive_IT+0x92>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	227f      	movs	r2, #127	; 0x7f
 80051a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a4:	e008      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	223f      	movs	r2, #63	; 0x3f
 80051aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ae:	e003      	b.n	80051b8 <UART_Start_Receive_IT+0xa4>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2222      	movs	r2, #34	; 0x22
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005204:	d107      	bne.n	8005216 <UART_Start_Receive_IT+0x102>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a21      	ldr	r2, [pc, #132]	; (8005298 <UART_Start_Receive_IT+0x184>)
 8005212:	669a      	str	r2, [r3, #104]	; 0x68
 8005214:	e002      	b.n	800521c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a20      	ldr	r2, [pc, #128]	; (800529c <UART_Start_Receive_IT+0x188>)
 800521a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d019      	beq.n	8005258 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_Start_Receive_IT+0x110>
 8005256:	e018      	b.n	800528a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f043 0320 	orr.w	r3, r3, #32
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	61bb      	str	r3, [r7, #24]
   return(result);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	375c      	adds	r7, #92	; 0x5c
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	08005591 	.word	0x08005591
 800529c:	080053e9 	.word	0x080053e9

080052a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b095      	sub	sp, #84	; 0x54
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
 80052c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005312:	2b01      	cmp	r3, #1
 8005314:	d118      	bne.n	8005348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60bb      	str	r3, [r7, #8]
   return(result);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	647b      	str	r3, [r7, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	613b      	str	r3, [r7, #16]
   return(result);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800535c:	bf00      	nop
 800535e:	3754      	adds	r7, #84	; 0x54
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fbc6 	bl	8004b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	613b      	str	r3, [r7, #16]
   return(result);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e6      	bne.n	800539c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fb92 	bl	8004b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e0:	bf00      	nop
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b09c      	sub	sp, #112	; 0x70
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005400:	2b22      	cmp	r3, #34	; 0x22
 8005402:	f040 80b9 	bne.w	8005578 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800540c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005410:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005414:	b2d9      	uxtb	r1, r3
 8005416:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800541a:	b2da      	uxtb	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	400a      	ands	r2, r1
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f040 809c 	bne.w	8005588 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800545e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005464:	66bb      	str	r3, [r7, #104]	; 0x68
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800546e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005470:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e6      	bne.n	8005450 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3308      	adds	r3, #8
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	667b      	str	r3, [r7, #100]	; 0x64
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054a2:	647a      	str	r2, [r7, #68]	; 0x44
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e5      	bne.n	8005482 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d018      	beq.n	800550a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	623b      	str	r3, [r7, #32]
   return(result);
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
 80054f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e6      	bne.n	80054d8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	2b01      	cmp	r3, #1
 8005510:	d12e      	bne.n	8005570 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	60fb      	str	r3, [r7, #12]
   return(result);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 0310 	bic.w	r3, r3, #16
 800552c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	69b9      	ldr	r1, [r7, #24]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	617b      	str	r3, [r7, #20]
   return(result);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e6      	bne.n	8005518 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d103      	bne.n	8005560 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2210      	movs	r2, #16
 800555e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fadf 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800556e:	e00b      	b.n	8005588 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fc f827 	bl	80015c4 <HAL_UART_RxCpltCallback>
}
 8005576:	e007      	b.n	8005588 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]
}
 8005588:	bf00      	nop
 800558a:	3770      	adds	r7, #112	; 0x70
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b09c      	sub	sp, #112	; 0x70
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800559e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a8:	2b22      	cmp	r3, #34	; 0x22
 80055aa:	f040 80b9 	bne.w	8005720 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80055be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80055c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055c6:	4013      	ands	r3, r2
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 809c 	bne.w	8005730 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560c:	667b      	str	r3, [r7, #100]	; 0x64
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
 8005618:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800561c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	663b      	str	r3, [r7, #96]	; 0x60
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800564a:	643a      	str	r2, [r7, #64]	; 0x40
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	61fb      	str	r3, [r7, #28]
   return(result);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e6      	bne.n	8005680 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d12e      	bne.n	8005718 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 0310 	bic.w	r3, r3, #16
 80056d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6979      	ldr	r1, [r7, #20]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	613b      	str	r3, [r7, #16]
   return(result);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e6      	bne.n	80056c0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d103      	bne.n	8005708 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2210      	movs	r2, #16
 8005706:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff fa0b 	bl	8004b2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005716:	e00b      	b.n	8005730 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fb ff53 	bl	80015c4 <HAL_UART_RxCpltCallback>
}
 800571e:	e007      	b.n	8005730 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0208 	orr.w	r2, r2, #8
 800572e:	619a      	str	r2, [r3, #24]
}
 8005730:	bf00      	nop
 8005732:	3770      	adds	r7, #112	; 0x70
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <atof>:
 800574c:	2100      	movs	r1, #0
 800574e:	f000 be8d 	b.w	800646c <strtod>

08005752 <atoi>:
 8005752:	220a      	movs	r2, #10
 8005754:	2100      	movs	r1, #0
 8005756:	f000 bf47 	b.w	80065e8 <strtol>
	...

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000014 	.word	0x20000014

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4d0d      	ldr	r5, [pc, #52]	; (80057a0 <__libc_init_array+0x38>)
 800576c:	4c0d      	ldr	r4, [pc, #52]	; (80057a4 <__libc_init_array+0x3c>)
 800576e:	1b64      	subs	r4, r4, r5
 8005770:	10a4      	asrs	r4, r4, #2
 8005772:	2600      	movs	r6, #0
 8005774:	42a6      	cmp	r6, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	4d0b      	ldr	r5, [pc, #44]	; (80057a8 <__libc_init_array+0x40>)
 800577a:	4c0c      	ldr	r4, [pc, #48]	; (80057ac <__libc_init_array+0x44>)
 800577c:	f006 f8fe 	bl	800b97c <_init>
 8005780:	1b64      	subs	r4, r4, r5
 8005782:	10a4      	asrs	r4, r4, #2
 8005784:	2600      	movs	r6, #0
 8005786:	42a6      	cmp	r6, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005790:	4798      	blx	r3
 8005792:	3601      	adds	r6, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	f855 3b04 	ldr.w	r3, [r5], #4
 800579a:	4798      	blx	r3
 800579c:	3601      	adds	r6, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	0800c070 	.word	0x0800c070
 80057a4:	0800c070 	.word	0x0800c070
 80057a8:	0800c070 	.word	0x0800c070
 80057ac:	0800c078 	.word	0x0800c078

080057b0 <memset>:
 80057b0:	4402      	add	r2, r0
 80057b2:	4603      	mov	r3, r0
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d100      	bne.n	80057ba <memset+0xa>
 80057b8:	4770      	bx	lr
 80057ba:	f803 1b01 	strb.w	r1, [r3], #1
 80057be:	e7f9      	b.n	80057b4 <memset+0x4>

080057c0 <snprintf>:
 80057c0:	b40c      	push	{r2, r3}
 80057c2:	b530      	push	{r4, r5, lr}
 80057c4:	4b17      	ldr	r3, [pc, #92]	; (8005824 <snprintf+0x64>)
 80057c6:	1e0c      	subs	r4, r1, #0
 80057c8:	681d      	ldr	r5, [r3, #0]
 80057ca:	b09d      	sub	sp, #116	; 0x74
 80057cc:	da08      	bge.n	80057e0 <snprintf+0x20>
 80057ce:	238b      	movs	r3, #139	; 0x8b
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d6:	b01d      	add	sp, #116	; 0x74
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	b002      	add	sp, #8
 80057de:	4770      	bx	lr
 80057e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057e8:	bf14      	ite	ne
 80057ea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80057ee:	4623      	moveq	r3, r4
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	9006      	str	r0, [sp, #24]
 80057fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005802:	ab21      	add	r3, sp, #132	; 0x84
 8005804:	a902      	add	r1, sp, #8
 8005806:	4628      	mov	r0, r5
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f000 fef9 	bl	8006600 <_svfprintf_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	bfbc      	itt	lt
 8005812:	238b      	movlt	r3, #139	; 0x8b
 8005814:	602b      	strlt	r3, [r5, #0]
 8005816:	2c00      	cmp	r4, #0
 8005818:	d0dd      	beq.n	80057d6 <snprintf+0x16>
 800581a:	9b02      	ldr	r3, [sp, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e7d9      	b.n	80057d6 <snprintf+0x16>
 8005822:	bf00      	nop
 8005824:	20000014 	.word	0x20000014

08005828 <sulp>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4604      	mov	r4, r0
 800582c:	460d      	mov	r5, r1
 800582e:	ec45 4b10 	vmov	d0, r4, r5
 8005832:	4616      	mov	r6, r2
 8005834:	f004 f96c 	bl	8009b10 <__ulp>
 8005838:	ec51 0b10 	vmov	r0, r1, d0
 800583c:	b17e      	cbz	r6, 800585e <sulp+0x36>
 800583e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005846:	2b00      	cmp	r3, #0
 8005848:	dd09      	ble.n	800585e <sulp+0x36>
 800584a:	051b      	lsls	r3, r3, #20
 800584c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005850:	2400      	movs	r4, #0
 8005852:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	f7fa fedd 	bl	8000618 <__aeabi_dmul>
 800585e:	bd70      	pop	{r4, r5, r6, pc}

08005860 <_strtod_l>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ed2d 8b02 	vpush	{d8}
 8005868:	b09d      	sub	sp, #116	; 0x74
 800586a:	461f      	mov	r7, r3
 800586c:	2300      	movs	r3, #0
 800586e:	9318      	str	r3, [sp, #96]	; 0x60
 8005870:	4ba2      	ldr	r3, [pc, #648]	; (8005afc <_strtod_l+0x29c>)
 8005872:	9213      	str	r2, [sp, #76]	; 0x4c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	4604      	mov	r4, r0
 800587a:	4618      	mov	r0, r3
 800587c:	4688      	mov	r8, r1
 800587e:	f7fa fcb1 	bl	80001e4 <strlen>
 8005882:	f04f 0a00 	mov.w	sl, #0
 8005886:	4605      	mov	r5, r0
 8005888:	f04f 0b00 	mov.w	fp, #0
 800588c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	2a2b      	cmp	r2, #43	; 0x2b
 8005896:	d04e      	beq.n	8005936 <_strtod_l+0xd6>
 8005898:	d83b      	bhi.n	8005912 <_strtod_l+0xb2>
 800589a:	2a0d      	cmp	r2, #13
 800589c:	d834      	bhi.n	8005908 <_strtod_l+0xa8>
 800589e:	2a08      	cmp	r2, #8
 80058a0:	d834      	bhi.n	800590c <_strtod_l+0xac>
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d03e      	beq.n	8005924 <_strtod_l+0xc4>
 80058a6:	2300      	movs	r3, #0
 80058a8:	930a      	str	r3, [sp, #40]	; 0x28
 80058aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80058ac:	7833      	ldrb	r3, [r6, #0]
 80058ae:	2b30      	cmp	r3, #48	; 0x30
 80058b0:	f040 80b0 	bne.w	8005a14 <_strtod_l+0x1b4>
 80058b4:	7873      	ldrb	r3, [r6, #1]
 80058b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058ba:	2b58      	cmp	r3, #88	; 0x58
 80058bc:	d168      	bne.n	8005990 <_strtod_l+0x130>
 80058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	ab18      	add	r3, sp, #96	; 0x60
 80058c4:	9702      	str	r7, [sp, #8]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4a8d      	ldr	r2, [pc, #564]	; (8005b00 <_strtod_l+0x2a0>)
 80058ca:	ab19      	add	r3, sp, #100	; 0x64
 80058cc:	a917      	add	r1, sp, #92	; 0x5c
 80058ce:	4620      	mov	r0, r4
 80058d0:	f003 f87c 	bl	80089cc <__gethex>
 80058d4:	f010 0707 	ands.w	r7, r0, #7
 80058d8:	4605      	mov	r5, r0
 80058da:	d005      	beq.n	80058e8 <_strtod_l+0x88>
 80058dc:	2f06      	cmp	r7, #6
 80058de:	d12c      	bne.n	800593a <_strtod_l+0xda>
 80058e0:	3601      	adds	r6, #1
 80058e2:	2300      	movs	r3, #0
 80058e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80058e6:	930a      	str	r3, [sp, #40]	; 0x28
 80058e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 8590 	bne.w	8006410 <_strtod_l+0xbb0>
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	b1eb      	cbz	r3, 8005930 <_strtod_l+0xd0>
 80058f4:	4652      	mov	r2, sl
 80058f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058fa:	ec43 2b10 	vmov	d0, r2, r3
 80058fe:	b01d      	add	sp, #116	; 0x74
 8005900:	ecbd 8b02 	vpop	{d8}
 8005904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005908:	2a20      	cmp	r2, #32
 800590a:	d1cc      	bne.n	80058a6 <_strtod_l+0x46>
 800590c:	3301      	adds	r3, #1
 800590e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005910:	e7be      	b.n	8005890 <_strtod_l+0x30>
 8005912:	2a2d      	cmp	r2, #45	; 0x2d
 8005914:	d1c7      	bne.n	80058a6 <_strtod_l+0x46>
 8005916:	2201      	movs	r2, #1
 8005918:	920a      	str	r2, [sp, #40]	; 0x28
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	9217      	str	r2, [sp, #92]	; 0x5c
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1c2      	bne.n	80058aa <_strtod_l+0x4a>
 8005924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005926:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 856e 	bne.w	800640c <_strtod_l+0xbac>
 8005930:	4652      	mov	r2, sl
 8005932:	465b      	mov	r3, fp
 8005934:	e7e1      	b.n	80058fa <_strtod_l+0x9a>
 8005936:	2200      	movs	r2, #0
 8005938:	e7ee      	b.n	8005918 <_strtod_l+0xb8>
 800593a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800593c:	b13a      	cbz	r2, 800594e <_strtod_l+0xee>
 800593e:	2135      	movs	r1, #53	; 0x35
 8005940:	a81a      	add	r0, sp, #104	; 0x68
 8005942:	f004 f9f0 	bl	8009d26 <__copybits>
 8005946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005948:	4620      	mov	r0, r4
 800594a:	f003 fde2 	bl	8009512 <_Bfree>
 800594e:	3f01      	subs	r7, #1
 8005950:	2f04      	cmp	r7, #4
 8005952:	d806      	bhi.n	8005962 <_strtod_l+0x102>
 8005954:	e8df f007 	tbb	[pc, r7]
 8005958:	1714030a 	.word	0x1714030a
 800595c:	0a          	.byte	0x0a
 800595d:	00          	.byte	0x00
 800595e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005962:	0728      	lsls	r0, r5, #28
 8005964:	d5c0      	bpl.n	80058e8 <_strtod_l+0x88>
 8005966:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800596a:	e7bd      	b.n	80058e8 <_strtod_l+0x88>
 800596c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005970:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005972:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005976:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800597a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800597e:	e7f0      	b.n	8005962 <_strtod_l+0x102>
 8005980:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b04 <_strtod_l+0x2a4>
 8005984:	e7ed      	b.n	8005962 <_strtod_l+0x102>
 8005986:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800598a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800598e:	e7e8      	b.n	8005962 <_strtod_l+0x102>
 8005990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	9217      	str	r2, [sp, #92]	; 0x5c
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d0f9      	beq.n	8005990 <_strtod_l+0x130>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0a3      	beq.n	80058e8 <_strtod_l+0x88>
 80059a0:	2301      	movs	r3, #1
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059aa:	9308      	str	r3, [sp, #32]
 80059ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80059b0:	464f      	mov	r7, r9
 80059b2:	220a      	movs	r2, #10
 80059b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059b6:	7806      	ldrb	r6, [r0, #0]
 80059b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	2909      	cmp	r1, #9
 80059c0:	d92a      	bls.n	8005a18 <_strtod_l+0x1b8>
 80059c2:	9905      	ldr	r1, [sp, #20]
 80059c4:	462a      	mov	r2, r5
 80059c6:	f004 fa43 	bl	8009e50 <strncmp>
 80059ca:	b398      	cbz	r0, 8005a34 <_strtod_l+0x1d4>
 80059cc:	2000      	movs	r0, #0
 80059ce:	4632      	mov	r2, r6
 80059d0:	463d      	mov	r5, r7
 80059d2:	9005      	str	r0, [sp, #20]
 80059d4:	4603      	mov	r3, r0
 80059d6:	2a65      	cmp	r2, #101	; 0x65
 80059d8:	d001      	beq.n	80059de <_strtod_l+0x17e>
 80059da:	2a45      	cmp	r2, #69	; 0x45
 80059dc:	d118      	bne.n	8005a10 <_strtod_l+0x1b0>
 80059de:	b91d      	cbnz	r5, 80059e8 <_strtod_l+0x188>
 80059e0:	9a04      	ldr	r2, [sp, #16]
 80059e2:	4302      	orrs	r2, r0
 80059e4:	d09e      	beq.n	8005924 <_strtod_l+0xc4>
 80059e6:	2500      	movs	r5, #0
 80059e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80059ec:	f108 0201 	add.w	r2, r8, #1
 80059f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80059f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80059f6:	2a2b      	cmp	r2, #43	; 0x2b
 80059f8:	d075      	beq.n	8005ae6 <_strtod_l+0x286>
 80059fa:	2a2d      	cmp	r2, #45	; 0x2d
 80059fc:	d07b      	beq.n	8005af6 <_strtod_l+0x296>
 80059fe:	f04f 0c00 	mov.w	ip, #0
 8005a02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005a06:	2909      	cmp	r1, #9
 8005a08:	f240 8082 	bls.w	8005b10 <_strtod_l+0x2b0>
 8005a0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a10:	2600      	movs	r6, #0
 8005a12:	e09d      	b.n	8005b50 <_strtod_l+0x2f0>
 8005a14:	2300      	movs	r3, #0
 8005a16:	e7c4      	b.n	80059a2 <_strtod_l+0x142>
 8005a18:	2f08      	cmp	r7, #8
 8005a1a:	bfd8      	it	le
 8005a1c:	9907      	ldrle	r1, [sp, #28]
 8005a1e:	f100 0001 	add.w	r0, r0, #1
 8005a22:	bfda      	itte	le
 8005a24:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a28:	9307      	strle	r3, [sp, #28]
 8005a2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a2e:	3701      	adds	r7, #1
 8005a30:	9017      	str	r0, [sp, #92]	; 0x5c
 8005a32:	e7bf      	b.n	80059b4 <_strtod_l+0x154>
 8005a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a36:	195a      	adds	r2, r3, r5
 8005a38:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a3a:	5d5a      	ldrb	r2, [r3, r5]
 8005a3c:	2f00      	cmp	r7, #0
 8005a3e:	d037      	beq.n	8005ab0 <_strtod_l+0x250>
 8005a40:	9005      	str	r0, [sp, #20]
 8005a42:	463d      	mov	r5, r7
 8005a44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a48:	2b09      	cmp	r3, #9
 8005a4a:	d912      	bls.n	8005a72 <_strtod_l+0x212>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e7c2      	b.n	80059d6 <_strtod_l+0x176>
 8005a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a56:	785a      	ldrb	r2, [r3, #1]
 8005a58:	3001      	adds	r0, #1
 8005a5a:	2a30      	cmp	r2, #48	; 0x30
 8005a5c:	d0f8      	beq.n	8005a50 <_strtod_l+0x1f0>
 8005a5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	f200 84d9 	bhi.w	800641a <_strtod_l+0xbba>
 8005a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a6a:	9005      	str	r0, [sp, #20]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	9308      	str	r3, [sp, #32]
 8005a70:	4605      	mov	r5, r0
 8005a72:	3a30      	subs	r2, #48	; 0x30
 8005a74:	f100 0301 	add.w	r3, r0, #1
 8005a78:	d014      	beq.n	8005aa4 <_strtod_l+0x244>
 8005a7a:	9905      	ldr	r1, [sp, #20]
 8005a7c:	4419      	add	r1, r3
 8005a7e:	9105      	str	r1, [sp, #20]
 8005a80:	462b      	mov	r3, r5
 8005a82:	eb00 0e05 	add.w	lr, r0, r5
 8005a86:	210a      	movs	r1, #10
 8005a88:	4573      	cmp	r3, lr
 8005a8a:	d113      	bne.n	8005ab4 <_strtod_l+0x254>
 8005a8c:	182b      	adds	r3, r5, r0
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	f105 0501 	add.w	r5, r5, #1
 8005a94:	4405      	add	r5, r0
 8005a96:	dc1c      	bgt.n	8005ad2 <_strtod_l+0x272>
 8005a98:	9907      	ldr	r1, [sp, #28]
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	fb03 2301 	mla	r3, r3, r1, r2
 8005aa0:	9307      	str	r3, [sp, #28]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005aa6:	1c51      	adds	r1, r2, #1
 8005aa8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005aaa:	7852      	ldrb	r2, [r2, #1]
 8005aac:	4618      	mov	r0, r3
 8005aae:	e7c9      	b.n	8005a44 <_strtod_l+0x1e4>
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	e7d2      	b.n	8005a5a <_strtod_l+0x1fa>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	dc04      	bgt.n	8005ac2 <_strtod_l+0x262>
 8005ab8:	9e07      	ldr	r6, [sp, #28]
 8005aba:	434e      	muls	r6, r1
 8005abc:	9607      	str	r6, [sp, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7e2      	b.n	8005a88 <_strtod_l+0x228>
 8005ac2:	f103 0c01 	add.w	ip, r3, #1
 8005ac6:	f1bc 0f10 	cmp.w	ip, #16
 8005aca:	bfd8      	it	le
 8005acc:	fb01 f909 	mulle.w	r9, r1, r9
 8005ad0:	e7f5      	b.n	8005abe <_strtod_l+0x25e>
 8005ad2:	2d10      	cmp	r5, #16
 8005ad4:	bfdc      	itt	le
 8005ad6:	230a      	movle	r3, #10
 8005ad8:	fb03 2909 	mlale	r9, r3, r9, r2
 8005adc:	e7e1      	b.n	8005aa2 <_strtod_l+0x242>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e77c      	b.n	80059e0 <_strtod_l+0x180>
 8005ae6:	f04f 0c00 	mov.w	ip, #0
 8005aea:	f108 0202 	add.w	r2, r8, #2
 8005aee:	9217      	str	r2, [sp, #92]	; 0x5c
 8005af0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005af4:	e785      	b.n	8005a02 <_strtod_l+0x1a2>
 8005af6:	f04f 0c01 	mov.w	ip, #1
 8005afa:	e7f6      	b.n	8005aea <_strtod_l+0x28a>
 8005afc:	0800be9c 	.word	0x0800be9c
 8005b00:	0800bc14 	.word	0x0800bc14
 8005b04:	7ff00000 	.word	0x7ff00000
 8005b08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b0a:	1c51      	adds	r1, r2, #1
 8005b0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b0e:	7852      	ldrb	r2, [r2, #1]
 8005b10:	2a30      	cmp	r2, #48	; 0x30
 8005b12:	d0f9      	beq.n	8005b08 <_strtod_l+0x2a8>
 8005b14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005b18:	2908      	cmp	r1, #8
 8005b1a:	f63f af79 	bhi.w	8005a10 <_strtod_l+0x1b0>
 8005b1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005b22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b24:	9206      	str	r2, [sp, #24]
 8005b26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b28:	1c51      	adds	r1, r2, #1
 8005b2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b2c:	7852      	ldrb	r2, [r2, #1]
 8005b2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005b32:	2e09      	cmp	r6, #9
 8005b34:	d937      	bls.n	8005ba6 <_strtod_l+0x346>
 8005b36:	9e06      	ldr	r6, [sp, #24]
 8005b38:	1b89      	subs	r1, r1, r6
 8005b3a:	2908      	cmp	r1, #8
 8005b3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005b40:	dc02      	bgt.n	8005b48 <_strtod_l+0x2e8>
 8005b42:	4576      	cmp	r6, lr
 8005b44:	bfa8      	it	ge
 8005b46:	4676      	movge	r6, lr
 8005b48:	f1bc 0f00 	cmp.w	ip, #0
 8005b4c:	d000      	beq.n	8005b50 <_strtod_l+0x2f0>
 8005b4e:	4276      	negs	r6, r6
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d14d      	bne.n	8005bf0 <_strtod_l+0x390>
 8005b54:	9904      	ldr	r1, [sp, #16]
 8005b56:	4301      	orrs	r1, r0
 8005b58:	f47f aec6 	bne.w	80058e8 <_strtod_l+0x88>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f47f aee1 	bne.w	8005924 <_strtod_l+0xc4>
 8005b62:	2a69      	cmp	r2, #105	; 0x69
 8005b64:	d027      	beq.n	8005bb6 <_strtod_l+0x356>
 8005b66:	dc24      	bgt.n	8005bb2 <_strtod_l+0x352>
 8005b68:	2a49      	cmp	r2, #73	; 0x49
 8005b6a:	d024      	beq.n	8005bb6 <_strtod_l+0x356>
 8005b6c:	2a4e      	cmp	r2, #78	; 0x4e
 8005b6e:	f47f aed9 	bne.w	8005924 <_strtod_l+0xc4>
 8005b72:	499f      	ldr	r1, [pc, #636]	; (8005df0 <_strtod_l+0x590>)
 8005b74:	a817      	add	r0, sp, #92	; 0x5c
 8005b76:	f003 f981 	bl	8008e7c <__match>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f43f aed2 	beq.w	8005924 <_strtod_l+0xc4>
 8005b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b28      	cmp	r3, #40	; 0x28
 8005b86:	d12d      	bne.n	8005be4 <_strtod_l+0x384>
 8005b88:	499a      	ldr	r1, [pc, #616]	; (8005df4 <_strtod_l+0x594>)
 8005b8a:	aa1a      	add	r2, sp, #104	; 0x68
 8005b8c:	a817      	add	r0, sp, #92	; 0x5c
 8005b8e:	f003 f989 	bl	8008ea4 <__hexnan>
 8005b92:	2805      	cmp	r0, #5
 8005b94:	d126      	bne.n	8005be4 <_strtod_l+0x384>
 8005b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005b9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005ba0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ba4:	e6a0      	b.n	80058e8 <_strtod_l+0x88>
 8005ba6:	210a      	movs	r1, #10
 8005ba8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005bac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bb0:	e7b9      	b.n	8005b26 <_strtod_l+0x2c6>
 8005bb2:	2a6e      	cmp	r2, #110	; 0x6e
 8005bb4:	e7db      	b.n	8005b6e <_strtod_l+0x30e>
 8005bb6:	4990      	ldr	r1, [pc, #576]	; (8005df8 <_strtod_l+0x598>)
 8005bb8:	a817      	add	r0, sp, #92	; 0x5c
 8005bba:	f003 f95f 	bl	8008e7c <__match>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f43f aeb0 	beq.w	8005924 <_strtod_l+0xc4>
 8005bc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bc6:	498d      	ldr	r1, [pc, #564]	; (8005dfc <_strtod_l+0x59c>)
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	a817      	add	r0, sp, #92	; 0x5c
 8005bcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bce:	f003 f955 	bl	8008e7c <__match>
 8005bd2:	b910      	cbnz	r0, 8005bda <_strtod_l+0x37a>
 8005bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bda:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005e0c <_strtod_l+0x5ac>
 8005bde:	f04f 0a00 	mov.w	sl, #0
 8005be2:	e681      	b.n	80058e8 <_strtod_l+0x88>
 8005be4:	4886      	ldr	r0, [pc, #536]	; (8005e00 <_strtod_l+0x5a0>)
 8005be6:	f004 f91b 	bl	8009e20 <nan>
 8005bea:	ec5b ab10 	vmov	sl, fp, d0
 8005bee:	e67b      	b.n	80058e8 <_strtod_l+0x88>
 8005bf0:	9b05      	ldr	r3, [sp, #20]
 8005bf2:	9807      	ldr	r0, [sp, #28]
 8005bf4:	1af3      	subs	r3, r6, r3
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	bf08      	it	eq
 8005bfa:	462f      	moveq	r7, r5
 8005bfc:	2d10      	cmp	r5, #16
 8005bfe:	9306      	str	r3, [sp, #24]
 8005c00:	46a8      	mov	r8, r5
 8005c02:	bfa8      	it	ge
 8005c04:	f04f 0810 	movge.w	r8, #16
 8005c08:	f7fa fc8c 	bl	8000524 <__aeabi_ui2d>
 8005c0c:	2d09      	cmp	r5, #9
 8005c0e:	4682      	mov	sl, r0
 8005c10:	468b      	mov	fp, r1
 8005c12:	dd13      	ble.n	8005c3c <_strtod_l+0x3dc>
 8005c14:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <_strtod_l+0x5a4>)
 8005c16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c1e:	f7fa fcfb 	bl	8000618 <__aeabi_dmul>
 8005c22:	4682      	mov	sl, r0
 8005c24:	4648      	mov	r0, r9
 8005c26:	468b      	mov	fp, r1
 8005c28:	f7fa fc7c 	bl	8000524 <__aeabi_ui2d>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4650      	mov	r0, sl
 8005c32:	4659      	mov	r1, fp
 8005c34:	f7fa fb3a 	bl	80002ac <__adddf3>
 8005c38:	4682      	mov	sl, r0
 8005c3a:	468b      	mov	fp, r1
 8005c3c:	2d0f      	cmp	r5, #15
 8005c3e:	dc38      	bgt.n	8005cb2 <_strtod_l+0x452>
 8005c40:	9b06      	ldr	r3, [sp, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f43f ae50 	beq.w	80058e8 <_strtod_l+0x88>
 8005c48:	dd24      	ble.n	8005c94 <_strtod_l+0x434>
 8005c4a:	2b16      	cmp	r3, #22
 8005c4c:	dc0b      	bgt.n	8005c66 <_strtod_l+0x406>
 8005c4e:	496d      	ldr	r1, [pc, #436]	; (8005e04 <_strtod_l+0x5a4>)
 8005c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c58:	4652      	mov	r2, sl
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	f7fa fcdc 	bl	8000618 <__aeabi_dmul>
 8005c60:	4682      	mov	sl, r0
 8005c62:	468b      	mov	fp, r1
 8005c64:	e640      	b.n	80058e8 <_strtod_l+0x88>
 8005c66:	9a06      	ldr	r2, [sp, #24]
 8005c68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	db20      	blt.n	8005cb2 <_strtod_l+0x452>
 8005c70:	4c64      	ldr	r4, [pc, #400]	; (8005e04 <_strtod_l+0x5a4>)
 8005c72:	f1c5 050f 	rsb	r5, r5, #15
 8005c76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	465b      	mov	r3, fp
 8005c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c82:	f7fa fcc9 	bl	8000618 <__aeabi_dmul>
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	1b5d      	subs	r5, r3, r5
 8005c8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c92:	e7e3      	b.n	8005c5c <_strtod_l+0x3fc>
 8005c94:	9b06      	ldr	r3, [sp, #24]
 8005c96:	3316      	adds	r3, #22
 8005c98:	db0b      	blt.n	8005cb2 <_strtod_l+0x452>
 8005c9a:	9b05      	ldr	r3, [sp, #20]
 8005c9c:	1b9e      	subs	r6, r3, r6
 8005c9e:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <_strtod_l+0x5a4>)
 8005ca0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ca8:	4650      	mov	r0, sl
 8005caa:	4659      	mov	r1, fp
 8005cac:	f7fa fdde 	bl	800086c <__aeabi_ddiv>
 8005cb0:	e7d6      	b.n	8005c60 <_strtod_l+0x400>
 8005cb2:	9b06      	ldr	r3, [sp, #24]
 8005cb4:	eba5 0808 	sub.w	r8, r5, r8
 8005cb8:	4498      	add	r8, r3
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd74      	ble.n	8005daa <_strtod_l+0x54a>
 8005cc0:	f018 030f 	ands.w	r3, r8, #15
 8005cc4:	d00a      	beq.n	8005cdc <_strtod_l+0x47c>
 8005cc6:	494f      	ldr	r1, [pc, #316]	; (8005e04 <_strtod_l+0x5a4>)
 8005cc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ccc:	4652      	mov	r2, sl
 8005cce:	465b      	mov	r3, fp
 8005cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd4:	f7fa fca0 	bl	8000618 <__aeabi_dmul>
 8005cd8:	4682      	mov	sl, r0
 8005cda:	468b      	mov	fp, r1
 8005cdc:	f038 080f 	bics.w	r8, r8, #15
 8005ce0:	d04f      	beq.n	8005d82 <_strtod_l+0x522>
 8005ce2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005ce6:	dd22      	ble.n	8005d2e <_strtod_l+0x4ce>
 8005ce8:	2500      	movs	r5, #0
 8005cea:	462e      	mov	r6, r5
 8005cec:	9507      	str	r5, [sp, #28]
 8005cee:	9505      	str	r5, [sp, #20]
 8005cf0:	2322      	movs	r3, #34	; 0x22
 8005cf2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005e0c <_strtod_l+0x5ac>
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	f04f 0a00 	mov.w	sl, #0
 8005cfc:	9b07      	ldr	r3, [sp, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f43f adf2 	beq.w	80058e8 <_strtod_l+0x88>
 8005d04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d06:	4620      	mov	r0, r4
 8005d08:	f003 fc03 	bl	8009512 <_Bfree>
 8005d0c:	9905      	ldr	r1, [sp, #20]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f003 fbff 	bl	8009512 <_Bfree>
 8005d14:	4631      	mov	r1, r6
 8005d16:	4620      	mov	r0, r4
 8005d18:	f003 fbfb 	bl	8009512 <_Bfree>
 8005d1c:	9907      	ldr	r1, [sp, #28]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f003 fbf7 	bl	8009512 <_Bfree>
 8005d24:	4629      	mov	r1, r5
 8005d26:	4620      	mov	r0, r4
 8005d28:	f003 fbf3 	bl	8009512 <_Bfree>
 8005d2c:	e5dc      	b.n	80058e8 <_strtod_l+0x88>
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <_strtod_l+0x5a8>)
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	2300      	movs	r3, #0
 8005d34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d38:	4650      	mov	r0, sl
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	4699      	mov	r9, r3
 8005d3e:	f1b8 0f01 	cmp.w	r8, #1
 8005d42:	dc21      	bgt.n	8005d88 <_strtod_l+0x528>
 8005d44:	b10b      	cbz	r3, 8005d4a <_strtod_l+0x4ea>
 8005d46:	4682      	mov	sl, r0
 8005d48:	468b      	mov	fp, r1
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	; (8005e08 <_strtod_l+0x5a8>)
 8005d4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005d54:	4652      	mov	r2, sl
 8005d56:	465b      	mov	r3, fp
 8005d58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005d5c:	f7fa fc5c 	bl	8000618 <__aeabi_dmul>
 8005d60:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <_strtod_l+0x5ac>)
 8005d62:	460a      	mov	r2, r1
 8005d64:	400b      	ands	r3, r1
 8005d66:	492a      	ldr	r1, [pc, #168]	; (8005e10 <_strtod_l+0x5b0>)
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	4682      	mov	sl, r0
 8005d6c:	d8bc      	bhi.n	8005ce8 <_strtod_l+0x488>
 8005d6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d72:	428b      	cmp	r3, r1
 8005d74:	bf86      	itte	hi
 8005d76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005e14 <_strtod_l+0x5b4>
 8005d7a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005d7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005d82:	2300      	movs	r3, #0
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	e084      	b.n	8005e92 <_strtod_l+0x632>
 8005d88:	f018 0f01 	tst.w	r8, #1
 8005d8c:	d005      	beq.n	8005d9a <_strtod_l+0x53a>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fc40 	bl	8000618 <__aeabi_dmul>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	9a04      	ldr	r2, [sp, #16]
 8005d9c:	3208      	adds	r2, #8
 8005d9e:	f109 0901 	add.w	r9, r9, #1
 8005da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005da6:	9204      	str	r2, [sp, #16]
 8005da8:	e7c9      	b.n	8005d3e <_strtod_l+0x4de>
 8005daa:	d0ea      	beq.n	8005d82 <_strtod_l+0x522>
 8005dac:	f1c8 0800 	rsb	r8, r8, #0
 8005db0:	f018 020f 	ands.w	r2, r8, #15
 8005db4:	d00a      	beq.n	8005dcc <_strtod_l+0x56c>
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <_strtod_l+0x5a4>)
 8005db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	4659      	mov	r1, fp
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fd52 	bl	800086c <__aeabi_ddiv>
 8005dc8:	4682      	mov	sl, r0
 8005dca:	468b      	mov	fp, r1
 8005dcc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005dd0:	d0d7      	beq.n	8005d82 <_strtod_l+0x522>
 8005dd2:	f1b8 0f1f 	cmp.w	r8, #31
 8005dd6:	dd1f      	ble.n	8005e18 <_strtod_l+0x5b8>
 8005dd8:	2500      	movs	r5, #0
 8005dda:	462e      	mov	r6, r5
 8005ddc:	9507      	str	r5, [sp, #28]
 8005dde:	9505      	str	r5, [sp, #20]
 8005de0:	2322      	movs	r3, #34	; 0x22
 8005de2:	f04f 0a00 	mov.w	sl, #0
 8005de6:	f04f 0b00 	mov.w	fp, #0
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	e786      	b.n	8005cfc <_strtod_l+0x49c>
 8005dee:	bf00      	nop
 8005df0:	0800bc75 	.word	0x0800bc75
 8005df4:	0800bc28 	.word	0x0800bc28
 8005df8:	0800bc6d 	.word	0x0800bc6d
 8005dfc:	0800bdc4 	.word	0x0800bdc4
 8005e00:	0800c047 	.word	0x0800c047
 8005e04:	0800bf38 	.word	0x0800bf38
 8005e08:	0800bf10 	.word	0x0800bf10
 8005e0c:	7ff00000 	.word	0x7ff00000
 8005e10:	7ca00000 	.word	0x7ca00000
 8005e14:	7fefffff 	.word	0x7fefffff
 8005e18:	f018 0310 	ands.w	r3, r8, #16
 8005e1c:	bf18      	it	ne
 8005e1e:	236a      	movne	r3, #106	; 0x6a
 8005e20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80061d0 <_strtod_l+0x970>
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	4650      	mov	r0, sl
 8005e28:	4659      	mov	r1, fp
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f018 0f01 	tst.w	r8, #1
 8005e30:	d004      	beq.n	8005e3c <_strtod_l+0x5dc>
 8005e32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e36:	f7fa fbef 	bl	8000618 <__aeabi_dmul>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005e40:	f109 0908 	add.w	r9, r9, #8
 8005e44:	d1f2      	bne.n	8005e2c <_strtod_l+0x5cc>
 8005e46:	b10b      	cbz	r3, 8005e4c <_strtod_l+0x5ec>
 8005e48:	4682      	mov	sl, r0
 8005e4a:	468b      	mov	fp, r1
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	b1c3      	cbz	r3, 8005e82 <_strtod_l+0x622>
 8005e50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	dd11      	ble.n	8005e82 <_strtod_l+0x622>
 8005e5e:	2b1f      	cmp	r3, #31
 8005e60:	f340 8124 	ble.w	80060ac <_strtod_l+0x84c>
 8005e64:	2b34      	cmp	r3, #52	; 0x34
 8005e66:	bfde      	ittt	le
 8005e68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005e6c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005e70:	fa03 f202 	lslle.w	r2, r3, r2
 8005e74:	f04f 0a00 	mov.w	sl, #0
 8005e78:	bfcc      	ite	gt
 8005e7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e7e:	ea02 0b01 	andle.w	fp, r2, r1
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4650      	mov	r0, sl
 8005e88:	4659      	mov	r1, fp
 8005e8a:	f7fa fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d1a2      	bne.n	8005dd8 <_strtod_l+0x578>
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	9908      	ldr	r1, [sp, #32]
 8005e98:	462b      	mov	r3, r5
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f003 fb87 	bl	80095b0 <__s2b>
 8005ea2:	9007      	str	r0, [sp, #28]
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f43f af1f 	beq.w	8005ce8 <_strtod_l+0x488>
 8005eaa:	9b05      	ldr	r3, [sp, #20]
 8005eac:	1b9e      	subs	r6, r3, r6
 8005eae:	9b06      	ldr	r3, [sp, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bfb4      	ite	lt
 8005eb4:	4633      	movlt	r3, r6
 8005eb6:	2300      	movge	r3, #0
 8005eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ec2:	9312      	str	r3, [sp, #72]	; 0x48
 8005ec4:	462e      	mov	r6, r5
 8005ec6:	9b07      	ldr	r3, [sp, #28]
 8005ec8:	4620      	mov	r0, r4
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	f003 fafc 	bl	80094c8 <_Balloc>
 8005ed0:	9005      	str	r0, [sp, #20]
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	f43f af0c 	beq.w	8005cf0 <_strtod_l+0x490>
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	3202      	adds	r2, #2
 8005ede:	f103 010c 	add.w	r1, r3, #12
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	300c      	adds	r0, #12
 8005ee6:	f003 fad5 	bl	8009494 <memcpy>
 8005eea:	ec4b ab10 	vmov	d0, sl, fp
 8005eee:	aa1a      	add	r2, sp, #104	; 0x68
 8005ef0:	a919      	add	r1, sp, #100	; 0x64
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f003 fe88 	bl	8009c08 <__d2b>
 8005ef8:	ec4b ab18 	vmov	d8, sl, fp
 8005efc:	9018      	str	r0, [sp, #96]	; 0x60
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f43f aef6 	beq.w	8005cf0 <_strtod_l+0x490>
 8005f04:	2101      	movs	r1, #1
 8005f06:	4620      	mov	r0, r4
 8005f08:	f003 fbec 	bl	80096e4 <__i2b>
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f aeee 	beq.w	8005cf0 <_strtod_l+0x490>
 8005f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f16:	9904      	ldr	r1, [sp, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfab      	itete	ge
 8005f1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005f1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005f20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005f22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005f26:	bfac      	ite	ge
 8005f28:	eb03 0902 	addge.w	r9, r3, r2
 8005f2c:	1ad7      	sublt	r7, r2, r3
 8005f2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f30:	eba3 0801 	sub.w	r8, r3, r1
 8005f34:	4490      	add	r8, r2
 8005f36:	4ba1      	ldr	r3, [pc, #644]	; (80061bc <_strtod_l+0x95c>)
 8005f38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005f3c:	4598      	cmp	r8, r3
 8005f3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f42:	f280 80c7 	bge.w	80060d4 <_strtod_l+0x874>
 8005f46:	eba3 0308 	sub.w	r3, r3, r8
 8005f4a:	2b1f      	cmp	r3, #31
 8005f4c:	eba2 0203 	sub.w	r2, r2, r3
 8005f50:	f04f 0101 	mov.w	r1, #1
 8005f54:	f300 80b1 	bgt.w	80060ba <_strtod_l+0x85a>
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	eb09 0802 	add.w	r8, r9, r2
 8005f66:	9b04      	ldr	r3, [sp, #16]
 8005f68:	45c1      	cmp	r9, r8
 8005f6a:	4417      	add	r7, r2
 8005f6c:	441f      	add	r7, r3
 8005f6e:	464b      	mov	r3, r9
 8005f70:	bfa8      	it	ge
 8005f72:	4643      	movge	r3, r8
 8005f74:	42bb      	cmp	r3, r7
 8005f76:	bfa8      	it	ge
 8005f78:	463b      	movge	r3, r7
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bfc2      	ittt	gt
 8005f7e:	eba8 0803 	subgt.w	r8, r8, r3
 8005f82:	1aff      	subgt	r7, r7, r3
 8005f84:	eba9 0903 	subgt.w	r9, r9, r3
 8005f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd17      	ble.n	8005fbe <_strtod_l+0x75e>
 8005f8e:	4631      	mov	r1, r6
 8005f90:	461a      	mov	r2, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	f003 fc66 	bl	8009864 <__pow5mult>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f43f aea8 	beq.w	8005cf0 <_strtod_l+0x490>
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f003 fbb3 	bl	8009710 <__multiply>
 8005faa:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f43f ae9f 	beq.w	8005cf0 <_strtod_l+0x490>
 8005fb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f003 faac 	bl	8009512 <_Bfree>
 8005fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbc:	9318      	str	r3, [sp, #96]	; 0x60
 8005fbe:	f1b8 0f00 	cmp.w	r8, #0
 8005fc2:	f300 808c 	bgt.w	80060de <_strtod_l+0x87e>
 8005fc6:	9b06      	ldr	r3, [sp, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dd08      	ble.n	8005fde <_strtod_l+0x77e>
 8005fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fce:	9905      	ldr	r1, [sp, #20]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f003 fc47 	bl	8009864 <__pow5mult>
 8005fd6:	9005      	str	r0, [sp, #20]
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	f43f ae89 	beq.w	8005cf0 <_strtod_l+0x490>
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	dd08      	ble.n	8005ff4 <_strtod_l+0x794>
 8005fe2:	9905      	ldr	r1, [sp, #20]
 8005fe4:	463a      	mov	r2, r7
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f003 fc7c 	bl	80098e4 <__lshift>
 8005fec:	9005      	str	r0, [sp, #20]
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	f43f ae7e 	beq.w	8005cf0 <_strtod_l+0x490>
 8005ff4:	f1b9 0f00 	cmp.w	r9, #0
 8005ff8:	dd08      	ble.n	800600c <_strtod_l+0x7ac>
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	464a      	mov	r2, r9
 8005ffe:	4620      	mov	r0, r4
 8006000:	f003 fc70 	bl	80098e4 <__lshift>
 8006004:	4606      	mov	r6, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	f43f ae72 	beq.w	8005cf0 <_strtod_l+0x490>
 800600c:	9a05      	ldr	r2, [sp, #20]
 800600e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006010:	4620      	mov	r0, r4
 8006012:	f003 fcf3 	bl	80099fc <__mdiff>
 8006016:	4605      	mov	r5, r0
 8006018:	2800      	cmp	r0, #0
 800601a:	f43f ae69 	beq.w	8005cf0 <_strtod_l+0x490>
 800601e:	68c3      	ldr	r3, [r0, #12]
 8006020:	930b      	str	r3, [sp, #44]	; 0x2c
 8006022:	2300      	movs	r3, #0
 8006024:	60c3      	str	r3, [r0, #12]
 8006026:	4631      	mov	r1, r6
 8006028:	f003 fccc 	bl	80099c4 <__mcmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	da60      	bge.n	80060f2 <_strtod_l+0x892>
 8006030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006032:	ea53 030a 	orrs.w	r3, r3, sl
 8006036:	f040 8082 	bne.w	800613e <_strtod_l+0x8de>
 800603a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800603e:	2b00      	cmp	r3, #0
 8006040:	d17d      	bne.n	800613e <_strtod_l+0x8de>
 8006042:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006046:	0d1b      	lsrs	r3, r3, #20
 8006048:	051b      	lsls	r3, r3, #20
 800604a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800604e:	d976      	bls.n	800613e <_strtod_l+0x8de>
 8006050:	696b      	ldr	r3, [r5, #20]
 8006052:	b913      	cbnz	r3, 800605a <_strtod_l+0x7fa>
 8006054:	692b      	ldr	r3, [r5, #16]
 8006056:	2b01      	cmp	r3, #1
 8006058:	dd71      	ble.n	800613e <_strtod_l+0x8de>
 800605a:	4629      	mov	r1, r5
 800605c:	2201      	movs	r2, #1
 800605e:	4620      	mov	r0, r4
 8006060:	f003 fc40 	bl	80098e4 <__lshift>
 8006064:	4631      	mov	r1, r6
 8006066:	4605      	mov	r5, r0
 8006068:	f003 fcac 	bl	80099c4 <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	dd66      	ble.n	800613e <_strtod_l+0x8de>
 8006070:	9904      	ldr	r1, [sp, #16]
 8006072:	4a53      	ldr	r2, [pc, #332]	; (80061c0 <_strtod_l+0x960>)
 8006074:	465b      	mov	r3, fp
 8006076:	2900      	cmp	r1, #0
 8006078:	f000 8081 	beq.w	800617e <_strtod_l+0x91e>
 800607c:	ea02 010b 	and.w	r1, r2, fp
 8006080:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006084:	dc7b      	bgt.n	800617e <_strtod_l+0x91e>
 8006086:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800608a:	f77f aea9 	ble.w	8005de0 <_strtod_l+0x580>
 800608e:	4b4d      	ldr	r3, [pc, #308]	; (80061c4 <_strtod_l+0x964>)
 8006090:	4650      	mov	r0, sl
 8006092:	4659      	mov	r1, fp
 8006094:	2200      	movs	r2, #0
 8006096:	f7fa fabf 	bl	8000618 <__aeabi_dmul>
 800609a:	460b      	mov	r3, r1
 800609c:	4303      	orrs	r3, r0
 800609e:	bf08      	it	eq
 80060a0:	2322      	moveq	r3, #34	; 0x22
 80060a2:	4682      	mov	sl, r0
 80060a4:	468b      	mov	fp, r1
 80060a6:	bf08      	it	eq
 80060a8:	6023      	streq	r3, [r4, #0]
 80060aa:	e62b      	b.n	8005d04 <_strtod_l+0x4a4>
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	ea03 0a0a 	and.w	sl, r3, sl
 80060b8:	e6e3      	b.n	8005e82 <_strtod_l+0x622>
 80060ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80060be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80060c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80060c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80060ca:	fa01 f308 	lsl.w	r3, r1, r8
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	910d      	str	r1, [sp, #52]	; 0x34
 80060d2:	e746      	b.n	8005f62 <_strtod_l+0x702>
 80060d4:	2300      	movs	r3, #0
 80060d6:	9308      	str	r3, [sp, #32]
 80060d8:	2301      	movs	r3, #1
 80060da:	930d      	str	r3, [sp, #52]	; 0x34
 80060dc:	e741      	b.n	8005f62 <_strtod_l+0x702>
 80060de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060e0:	4642      	mov	r2, r8
 80060e2:	4620      	mov	r0, r4
 80060e4:	f003 fbfe 	bl	80098e4 <__lshift>
 80060e8:	9018      	str	r0, [sp, #96]	; 0x60
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f47f af6b 	bne.w	8005fc6 <_strtod_l+0x766>
 80060f0:	e5fe      	b.n	8005cf0 <_strtod_l+0x490>
 80060f2:	465f      	mov	r7, fp
 80060f4:	d16e      	bne.n	80061d4 <_strtod_l+0x974>
 80060f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060fc:	b342      	cbz	r2, 8006150 <_strtod_l+0x8f0>
 80060fe:	4a32      	ldr	r2, [pc, #200]	; (80061c8 <_strtod_l+0x968>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d128      	bne.n	8006156 <_strtod_l+0x8f6>
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	4651      	mov	r1, sl
 8006108:	b1eb      	cbz	r3, 8006146 <_strtod_l+0x8e6>
 800610a:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <_strtod_l+0x960>)
 800610c:	403b      	ands	r3, r7
 800610e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006116:	d819      	bhi.n	800614c <_strtod_l+0x8ec>
 8006118:	0d1b      	lsrs	r3, r3, #20
 800611a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	4299      	cmp	r1, r3
 8006124:	d117      	bne.n	8006156 <_strtod_l+0x8f6>
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <_strtod_l+0x96c>)
 8006128:	429f      	cmp	r7, r3
 800612a:	d102      	bne.n	8006132 <_strtod_l+0x8d2>
 800612c:	3101      	adds	r1, #1
 800612e:	f43f addf 	beq.w	8005cf0 <_strtod_l+0x490>
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <_strtod_l+0x960>)
 8006134:	403b      	ands	r3, r7
 8006136:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800613a:	f04f 0a00 	mov.w	sl, #0
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1a4      	bne.n	800608e <_strtod_l+0x82e>
 8006144:	e5de      	b.n	8005d04 <_strtod_l+0x4a4>
 8006146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800614a:	e7ea      	b.n	8006122 <_strtod_l+0x8c2>
 800614c:	4613      	mov	r3, r2
 800614e:	e7e8      	b.n	8006122 <_strtod_l+0x8c2>
 8006150:	ea53 030a 	orrs.w	r3, r3, sl
 8006154:	d08c      	beq.n	8006070 <_strtod_l+0x810>
 8006156:	9b08      	ldr	r3, [sp, #32]
 8006158:	b1db      	cbz	r3, 8006192 <_strtod_l+0x932>
 800615a:	423b      	tst	r3, r7
 800615c:	d0ef      	beq.n	800613e <_strtod_l+0x8de>
 800615e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006160:	9a04      	ldr	r2, [sp, #16]
 8006162:	4650      	mov	r0, sl
 8006164:	4659      	mov	r1, fp
 8006166:	b1c3      	cbz	r3, 800619a <_strtod_l+0x93a>
 8006168:	f7ff fb5e 	bl	8005828 <sulp>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	ec51 0b18 	vmov	r0, r1, d8
 8006174:	f7fa f89a 	bl	80002ac <__adddf3>
 8006178:	4682      	mov	sl, r0
 800617a:	468b      	mov	fp, r1
 800617c:	e7df      	b.n	800613e <_strtod_l+0x8de>
 800617e:	4013      	ands	r3, r2
 8006180:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006184:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006188:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800618c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006190:	e7d5      	b.n	800613e <_strtod_l+0x8de>
 8006192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006194:	ea13 0f0a 	tst.w	r3, sl
 8006198:	e7e0      	b.n	800615c <_strtod_l+0x8fc>
 800619a:	f7ff fb45 	bl	8005828 <sulp>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	ec51 0b18 	vmov	r0, r1, d8
 80061a6:	f7fa f87f 	bl	80002a8 <__aeabi_dsub>
 80061aa:	2200      	movs	r2, #0
 80061ac:	2300      	movs	r3, #0
 80061ae:	4682      	mov	sl, r0
 80061b0:	468b      	mov	fp, r1
 80061b2:	f7fa fc99 	bl	8000ae8 <__aeabi_dcmpeq>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0c1      	beq.n	800613e <_strtod_l+0x8de>
 80061ba:	e611      	b.n	8005de0 <_strtod_l+0x580>
 80061bc:	fffffc02 	.word	0xfffffc02
 80061c0:	7ff00000 	.word	0x7ff00000
 80061c4:	39500000 	.word	0x39500000
 80061c8:	000fffff 	.word	0x000fffff
 80061cc:	7fefffff 	.word	0x7fefffff
 80061d0:	0800bc40 	.word	0x0800bc40
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	f003 fd72 	bl	8009cc0 <__ratio>
 80061dc:	ec59 8b10 	vmov	r8, r9, d0
 80061e0:	ee10 0a10 	vmov	r0, s0
 80061e4:	2200      	movs	r2, #0
 80061e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7fa fc90 	bl	8000b10 <__aeabi_dcmple>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d07a      	beq.n	80062ea <_strtod_l+0xa8a>
 80061f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d04a      	beq.n	8006290 <_strtod_l+0xa30>
 80061fa:	4b95      	ldr	r3, [pc, #596]	; (8006450 <_strtod_l+0xbf0>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006202:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006450 <_strtod_l+0xbf0>
 8006206:	f04f 0800 	mov.w	r8, #0
 800620a:	4b92      	ldr	r3, [pc, #584]	; (8006454 <_strtod_l+0xbf4>)
 800620c:	403b      	ands	r3, r7
 800620e:	930d      	str	r3, [sp, #52]	; 0x34
 8006210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006212:	4b91      	ldr	r3, [pc, #580]	; (8006458 <_strtod_l+0xbf8>)
 8006214:	429a      	cmp	r2, r3
 8006216:	f040 80b0 	bne.w	800637a <_strtod_l+0xb1a>
 800621a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800621e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006222:	ec4b ab10 	vmov	d0, sl, fp
 8006226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800622a:	f003 fc71 	bl	8009b10 <__ulp>
 800622e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006232:	ec53 2b10 	vmov	r2, r3, d0
 8006236:	f7fa f9ef 	bl	8000618 <__aeabi_dmul>
 800623a:	4652      	mov	r2, sl
 800623c:	465b      	mov	r3, fp
 800623e:	f7fa f835 	bl	80002ac <__adddf3>
 8006242:	460b      	mov	r3, r1
 8006244:	4983      	ldr	r1, [pc, #524]	; (8006454 <_strtod_l+0xbf4>)
 8006246:	4a85      	ldr	r2, [pc, #532]	; (800645c <_strtod_l+0xbfc>)
 8006248:	4019      	ands	r1, r3
 800624a:	4291      	cmp	r1, r2
 800624c:	4682      	mov	sl, r0
 800624e:	d960      	bls.n	8006312 <_strtod_l+0xab2>
 8006250:	ee18 3a90 	vmov	r3, s17
 8006254:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006258:	4293      	cmp	r3, r2
 800625a:	d104      	bne.n	8006266 <_strtod_l+0xa06>
 800625c:	ee18 3a10 	vmov	r3, s16
 8006260:	3301      	adds	r3, #1
 8006262:	f43f ad45 	beq.w	8005cf0 <_strtod_l+0x490>
 8006266:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006468 <_strtod_l+0xc08>
 800626a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800626e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006270:	4620      	mov	r0, r4
 8006272:	f003 f94e 	bl	8009512 <_Bfree>
 8006276:	9905      	ldr	r1, [sp, #20]
 8006278:	4620      	mov	r0, r4
 800627a:	f003 f94a 	bl	8009512 <_Bfree>
 800627e:	4631      	mov	r1, r6
 8006280:	4620      	mov	r0, r4
 8006282:	f003 f946 	bl	8009512 <_Bfree>
 8006286:	4629      	mov	r1, r5
 8006288:	4620      	mov	r0, r4
 800628a:	f003 f942 	bl	8009512 <_Bfree>
 800628e:	e61a      	b.n	8005ec6 <_strtod_l+0x666>
 8006290:	f1ba 0f00 	cmp.w	sl, #0
 8006294:	d11b      	bne.n	80062ce <_strtod_l+0xa6e>
 8006296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800629a:	b9f3      	cbnz	r3, 80062da <_strtod_l+0xa7a>
 800629c:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <_strtod_l+0xbf0>)
 800629e:	2200      	movs	r2, #0
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa fc2a 	bl	8000afc <__aeabi_dcmplt>
 80062a8:	b9d0      	cbnz	r0, 80062e0 <_strtod_l+0xa80>
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	4b6c      	ldr	r3, [pc, #432]	; (8006460 <_strtod_l+0xc00>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	f7fa f9b1 	bl	8000618 <__aeabi_dmul>
 80062b6:	4680      	mov	r8, r0
 80062b8:	4689      	mov	r9, r1
 80062ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80062c2:	9315      	str	r3, [sp, #84]	; 0x54
 80062c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80062c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062cc:	e79d      	b.n	800620a <_strtod_l+0x9aa>
 80062ce:	f1ba 0f01 	cmp.w	sl, #1
 80062d2:	d102      	bne.n	80062da <_strtod_l+0xa7a>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f43f ad83 	beq.w	8005de0 <_strtod_l+0x580>
 80062da:	4b62      	ldr	r3, [pc, #392]	; (8006464 <_strtod_l+0xc04>)
 80062dc:	2200      	movs	r2, #0
 80062de:	e78e      	b.n	80061fe <_strtod_l+0x99e>
 80062e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006460 <_strtod_l+0xc00>
 80062e4:	f04f 0800 	mov.w	r8, #0
 80062e8:	e7e7      	b.n	80062ba <_strtod_l+0xa5a>
 80062ea:	4b5d      	ldr	r3, [pc, #372]	; (8006460 <_strtod_l+0xc00>)
 80062ec:	4640      	mov	r0, r8
 80062ee:	4649      	mov	r1, r9
 80062f0:	2200      	movs	r2, #0
 80062f2:	f7fa f991 	bl	8000618 <__aeabi_dmul>
 80062f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f8:	4680      	mov	r8, r0
 80062fa:	4689      	mov	r9, r1
 80062fc:	b933      	cbnz	r3, 800630c <_strtod_l+0xaac>
 80062fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006302:	900e      	str	r0, [sp, #56]	; 0x38
 8006304:	930f      	str	r3, [sp, #60]	; 0x3c
 8006306:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800630a:	e7dd      	b.n	80062c8 <_strtod_l+0xa68>
 800630c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006310:	e7f9      	b.n	8006306 <_strtod_l+0xaa6>
 8006312:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1a8      	bne.n	800626e <_strtod_l+0xa0e>
 800631c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006322:	0d1b      	lsrs	r3, r3, #20
 8006324:	051b      	lsls	r3, r3, #20
 8006326:	429a      	cmp	r2, r3
 8006328:	d1a1      	bne.n	800626e <_strtod_l+0xa0e>
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7fa fcd3 	bl	8000cd8 <__aeabi_d2lz>
 8006332:	f7fa f943 	bl	80005bc <__aeabi_l2d>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7f9 ffb3 	bl	80002a8 <__aeabi_dsub>
 8006342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006348:	ea43 030a 	orr.w	r3, r3, sl
 800634c:	4313      	orrs	r3, r2
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	d055      	beq.n	8006400 <_strtod_l+0xba0>
 8006354:	a336      	add	r3, pc, #216	; (adr r3, 8006430 <_strtod_l+0xbd0>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7fa fbcf 	bl	8000afc <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	f47f acd0 	bne.w	8005d04 <_strtod_l+0x4a4>
 8006364:	a334      	add	r3, pc, #208	; (adr r3, 8006438 <_strtod_l+0xbd8>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7fa fbe3 	bl	8000b38 <__aeabi_dcmpgt>
 8006372:	2800      	cmp	r0, #0
 8006374:	f43f af7b 	beq.w	800626e <_strtod_l+0xa0e>
 8006378:	e4c4      	b.n	8005d04 <_strtod_l+0x4a4>
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	b333      	cbz	r3, 80063cc <_strtod_l+0xb6c>
 800637e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006380:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006384:	d822      	bhi.n	80063cc <_strtod_l+0xb6c>
 8006386:	a32e      	add	r3, pc, #184	; (adr r3, 8006440 <_strtod_l+0xbe0>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	4640      	mov	r0, r8
 800638e:	4649      	mov	r1, r9
 8006390:	f7fa fbbe 	bl	8000b10 <__aeabi_dcmple>
 8006394:	b1a0      	cbz	r0, 80063c0 <_strtod_l+0xb60>
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	f7fa fc15 	bl	8000bc8 <__aeabi_d2uiz>
 800639e:	2801      	cmp	r0, #1
 80063a0:	bf38      	it	cc
 80063a2:	2001      	movcc	r0, #1
 80063a4:	f7fa f8be 	bl	8000524 <__aeabi_ui2d>
 80063a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063aa:	4680      	mov	r8, r0
 80063ac:	4689      	mov	r9, r1
 80063ae:	bb23      	cbnz	r3, 80063fa <_strtod_l+0xb9a>
 80063b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063b4:	9010      	str	r0, [sp, #64]	; 0x40
 80063b6:	9311      	str	r3, [sp, #68]	; 0x44
 80063b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	9309      	str	r3, [sp, #36]	; 0x24
 80063cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063d0:	eeb0 0a48 	vmov.f32	s0, s16
 80063d4:	eef0 0a68 	vmov.f32	s1, s17
 80063d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063dc:	f003 fb98 	bl	8009b10 <__ulp>
 80063e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063e4:	ec53 2b10 	vmov	r2, r3, d0
 80063e8:	f7fa f916 	bl	8000618 <__aeabi_dmul>
 80063ec:	ec53 2b18 	vmov	r2, r3, d8
 80063f0:	f7f9 ff5c 	bl	80002ac <__adddf3>
 80063f4:	4682      	mov	sl, r0
 80063f6:	468b      	mov	fp, r1
 80063f8:	e78d      	b.n	8006316 <_strtod_l+0xab6>
 80063fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80063fe:	e7db      	b.n	80063b8 <_strtod_l+0xb58>
 8006400:	a311      	add	r3, pc, #68	; (adr r3, 8006448 <_strtod_l+0xbe8>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7fa fb79 	bl	8000afc <__aeabi_dcmplt>
 800640a:	e7b2      	b.n	8006372 <_strtod_l+0xb12>
 800640c:	2300      	movs	r3, #0
 800640e:	930a      	str	r3, [sp, #40]	; 0x28
 8006410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	f7ff ba6b 	b.w	80058f0 <_strtod_l+0x90>
 800641a:	2a65      	cmp	r2, #101	; 0x65
 800641c:	f43f ab5f 	beq.w	8005ade <_strtod_l+0x27e>
 8006420:	2a45      	cmp	r2, #69	; 0x45
 8006422:	f43f ab5c 	beq.w	8005ade <_strtod_l+0x27e>
 8006426:	2301      	movs	r3, #1
 8006428:	f7ff bb94 	b.w	8005b54 <_strtod_l+0x2f4>
 800642c:	f3af 8000 	nop.w
 8006430:	94a03595 	.word	0x94a03595
 8006434:	3fdfffff 	.word	0x3fdfffff
 8006438:	35afe535 	.word	0x35afe535
 800643c:	3fe00000 	.word	0x3fe00000
 8006440:	ffc00000 	.word	0xffc00000
 8006444:	41dfffff 	.word	0x41dfffff
 8006448:	94a03595 	.word	0x94a03595
 800644c:	3fcfffff 	.word	0x3fcfffff
 8006450:	3ff00000 	.word	0x3ff00000
 8006454:	7ff00000 	.word	0x7ff00000
 8006458:	7fe00000 	.word	0x7fe00000
 800645c:	7c9fffff 	.word	0x7c9fffff
 8006460:	3fe00000 	.word	0x3fe00000
 8006464:	bff00000 	.word	0xbff00000
 8006468:	7fefffff 	.word	0x7fefffff

0800646c <strtod>:
 800646c:	460a      	mov	r2, r1
 800646e:	4601      	mov	r1, r0
 8006470:	4802      	ldr	r0, [pc, #8]	; (800647c <strtod+0x10>)
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <strtod+0x14>)
 8006474:	6800      	ldr	r0, [r0, #0]
 8006476:	f7ff b9f3 	b.w	8005860 <_strtod_l>
 800647a:	bf00      	nop
 800647c:	20000014 	.word	0x20000014
 8006480:	20000448 	.word	0x20000448

08006484 <strtok>:
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <strtok+0xc>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	2301      	movs	r3, #1
 800648a:	325c      	adds	r2, #92	; 0x5c
 800648c:	f000 b802 	b.w	8006494 <__strtok_r>
 8006490:	20000014 	.word	0x20000014

08006494 <__strtok_r>:
 8006494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006496:	b908      	cbnz	r0, 800649c <__strtok_r+0x8>
 8006498:	6810      	ldr	r0, [r2, #0]
 800649a:	b188      	cbz	r0, 80064c0 <__strtok_r+0x2c>
 800649c:	4604      	mov	r4, r0
 800649e:	4620      	mov	r0, r4
 80064a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80064a4:	460f      	mov	r7, r1
 80064a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80064aa:	b91e      	cbnz	r6, 80064b4 <__strtok_r+0x20>
 80064ac:	b965      	cbnz	r5, 80064c8 <__strtok_r+0x34>
 80064ae:	6015      	str	r5, [r2, #0]
 80064b0:	4628      	mov	r0, r5
 80064b2:	e005      	b.n	80064c0 <__strtok_r+0x2c>
 80064b4:	42b5      	cmp	r5, r6
 80064b6:	d1f6      	bne.n	80064a6 <__strtok_r+0x12>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <__strtok_r+0xa>
 80064bc:	6014      	str	r4, [r2, #0]
 80064be:	7003      	strb	r3, [r0, #0]
 80064c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c2:	461c      	mov	r4, r3
 80064c4:	e00c      	b.n	80064e0 <__strtok_r+0x4c>
 80064c6:	b915      	cbnz	r5, 80064ce <__strtok_r+0x3a>
 80064c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064cc:	460e      	mov	r6, r1
 80064ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80064d2:	42ab      	cmp	r3, r5
 80064d4:	d1f7      	bne.n	80064c6 <__strtok_r+0x32>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f3      	beq.n	80064c2 <__strtok_r+0x2e>
 80064da:	2300      	movs	r3, #0
 80064dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80064e0:	6014      	str	r4, [r2, #0]
 80064e2:	e7ed      	b.n	80064c0 <__strtok_r+0x2c>

080064e4 <_strtol_l.constprop.0>:
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ea:	d001      	beq.n	80064f0 <_strtol_l.constprop.0+0xc>
 80064ec:	2b24      	cmp	r3, #36	; 0x24
 80064ee:	d906      	bls.n	80064fe <_strtol_l.constprop.0+0x1a>
 80064f0:	f7ff f934 	bl	800575c <__errno>
 80064f4:	2316      	movs	r3, #22
 80064f6:	6003      	str	r3, [r0, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80065e4 <_strtol_l.constprop.0+0x100>
 8006502:	460d      	mov	r5, r1
 8006504:	462e      	mov	r6, r5
 8006506:	f815 4b01 	ldrb.w	r4, [r5], #1
 800650a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800650e:	f017 0708 	ands.w	r7, r7, #8
 8006512:	d1f7      	bne.n	8006504 <_strtol_l.constprop.0+0x20>
 8006514:	2c2d      	cmp	r4, #45	; 0x2d
 8006516:	d132      	bne.n	800657e <_strtol_l.constprop.0+0x9a>
 8006518:	782c      	ldrb	r4, [r5, #0]
 800651a:	2701      	movs	r7, #1
 800651c:	1cb5      	adds	r5, r6, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d05b      	beq.n	80065da <_strtol_l.constprop.0+0xf6>
 8006522:	2b10      	cmp	r3, #16
 8006524:	d109      	bne.n	800653a <_strtol_l.constprop.0+0x56>
 8006526:	2c30      	cmp	r4, #48	; 0x30
 8006528:	d107      	bne.n	800653a <_strtol_l.constprop.0+0x56>
 800652a:	782c      	ldrb	r4, [r5, #0]
 800652c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006530:	2c58      	cmp	r4, #88	; 0x58
 8006532:	d14d      	bne.n	80065d0 <_strtol_l.constprop.0+0xec>
 8006534:	786c      	ldrb	r4, [r5, #1]
 8006536:	2310      	movs	r3, #16
 8006538:	3502      	adds	r5, #2
 800653a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800653e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006542:	f04f 0c00 	mov.w	ip, #0
 8006546:	fbb8 f9f3 	udiv	r9, r8, r3
 800654a:	4666      	mov	r6, ip
 800654c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006550:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006554:	f1be 0f09 	cmp.w	lr, #9
 8006558:	d816      	bhi.n	8006588 <_strtol_l.constprop.0+0xa4>
 800655a:	4674      	mov	r4, lr
 800655c:	42a3      	cmp	r3, r4
 800655e:	dd24      	ble.n	80065aa <_strtol_l.constprop.0+0xc6>
 8006560:	f1bc 0f00 	cmp.w	ip, #0
 8006564:	db1e      	blt.n	80065a4 <_strtol_l.constprop.0+0xc0>
 8006566:	45b1      	cmp	r9, r6
 8006568:	d31c      	bcc.n	80065a4 <_strtol_l.constprop.0+0xc0>
 800656a:	d101      	bne.n	8006570 <_strtol_l.constprop.0+0x8c>
 800656c:	45a2      	cmp	sl, r4
 800656e:	db19      	blt.n	80065a4 <_strtol_l.constprop.0+0xc0>
 8006570:	fb06 4603 	mla	r6, r6, r3, r4
 8006574:	f04f 0c01 	mov.w	ip, #1
 8006578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800657c:	e7e8      	b.n	8006550 <_strtol_l.constprop.0+0x6c>
 800657e:	2c2b      	cmp	r4, #43	; 0x2b
 8006580:	bf04      	itt	eq
 8006582:	782c      	ldrbeq	r4, [r5, #0]
 8006584:	1cb5      	addeq	r5, r6, #2
 8006586:	e7ca      	b.n	800651e <_strtol_l.constprop.0+0x3a>
 8006588:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800658c:	f1be 0f19 	cmp.w	lr, #25
 8006590:	d801      	bhi.n	8006596 <_strtol_l.constprop.0+0xb2>
 8006592:	3c37      	subs	r4, #55	; 0x37
 8006594:	e7e2      	b.n	800655c <_strtol_l.constprop.0+0x78>
 8006596:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800659a:	f1be 0f19 	cmp.w	lr, #25
 800659e:	d804      	bhi.n	80065aa <_strtol_l.constprop.0+0xc6>
 80065a0:	3c57      	subs	r4, #87	; 0x57
 80065a2:	e7db      	b.n	800655c <_strtol_l.constprop.0+0x78>
 80065a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80065a8:	e7e6      	b.n	8006578 <_strtol_l.constprop.0+0x94>
 80065aa:	f1bc 0f00 	cmp.w	ip, #0
 80065ae:	da05      	bge.n	80065bc <_strtol_l.constprop.0+0xd8>
 80065b0:	2322      	movs	r3, #34	; 0x22
 80065b2:	6003      	str	r3, [r0, #0]
 80065b4:	4646      	mov	r6, r8
 80065b6:	b942      	cbnz	r2, 80065ca <_strtol_l.constprop.0+0xe6>
 80065b8:	4630      	mov	r0, r6
 80065ba:	e79e      	b.n	80064fa <_strtol_l.constprop.0+0x16>
 80065bc:	b107      	cbz	r7, 80065c0 <_strtol_l.constprop.0+0xdc>
 80065be:	4276      	negs	r6, r6
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d0f9      	beq.n	80065b8 <_strtol_l.constprop.0+0xd4>
 80065c4:	f1bc 0f00 	cmp.w	ip, #0
 80065c8:	d000      	beq.n	80065cc <_strtol_l.constprop.0+0xe8>
 80065ca:	1e69      	subs	r1, r5, #1
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	e7f3      	b.n	80065b8 <_strtol_l.constprop.0+0xd4>
 80065d0:	2430      	movs	r4, #48	; 0x30
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1b1      	bne.n	800653a <_strtol_l.constprop.0+0x56>
 80065d6:	2308      	movs	r3, #8
 80065d8:	e7af      	b.n	800653a <_strtol_l.constprop.0+0x56>
 80065da:	2c30      	cmp	r4, #48	; 0x30
 80065dc:	d0a5      	beq.n	800652a <_strtol_l.constprop.0+0x46>
 80065de:	230a      	movs	r3, #10
 80065e0:	e7ab      	b.n	800653a <_strtol_l.constprop.0+0x56>
 80065e2:	bf00      	nop
 80065e4:	0800bcbd 	.word	0x0800bcbd

080065e8 <strtol>:
 80065e8:	4613      	mov	r3, r2
 80065ea:	460a      	mov	r2, r1
 80065ec:	4601      	mov	r1, r0
 80065ee:	4802      	ldr	r0, [pc, #8]	; (80065f8 <strtol+0x10>)
 80065f0:	6800      	ldr	r0, [r0, #0]
 80065f2:	f7ff bf77 	b.w	80064e4 <_strtol_l.constprop.0>
 80065f6:	bf00      	nop
 80065f8:	20000014 	.word	0x20000014
 80065fc:	00000000 	.word	0x00000000

08006600 <_svfprintf_r>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	ed2d 8b04 	vpush	{d8-d9}
 8006608:	b0cf      	sub	sp, #316	; 0x13c
 800660a:	4688      	mov	r8, r1
 800660c:	4691      	mov	r9, r2
 800660e:	461e      	mov	r6, r3
 8006610:	4682      	mov	sl, r0
 8006612:	f002 fce9 	bl	8008fe8 <_localeconv_r>
 8006616:	6803      	ldr	r3, [r0, #0]
 8006618:	9313      	str	r3, [sp, #76]	; 0x4c
 800661a:	4618      	mov	r0, r3
 800661c:	f7f9 fde2 	bl	80001e4 <strlen>
 8006620:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006624:	900d      	str	r0, [sp, #52]	; 0x34
 8006626:	0618      	lsls	r0, r3, #24
 8006628:	d51a      	bpl.n	8006660 <_svfprintf_r+0x60>
 800662a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800662e:	b9bb      	cbnz	r3, 8006660 <_svfprintf_r+0x60>
 8006630:	2140      	movs	r1, #64	; 0x40
 8006632:	4650      	mov	r0, sl
 8006634:	f002 fce0 	bl	8008ff8 <_malloc_r>
 8006638:	f8c8 0000 	str.w	r0, [r8]
 800663c:	f8c8 0010 	str.w	r0, [r8, #16]
 8006640:	b958      	cbnz	r0, 800665a <_svfprintf_r+0x5a>
 8006642:	230c      	movs	r3, #12
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800664c:	930c      	str	r3, [sp, #48]	; 0x30
 800664e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006650:	b04f      	add	sp, #316	; 0x13c
 8006652:	ecbd 8b04 	vpop	{d8-d9}
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	f8c8 3014 	str.w	r3, [r8, #20]
 8006660:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80068b0 <_svfprintf_r+0x2b0>
 8006664:	2500      	movs	r5, #0
 8006666:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800666a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800666e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8006672:	ac25      	add	r4, sp, #148	; 0x94
 8006674:	9422      	str	r4, [sp, #136]	; 0x88
 8006676:	9505      	str	r5, [sp, #20]
 8006678:	950a      	str	r5, [sp, #40]	; 0x28
 800667a:	9512      	str	r5, [sp, #72]	; 0x48
 800667c:	9514      	str	r5, [sp, #80]	; 0x50
 800667e:	950c      	str	r5, [sp, #48]	; 0x30
 8006680:	464b      	mov	r3, r9
 8006682:	461d      	mov	r5, r3
 8006684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006688:	b10a      	cbz	r2, 800668e <_svfprintf_r+0x8e>
 800668a:	2a25      	cmp	r2, #37	; 0x25
 800668c:	d1f9      	bne.n	8006682 <_svfprintf_r+0x82>
 800668e:	ebb5 0709 	subs.w	r7, r5, r9
 8006692:	d00d      	beq.n	80066b0 <_svfprintf_r+0xb0>
 8006694:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006696:	443b      	add	r3, r7
 8006698:	9324      	str	r3, [sp, #144]	; 0x90
 800669a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800669c:	3301      	adds	r3, #1
 800669e:	2b07      	cmp	r3, #7
 80066a0:	e9c4 9700 	strd	r9, r7, [r4]
 80066a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80066a6:	dc79      	bgt.n	800679c <_svfprintf_r+0x19c>
 80066a8:	3408      	adds	r4, #8
 80066aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ac:	443b      	add	r3, r7
 80066ae:	930c      	str	r3, [sp, #48]	; 0x30
 80066b0:	782b      	ldrb	r3, [r5, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f001 8148 	beq.w	8007948 <_svfprintf_r+0x1348>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066be:	9204      	str	r2, [sp, #16]
 80066c0:	3501      	adds	r5, #1
 80066c2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80066c6:	9310      	str	r3, [sp, #64]	; 0x40
 80066c8:	469b      	mov	fp, r3
 80066ca:	270a      	movs	r7, #10
 80066cc:	222b      	movs	r2, #43	; 0x2b
 80066ce:	462b      	mov	r3, r5
 80066d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80066d4:	9106      	str	r1, [sp, #24]
 80066d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	3b20      	subs	r3, #32
 80066dc:	2b5a      	cmp	r3, #90	; 0x5a
 80066de:	f200 85bf 	bhi.w	8007260 <_svfprintf_r+0xc60>
 80066e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80066e6:	007e      	.short	0x007e
 80066e8:	05bd05bd 	.word	0x05bd05bd
 80066ec:	05bd0086 	.word	0x05bd0086
 80066f0:	05bd05bd 	.word	0x05bd05bd
 80066f4:	05bd0065 	.word	0x05bd0065
 80066f8:	008905bd 	.word	0x008905bd
 80066fc:	05bd0093 	.word	0x05bd0093
 8006700:	00960090 	.word	0x00960090
 8006704:	00b305bd 	.word	0x00b305bd
 8006708:	00b600b6 	.word	0x00b600b6
 800670c:	00b600b6 	.word	0x00b600b6
 8006710:	00b600b6 	.word	0x00b600b6
 8006714:	00b600b6 	.word	0x00b600b6
 8006718:	05bd00b6 	.word	0x05bd00b6
 800671c:	05bd05bd 	.word	0x05bd05bd
 8006720:	05bd05bd 	.word	0x05bd05bd
 8006724:	05bd05bd 	.word	0x05bd05bd
 8006728:	05bd012c 	.word	0x05bd012c
 800672c:	00fc00e9 	.word	0x00fc00e9
 8006730:	012c012c 	.word	0x012c012c
 8006734:	05bd012c 	.word	0x05bd012c
 8006738:	05bd05bd 	.word	0x05bd05bd
 800673c:	00c605bd 	.word	0x00c605bd
 8006740:	05bd05bd 	.word	0x05bd05bd
 8006744:	05bd0498 	.word	0x05bd0498
 8006748:	05bd05bd 	.word	0x05bd05bd
 800674c:	05bd04e2 	.word	0x05bd04e2
 8006750:	05bd0503 	.word	0x05bd0503
 8006754:	052505bd 	.word	0x052505bd
 8006758:	05bd05bd 	.word	0x05bd05bd
 800675c:	05bd05bd 	.word	0x05bd05bd
 8006760:	05bd05bd 	.word	0x05bd05bd
 8006764:	05bd05bd 	.word	0x05bd05bd
 8006768:	05bd012c 	.word	0x05bd012c
 800676c:	00fe00e9 	.word	0x00fe00e9
 8006770:	012c012c 	.word	0x012c012c
 8006774:	00c9012c 	.word	0x00c9012c
 8006778:	00dd00fe 	.word	0x00dd00fe
 800677c:	00d605bd 	.word	0x00d605bd
 8006780:	047305bd 	.word	0x047305bd
 8006784:	04d0049a 	.word	0x04d0049a
 8006788:	05bd00dd 	.word	0x05bd00dd
 800678c:	007c04e2 	.word	0x007c04e2
 8006790:	05bd0505 	.word	0x05bd0505
 8006794:	054405bd 	.word	0x054405bd
 8006798:	007c05bd 	.word	0x007c05bd
 800679c:	aa22      	add	r2, sp, #136	; 0x88
 800679e:	4641      	mov	r1, r8
 80067a0:	4650      	mov	r0, sl
 80067a2:	f003 fb7c 	bl	8009e9e <__ssprint_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f040 8137 	bne.w	8006a1a <_svfprintf_r+0x41a>
 80067ac:	ac25      	add	r4, sp, #148	; 0x94
 80067ae:	e77c      	b.n	80066aa <_svfprintf_r+0xaa>
 80067b0:	4650      	mov	r0, sl
 80067b2:	f002 fc19 	bl	8008fe8 <_localeconv_r>
 80067b6:	6843      	ldr	r3, [r0, #4]
 80067b8:	9314      	str	r3, [sp, #80]	; 0x50
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7f9 fd12 	bl	80001e4 <strlen>
 80067c0:	9012      	str	r0, [sp, #72]	; 0x48
 80067c2:	4650      	mov	r0, sl
 80067c4:	f002 fc10 	bl	8008fe8 <_localeconv_r>
 80067c8:	6883      	ldr	r3, [r0, #8]
 80067ca:	930a      	str	r3, [sp, #40]	; 0x28
 80067cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ce:	222b      	movs	r2, #43	; 0x2b
 80067d0:	b12b      	cbz	r3, 80067de <_svfprintf_r+0x1de>
 80067d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d4:	b11b      	cbz	r3, 80067de <_svfprintf_r+0x1de>
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	b10b      	cbz	r3, 80067de <_svfprintf_r+0x1de>
 80067da:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80067de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80067e0:	e775      	b.n	80066ce <_svfprintf_r+0xce>
 80067e2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f9      	bne.n	80067de <_svfprintf_r+0x1de>
 80067ea:	2320      	movs	r3, #32
 80067ec:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80067f0:	e7f5      	b.n	80067de <_svfprintf_r+0x1de>
 80067f2:	f04b 0b01 	orr.w	fp, fp, #1
 80067f6:	e7f2      	b.n	80067de <_svfprintf_r+0x1de>
 80067f8:	f856 3b04 	ldr.w	r3, [r6], #4
 80067fc:	9310      	str	r3, [sp, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	daed      	bge.n	80067de <_svfprintf_r+0x1de>
 8006802:	425b      	negs	r3, r3
 8006804:	9310      	str	r3, [sp, #64]	; 0x40
 8006806:	f04b 0b04 	orr.w	fp, fp, #4
 800680a:	e7e8      	b.n	80067de <_svfprintf_r+0x1de>
 800680c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006810:	e7e5      	b.n	80067de <_svfprintf_r+0x1de>
 8006812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006814:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006818:	9306      	str	r3, [sp, #24]
 800681a:	2b2a      	cmp	r3, #42	; 0x2a
 800681c:	d113      	bne.n	8006846 <_svfprintf_r+0x246>
 800681e:	f856 0b04 	ldr.w	r0, [r6], #4
 8006822:	950b      	str	r5, [sp, #44]	; 0x2c
 8006824:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006828:	9304      	str	r3, [sp, #16]
 800682a:	e7d8      	b.n	80067de <_svfprintf_r+0x1de>
 800682c:	9904      	ldr	r1, [sp, #16]
 800682e:	fb07 3301 	mla	r3, r7, r1, r3
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006838:	9306      	str	r3, [sp, #24]
 800683a:	9b06      	ldr	r3, [sp, #24]
 800683c:	3b30      	subs	r3, #48	; 0x30
 800683e:	2b09      	cmp	r3, #9
 8006840:	d9f4      	bls.n	800682c <_svfprintf_r+0x22c>
 8006842:	950b      	str	r5, [sp, #44]	; 0x2c
 8006844:	e748      	b.n	80066d8 <_svfprintf_r+0xd8>
 8006846:	2300      	movs	r3, #0
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	e7f6      	b.n	800683a <_svfprintf_r+0x23a>
 800684c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006850:	e7c5      	b.n	80067de <_svfprintf_r+0x1de>
 8006852:	2300      	movs	r3, #0
 8006854:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006856:	9310      	str	r3, [sp, #64]	; 0x40
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800685c:	3b30      	subs	r3, #48	; 0x30
 800685e:	fb07 3301 	mla	r3, r7, r1, r3
 8006862:	9310      	str	r3, [sp, #64]	; 0x40
 8006864:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006868:	9306      	str	r3, [sp, #24]
 800686a:	3b30      	subs	r3, #48	; 0x30
 800686c:	2b09      	cmp	r3, #9
 800686e:	d9f3      	bls.n	8006858 <_svfprintf_r+0x258>
 8006870:	e7e7      	b.n	8006842 <_svfprintf_r+0x242>
 8006872:	f04b 0b08 	orr.w	fp, fp, #8
 8006876:	e7b2      	b.n	80067de <_svfprintf_r+0x1de>
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b68      	cmp	r3, #104	; 0x68
 800687e:	bf01      	itttt	eq
 8006880:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8006882:	3301      	addeq	r3, #1
 8006884:	930b      	streq	r3, [sp, #44]	; 0x2c
 8006886:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800688a:	bf18      	it	ne
 800688c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8006890:	e7a5      	b.n	80067de <_svfprintf_r+0x1de>
 8006892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b6c      	cmp	r3, #108	; 0x6c
 8006898:	d105      	bne.n	80068a6 <_svfprintf_r+0x2a6>
 800689a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689c:	3301      	adds	r3, #1
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a0:	f04b 0b20 	orr.w	fp, fp, #32
 80068a4:	e79b      	b.n	80067de <_svfprintf_r+0x1de>
 80068a6:	f04b 0b10 	orr.w	fp, fp, #16
 80068aa:	e798      	b.n	80067de <_svfprintf_r+0x1de>
 80068ac:	f3af 8000 	nop.w
	...
 80068b8:	4632      	mov	r2, r6
 80068ba:	2000      	movs	r0, #0
 80068bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80068c0:	9207      	str	r2, [sp, #28]
 80068c2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80068c6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80068ca:	2301      	movs	r3, #1
 80068cc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80068d0:	9003      	str	r0, [sp, #12]
 80068d2:	9304      	str	r3, [sp, #16]
 80068d4:	4606      	mov	r6, r0
 80068d6:	4605      	mov	r5, r0
 80068d8:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 80068dc:	e1bc      	b.n	8006c58 <_svfprintf_r+0x658>
 80068de:	f04b 0b10 	orr.w	fp, fp, #16
 80068e2:	f01b 0f20 	tst.w	fp, #32
 80068e6:	d012      	beq.n	800690e <_svfprintf_r+0x30e>
 80068e8:	1df3      	adds	r3, r6, #7
 80068ea:	f023 0307 	bic.w	r3, r3, #7
 80068ee:	461a      	mov	r2, r3
 80068f0:	685d      	ldr	r5, [r3, #4]
 80068f2:	f852 6b08 	ldr.w	r6, [r2], #8
 80068f6:	9207      	str	r2, [sp, #28]
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	da06      	bge.n	800690a <_svfprintf_r+0x30a>
 80068fc:	4276      	negs	r6, r6
 80068fe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006902:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006906:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800690a:	2301      	movs	r3, #1
 800690c:	e396      	b.n	800703c <_svfprintf_r+0xa3c>
 800690e:	4633      	mov	r3, r6
 8006910:	f01b 0f10 	tst.w	fp, #16
 8006914:	f853 5b04 	ldr.w	r5, [r3], #4
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	d002      	beq.n	8006922 <_svfprintf_r+0x322>
 800691c:	462e      	mov	r6, r5
 800691e:	17ed      	asrs	r5, r5, #31
 8006920:	e7ea      	b.n	80068f8 <_svfprintf_r+0x2f8>
 8006922:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006926:	d003      	beq.n	8006930 <_svfprintf_r+0x330>
 8006928:	b22e      	sxth	r6, r5
 800692a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800692e:	e7e3      	b.n	80068f8 <_svfprintf_r+0x2f8>
 8006930:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006934:	d0f2      	beq.n	800691c <_svfprintf_r+0x31c>
 8006936:	b26e      	sxtb	r6, r5
 8006938:	f345 15c0 	sbfx	r5, r5, #7, #1
 800693c:	e7dc      	b.n	80068f8 <_svfprintf_r+0x2f8>
 800693e:	3607      	adds	r6, #7
 8006940:	f026 0307 	bic.w	r3, r6, #7
 8006944:	ecb3 7b02 	vldmia	r3!, {d7}
 8006948:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800694c:	9307      	str	r3, [sp, #28]
 800694e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006950:	ee09 3a10 	vmov	s18, r3
 8006954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800695a:	ee09 3a90 	vmov	s19, r3
 800695e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006962:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <_svfprintf_r+0x44c>)
 8006964:	ec51 0b19 	vmov	r0, r1, d9
 8006968:	f7fa f8f0 	bl	8000b4c <__aeabi_dcmpun>
 800696c:	bb10      	cbnz	r0, 80069b4 <_svfprintf_r+0x3b4>
 800696e:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <_svfprintf_r+0x44c>)
 8006970:	ec51 0b19 	vmov	r0, r1, d9
 8006974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006978:	f7fa f8ca 	bl	8000b10 <__aeabi_dcmple>
 800697c:	b9d0      	cbnz	r0, 80069b4 <_svfprintf_r+0x3b4>
 800697e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	f7fa f8b9 	bl	8000afc <__aeabi_dcmplt>
 800698a:	b110      	cbz	r0, 8006992 <_svfprintf_r+0x392>
 800698c:	232d      	movs	r3, #45	; 0x2d
 800698e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <_svfprintf_r+0x450>)
 8006994:	482f      	ldr	r0, [pc, #188]	; (8006a54 <_svfprintf_r+0x454>)
 8006996:	9b06      	ldr	r3, [sp, #24]
 8006998:	2100      	movs	r1, #0
 800699a:	2b47      	cmp	r3, #71	; 0x47
 800699c:	bfd4      	ite	le
 800699e:	4691      	movle	r9, r2
 80069a0:	4681      	movgt	r9, r0
 80069a2:	2303      	movs	r3, #3
 80069a4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80069a8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80069ac:	2600      	movs	r6, #0
 80069ae:	4633      	mov	r3, r6
 80069b0:	f001 b800 	b.w	80079b4 <_svfprintf_r+0x13b4>
 80069b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80069b8:	4610      	mov	r0, r2
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7fa f8c6 	bl	8000b4c <__aeabi_dcmpun>
 80069c0:	b140      	cbz	r0, 80069d4 <_svfprintf_r+0x3d4>
 80069c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c4:	4a24      	ldr	r2, [pc, #144]	; (8006a58 <_svfprintf_r+0x458>)
 80069c6:	4825      	ldr	r0, [pc, #148]	; (8006a5c <_svfprintf_r+0x45c>)
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfbc      	itt	lt
 80069cc:	232d      	movlt	r3, #45	; 0x2d
 80069ce:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80069d2:	e7e0      	b.n	8006996 <_svfprintf_r+0x396>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	f023 0320 	bic.w	r3, r3, #32
 80069da:	2b41      	cmp	r3, #65	; 0x41
 80069dc:	9308      	str	r3, [sp, #32]
 80069de:	d125      	bne.n	8006a2c <_svfprintf_r+0x42c>
 80069e0:	2330      	movs	r3, #48	; 0x30
 80069e2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80069e6:	9b06      	ldr	r3, [sp, #24]
 80069e8:	2b61      	cmp	r3, #97	; 0x61
 80069ea:	bf0c      	ite	eq
 80069ec:	2378      	moveq	r3, #120	; 0x78
 80069ee:	2358      	movne	r3, #88	; 0x58
 80069f0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80069f4:	9b04      	ldr	r3, [sp, #16]
 80069f6:	2b63      	cmp	r3, #99	; 0x63
 80069f8:	f04b 0b02 	orr.w	fp, fp, #2
 80069fc:	dd30      	ble.n	8006a60 <_svfprintf_r+0x460>
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	4650      	mov	r0, sl
 8006a02:	f002 faf9 	bl	8008ff8 <_malloc_r>
 8006a06:	4681      	mov	r9, r0
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 81fd 	bne.w	8006e08 <_svfprintf_r+0x808>
 8006a0e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a16:	f8a8 300c 	strh.w	r3, [r8, #12]
 8006a1a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a24:	bf18      	it	ne
 8006a26:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006a2a:	e60f      	b.n	800664c <_svfprintf_r+0x4c>
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f000 81ec 	beq.w	8006e0c <_svfprintf_r+0x80c>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	2b47      	cmp	r3, #71	; 0x47
 8006a38:	f040 81eb 	bne.w	8006e12 <_svfprintf_r+0x812>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 81e7 	bne.w	8006e12 <_svfprintf_r+0x812>
 8006a44:	9303      	str	r3, [sp, #12]
 8006a46:	2301      	movs	r3, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	e00c      	b.n	8006a66 <_svfprintf_r+0x466>
 8006a4c:	7fefffff 	.word	0x7fefffff
 8006a50:	0800bc68 	.word	0x0800bc68
 8006a54:	0800bc6c 	.word	0x0800bc6c
 8006a58:	0800bc70 	.word	0x0800bc70
 8006a5c:	0800bc74 	.word	0x0800bc74
 8006a60:	9003      	str	r0, [sp, #12]
 8006a62:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8006a66:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8006a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f280 81d1 	bge.w	8006e16 <_svfprintf_r+0x816>
 8006a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a76:	ee08 3a10 	vmov	s16, r3
 8006a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	ee08 3a90 	vmov	s17, r3
 8006a84:	232d      	movs	r3, #45	; 0x2d
 8006a86:	9318      	str	r3, [sp, #96]	; 0x60
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	2b41      	cmp	r3, #65	; 0x41
 8006a8c:	f040 81e1 	bne.w	8006e52 <_svfprintf_r+0x852>
 8006a90:	eeb0 0a48 	vmov.f32	s0, s16
 8006a94:	eef0 0a68 	vmov.f32	s1, s17
 8006a98:	a81c      	add	r0, sp, #112	; 0x70
 8006a9a:	f003 f989 	bl	8009db0 <frexp>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006aa4:	ec51 0b10 	vmov	r0, r1, d0
 8006aa8:	f7f9 fdb6 	bl	8000618 <__aeabi_dmul>
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	f7fa f818 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ab8:	b108      	cbz	r0, 8006abe <_svfprintf_r+0x4be>
 8006aba:	2301      	movs	r3, #1
 8006abc:	931c      	str	r3, [sp, #112]	; 0x70
 8006abe:	4ba7      	ldr	r3, [pc, #668]	; (8006d5c <_svfprintf_r+0x75c>)
 8006ac0:	4aa7      	ldr	r2, [pc, #668]	; (8006d60 <_svfprintf_r+0x760>)
 8006ac2:	9906      	ldr	r1, [sp, #24]
 8006ac4:	2961      	cmp	r1, #97	; 0x61
 8006ac6:	bf18      	it	ne
 8006ac8:	461a      	movne	r2, r3
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	464d      	mov	r5, r9
 8006ad4:	4ba3      	ldr	r3, [pc, #652]	; (8006d64 <_svfprintf_r+0x764>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	f7f9 fd9c 	bl	8000618 <__aeabi_dmul>
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	f7fa f848 	bl	8000b78 <__aeabi_d2iz>
 8006ae8:	9019      	str	r0, [sp, #100]	; 0x64
 8006aea:	f7f9 fd2b 	bl	8000544 <__aeabi_i2d>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fbd7 	bl	80002a8 <__aeabi_dsub>
 8006afa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006afe:	5c9b      	ldrb	r3, [r3, r2]
 8006b00:	f805 3b01 	strb.w	r3, [r5], #1
 8006b04:	9b05      	ldr	r3, [sp, #20]
 8006b06:	9309      	str	r3, [sp, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460f      	mov	r7, r1
 8006b0e:	d007      	beq.n	8006b20 <_svfprintf_r+0x520>
 8006b10:	3b01      	subs	r3, #1
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	f7f9 ffe6 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0d9      	beq.n	8006ad4 <_svfprintf_r+0x4d4>
 8006b20:	4b91      	ldr	r3, [pc, #580]	; (8006d68 <_svfprintf_r+0x768>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	4630      	mov	r0, r6
 8006b26:	4639      	mov	r1, r7
 8006b28:	f7fa f806 	bl	8000b38 <__aeabi_dcmpgt>
 8006b2c:	b960      	cbnz	r0, 8006b48 <_svfprintf_r+0x548>
 8006b2e:	4b8e      	ldr	r3, [pc, #568]	; (8006d68 <_svfprintf_r+0x768>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 ffd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f000 8184 	beq.w	8006e48 <_svfprintf_r+0x848>
 8006b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b42:	07db      	lsls	r3, r3, #31
 8006b44:	f140 8180 	bpl.w	8006e48 <_svfprintf_r+0x848>
 8006b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b4a:	9520      	str	r5, [sp, #128]	; 0x80
 8006b4c:	7bd9      	ldrb	r1, [r3, #15]
 8006b4e:	2030      	movs	r0, #48	; 0x30
 8006b50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b52:	1e53      	subs	r3, r2, #1
 8006b54:	9320      	str	r3, [sp, #128]	; 0x80
 8006b56:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006b5a:	428b      	cmp	r3, r1
 8006b5c:	f000 8163 	beq.w	8006e26 <_svfprintf_r+0x826>
 8006b60:	2b39      	cmp	r3, #57	; 0x39
 8006b62:	bf0b      	itete	eq
 8006b64:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8006b66:	3301      	addne	r3, #1
 8006b68:	7a9b      	ldrbeq	r3, [r3, #10]
 8006b6a:	b2db      	uxtbne	r3, r3
 8006b6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b70:	eba5 0309 	sub.w	r3, r5, r9
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006b7a:	2b47      	cmp	r3, #71	; 0x47
 8006b7c:	f040 81b1 	bne.w	8006ee2 <_svfprintf_r+0x8e2>
 8006b80:	1cef      	adds	r7, r5, #3
 8006b82:	db03      	blt.n	8006b8c <_svfprintf_r+0x58c>
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	f280 81d6 	bge.w	8006f38 <_svfprintf_r+0x938>
 8006b8c:	9b06      	ldr	r3, [sp, #24]
 8006b8e:	3b02      	subs	r3, #2
 8006b90:	9306      	str	r3, [sp, #24]
 8006b92:	9906      	ldr	r1, [sp, #24]
 8006b94:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006b98:	f021 0120 	bic.w	r1, r1, #32
 8006b9c:	2941      	cmp	r1, #65	; 0x41
 8006b9e:	bf08      	it	eq
 8006ba0:	320f      	addeq	r2, #15
 8006ba2:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006ba6:	bf06      	itte	eq
 8006ba8:	b2d2      	uxtbeq	r2, r2
 8006baa:	2101      	moveq	r1, #1
 8006bac:	2100      	movne	r1, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	931c      	str	r3, [sp, #112]	; 0x70
 8006bb2:	bfb8      	it	lt
 8006bb4:	f1c5 0301 	rsblt	r3, r5, #1
 8006bb8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006bbc:	bfb4      	ite	lt
 8006bbe:	222d      	movlt	r2, #45	; 0x2d
 8006bc0:	222b      	movge	r2, #43	; 0x2b
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006bc8:	f340 81a4 	ble.w	8006f14 <_svfprintf_r+0x914>
 8006bcc:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8006bd0:	260a      	movs	r6, #10
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	fb93 f5f6 	sdiv	r5, r3, r6
 8006bd8:	fb06 3015 	mls	r0, r6, r5, r3
 8006bdc:	3030      	adds	r0, #48	; 0x30
 8006bde:	f801 0c01 	strb.w	r0, [r1, #-1]
 8006be2:	4618      	mov	r0, r3
 8006be4:	2863      	cmp	r0, #99	; 0x63
 8006be6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006bea:	462b      	mov	r3, r5
 8006bec:	dcf1      	bgt.n	8006bd2 <_svfprintf_r+0x5d2>
 8006bee:	3330      	adds	r3, #48	; 0x30
 8006bf0:	1e88      	subs	r0, r1, #2
 8006bf2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bf6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006bfa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006bfe:	4603      	mov	r3, r0
 8006c00:	42ab      	cmp	r3, r5
 8006c02:	f0c0 8182 	bcc.w	8006f0a <_svfprintf_r+0x90a>
 8006c06:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006c0a:	1a52      	subs	r2, r2, r1
 8006c0c:	42a8      	cmp	r0, r5
 8006c0e:	bf88      	it	hi
 8006c10:	2200      	movhi	r2, #0
 8006c12:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8006c16:	441a      	add	r2, r3
 8006c18:	ab1e      	add	r3, sp, #120	; 0x78
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	9a05      	ldr	r2, [sp, #20]
 8006c1e:	9315      	str	r3, [sp, #84]	; 0x54
 8006c20:	2a01      	cmp	r2, #1
 8006c22:	4413      	add	r3, r2
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	dc02      	bgt.n	8006c2e <_svfprintf_r+0x62e>
 8006c28:	f01b 0f01 	tst.w	fp, #1
 8006c2c:	d003      	beq.n	8006c36 <_svfprintf_r+0x636>
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c32:	4413      	add	r3, r2
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3e:	9311      	str	r3, [sp, #68]	; 0x44
 8006c40:	2300      	movs	r3, #0
 8006c42:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006c46:	461d      	mov	r5, r3
 8006c48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c4a:	b113      	cbz	r3, 8006c52 <_svfprintf_r+0x652>
 8006c4c:	232d      	movs	r3, #45	; 0x2d
 8006c4e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006c52:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8006c56:	2600      	movs	r6, #0
 8006c58:	9b04      	ldr	r3, [sp, #16]
 8006c5a:	42b3      	cmp	r3, r6
 8006c5c:	bfb8      	it	lt
 8006c5e:	4633      	movlt	r3, r6
 8006c60:	9311      	str	r3, [sp, #68]	; 0x44
 8006c62:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006c66:	b113      	cbz	r3, 8006c6e <_svfprintf_r+0x66e>
 8006c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	9311      	str	r3, [sp, #68]	; 0x44
 8006c6e:	f01b 0302 	ands.w	r3, fp, #2
 8006c72:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c74:	bf1e      	ittt	ne
 8006c76:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8006c78:	3302      	addne	r3, #2
 8006c7a:	9311      	strne	r3, [sp, #68]	; 0x44
 8006c7c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006c80:	9318      	str	r3, [sp, #96]	; 0x60
 8006c82:	d11f      	bne.n	8006cc4 <_svfprintf_r+0x6c4>
 8006c84:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006c88:	1a9f      	subs	r7, r3, r2
 8006c8a:	2f00      	cmp	r7, #0
 8006c8c:	dd1a      	ble.n	8006cc4 <_svfprintf_r+0x6c4>
 8006c8e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006c92:	4836      	ldr	r0, [pc, #216]	; (8006d6c <_svfprintf_r+0x76c>)
 8006c94:	6020      	str	r0, [r4, #0]
 8006c96:	2f10      	cmp	r7, #16
 8006c98:	f103 0301 	add.w	r3, r3, #1
 8006c9c:	f104 0108 	add.w	r1, r4, #8
 8006ca0:	f300 82ed 	bgt.w	800727e <_svfprintf_r+0xc7e>
 8006ca4:	6067      	str	r7, [r4, #4]
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	4417      	add	r7, r2
 8006caa:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006cae:	f340 82f9 	ble.w	80072a4 <_svfprintf_r+0xca4>
 8006cb2:	aa22      	add	r2, sp, #136	; 0x88
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f003 f8f1 	bl	8009e9e <__ssprint_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f040 8621 	bne.w	8007904 <_svfprintf_r+0x1304>
 8006cc2:	ac25      	add	r4, sp, #148	; 0x94
 8006cc4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006cc8:	b173      	cbz	r3, 8006ce8 <_svfprintf_r+0x6e8>
 8006cca:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9324      	str	r3, [sp, #144]	; 0x90
 8006cda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cdc:	3301      	adds	r3, #1
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	9323      	str	r3, [sp, #140]	; 0x8c
 8006ce2:	f300 82e1 	bgt.w	80072a8 <_svfprintf_r+0xca8>
 8006ce6:	3408      	adds	r4, #8
 8006ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cea:	b16b      	cbz	r3, 8006d08 <_svfprintf_r+0x708>
 8006cec:	ab1b      	add	r3, sp, #108	; 0x6c
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	9324      	str	r3, [sp, #144]	; 0x90
 8006cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	2b07      	cmp	r3, #7
 8006d00:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d02:	f300 82db 	bgt.w	80072bc <_svfprintf_r+0xcbc>
 8006d06:	3408      	adds	r4, #8
 8006d08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d11f      	bne.n	8006d4e <_svfprintf_r+0x74e>
 8006d0e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006d12:	1a9f      	subs	r7, r3, r2
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	dd1a      	ble.n	8006d4e <_svfprintf_r+0x74e>
 8006d18:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006d1c:	4814      	ldr	r0, [pc, #80]	; (8006d70 <_svfprintf_r+0x770>)
 8006d1e:	6020      	str	r0, [r4, #0]
 8006d20:	2f10      	cmp	r7, #16
 8006d22:	f103 0301 	add.w	r3, r3, #1
 8006d26:	f104 0108 	add.w	r1, r4, #8
 8006d2a:	f300 82d1 	bgt.w	80072d0 <_svfprintf_r+0xcd0>
 8006d2e:	6067      	str	r7, [r4, #4]
 8006d30:	2b07      	cmp	r3, #7
 8006d32:	4417      	add	r7, r2
 8006d34:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006d38:	f340 82dd 	ble.w	80072f6 <_svfprintf_r+0xcf6>
 8006d3c:	aa22      	add	r2, sp, #136	; 0x88
 8006d3e:	4641      	mov	r1, r8
 8006d40:	4650      	mov	r0, sl
 8006d42:	f003 f8ac 	bl	8009e9e <__ssprint_r>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f040 85dc 	bne.w	8007904 <_svfprintf_r+0x1304>
 8006d4c:	ac25      	add	r4, sp, #148	; 0x94
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	1af6      	subs	r6, r6, r3
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	dd28      	ble.n	8006da8 <_svfprintf_r+0x7a8>
 8006d56:	4f06      	ldr	r7, [pc, #24]	; (8006d70 <_svfprintf_r+0x770>)
 8006d58:	e00c      	b.n	8006d74 <_svfprintf_r+0x774>
 8006d5a:	bf00      	nop
 8006d5c:	0800bc89 	.word	0x0800bc89
 8006d60:	0800bc78 	.word	0x0800bc78
 8006d64:	40300000 	.word	0x40300000
 8006d68:	3fe00000 	.word	0x3fe00000
 8006d6c:	0800bc9c 	.word	0x0800bc9c
 8006d70:	0800bcac 	.word	0x0800bcac
 8006d74:	6027      	str	r7, [r4, #0]
 8006d76:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006d7a:	2e10      	cmp	r6, #16
 8006d7c:	f103 0301 	add.w	r3, r3, #1
 8006d80:	f104 0108 	add.w	r1, r4, #8
 8006d84:	f300 82b9 	bgt.w	80072fa <_svfprintf_r+0xcfa>
 8006d88:	6066      	str	r6, [r4, #4]
 8006d8a:	2b07      	cmp	r3, #7
 8006d8c:	4416      	add	r6, r2
 8006d8e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006d92:	f340 82c5 	ble.w	8007320 <_svfprintf_r+0xd20>
 8006d96:	aa22      	add	r2, sp, #136	; 0x88
 8006d98:	4641      	mov	r1, r8
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	f003 f87f 	bl	8009e9e <__ssprint_r>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f040 85af 	bne.w	8007904 <_svfprintf_r+0x1304>
 8006da6:	ac25      	add	r4, sp, #148	; 0x94
 8006da8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006dac:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006dae:	f040 82bd 	bne.w	800732c <_svfprintf_r+0xd2c>
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	f8c4 9000 	str.w	r9, [r4]
 8006db8:	441e      	add	r6, r3
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	9624      	str	r6, [sp, #144]	; 0x90
 8006dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	2b07      	cmp	r3, #7
 8006dc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8006dc6:	f300 82f6 	bgt.w	80073b6 <_svfprintf_r+0xdb6>
 8006dca:	3408      	adds	r4, #8
 8006dcc:	f01b 0f04 	tst.w	fp, #4
 8006dd0:	f040 857a 	bne.w	80078c8 <_svfprintf_r+0x12c8>
 8006dd4:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8006dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dda:	428a      	cmp	r2, r1
 8006ddc:	bfac      	ite	ge
 8006dde:	189b      	addge	r3, r3, r2
 8006de0:	185b      	addlt	r3, r3, r1
 8006de2:	930c      	str	r3, [sp, #48]	; 0x30
 8006de4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006de6:	b13b      	cbz	r3, 8006df8 <_svfprintf_r+0x7f8>
 8006de8:	aa22      	add	r2, sp, #136	; 0x88
 8006dea:	4641      	mov	r1, r8
 8006dec:	4650      	mov	r0, sl
 8006dee:	f003 f856 	bl	8009e9e <__ssprint_r>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f040 8586 	bne.w	8007904 <_svfprintf_r+0x1304>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 859c 	bne.w	800793c <_svfprintf_r+0x133c>
 8006e04:	ac25      	add	r4, sp, #148	; 0x94
 8006e06:	e0ec      	b.n	8006fe2 <_svfprintf_r+0x9e2>
 8006e08:	9003      	str	r0, [sp, #12]
 8006e0a:	e62c      	b.n	8006a66 <_svfprintf_r+0x466>
 8006e0c:	9003      	str	r0, [sp, #12]
 8006e0e:	2306      	movs	r3, #6
 8006e10:	e61a      	b.n	8006a48 <_svfprintf_r+0x448>
 8006e12:	9003      	str	r0, [sp, #12]
 8006e14:	e627      	b.n	8006a66 <_svfprintf_r+0x466>
 8006e16:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e20:	eef0 8a67 	vmov.f32	s17, s15
 8006e24:	e62f      	b.n	8006a86 <_svfprintf_r+0x486>
 8006e26:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006e2a:	e691      	b.n	8006b50 <_svfprintf_r+0x550>
 8006e2c:	f803 0b01 	strb.w	r0, [r3], #1
 8006e30:	1aca      	subs	r2, r1, r3
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	dafa      	bge.n	8006e2c <_svfprintf_r+0x82c>
 8006e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	3201      	adds	r2, #1
 8006e3c:	f103 0301 	add.w	r3, r3, #1
 8006e40:	bfb8      	it	lt
 8006e42:	2300      	movlt	r3, #0
 8006e44:	441d      	add	r5, r3
 8006e46:	e693      	b.n	8006b70 <_svfprintf_r+0x570>
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	18a9      	adds	r1, r5, r2
 8006e4e:	2030      	movs	r0, #48	; 0x30
 8006e50:	e7ee      	b.n	8006e30 <_svfprintf_r+0x830>
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	2b46      	cmp	r3, #70	; 0x46
 8006e56:	d005      	beq.n	8006e64 <_svfprintf_r+0x864>
 8006e58:	2b45      	cmp	r3, #69	; 0x45
 8006e5a:	d11b      	bne.n	8006e94 <_svfprintf_r+0x894>
 8006e5c:	9b04      	ldr	r3, [sp, #16]
 8006e5e:	1c5d      	adds	r5, r3, #1
 8006e60:	2102      	movs	r1, #2
 8006e62:	e001      	b.n	8006e68 <_svfprintf_r+0x868>
 8006e64:	9d04      	ldr	r5, [sp, #16]
 8006e66:	2103      	movs	r1, #3
 8006e68:	ab20      	add	r3, sp, #128	; 0x80
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	ab1d      	add	r3, sp, #116	; 0x74
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	ab1c      	add	r3, sp, #112	; 0x70
 8006e74:	4650      	mov	r0, sl
 8006e76:	eeb0 0a48 	vmov.f32	s0, s16
 8006e7a:	eef0 0a68 	vmov.f32	s1, s17
 8006e7e:	f000 fe3f 	bl	8007b00 <_dtoa_r>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	2b47      	cmp	r3, #71	; 0x47
 8006e86:	4681      	mov	r9, r0
 8006e88:	d106      	bne.n	8006e98 <_svfprintf_r+0x898>
 8006e8a:	f01b 0f01 	tst.w	fp, #1
 8006e8e:	d103      	bne.n	8006e98 <_svfprintf_r+0x898>
 8006e90:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006e92:	e66d      	b.n	8006b70 <_svfprintf_r+0x570>
 8006e94:	9d04      	ldr	r5, [sp, #16]
 8006e96:	e7e3      	b.n	8006e60 <_svfprintf_r+0x860>
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	2b46      	cmp	r3, #70	; 0x46
 8006e9c:	eb09 0605 	add.w	r6, r9, r5
 8006ea0:	d10f      	bne.n	8006ec2 <_svfprintf_r+0x8c2>
 8006ea2:	f899 3000 	ldrb.w	r3, [r9]
 8006ea6:	2b30      	cmp	r3, #48	; 0x30
 8006ea8:	d109      	bne.n	8006ebe <_svfprintf_r+0x8be>
 8006eaa:	ec51 0b18 	vmov	r0, r1, d8
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f7f9 fe19 	bl	8000ae8 <__aeabi_dcmpeq>
 8006eb6:	b910      	cbnz	r0, 8006ebe <_svfprintf_r+0x8be>
 8006eb8:	f1c5 0501 	rsb	r5, r5, #1
 8006ebc:	951c      	str	r5, [sp, #112]	; 0x70
 8006ebe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006ec0:	441e      	add	r6, r3
 8006ec2:	ec51 0b18 	vmov	r0, r1, d8
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f7f9 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ece:	b100      	cbz	r0, 8006ed2 <_svfprintf_r+0x8d2>
 8006ed0:	9620      	str	r6, [sp, #128]	; 0x80
 8006ed2:	2230      	movs	r2, #48	; 0x30
 8006ed4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ed6:	429e      	cmp	r6, r3
 8006ed8:	d9da      	bls.n	8006e90 <_svfprintf_r+0x890>
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	9120      	str	r1, [sp, #128]	; 0x80
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e7f8      	b.n	8006ed4 <_svfprintf_r+0x8d4>
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	2b46      	cmp	r3, #70	; 0x46
 8006ee6:	f47f ae54 	bne.w	8006b92 <_svfprintf_r+0x592>
 8006eea:	9a04      	ldr	r2, [sp, #16]
 8006eec:	f00b 0301 	and.w	r3, fp, #1
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	ea43 0302 	orr.w	r3, r3, r2
 8006ef6:	dd1a      	ble.n	8006f2e <_svfprintf_r+0x92e>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d034      	beq.n	8006f66 <_svfprintf_r+0x966>
 8006efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006efe:	18eb      	adds	r3, r5, r3
 8006f00:	441a      	add	r2, r3
 8006f02:	9204      	str	r2, [sp, #16]
 8006f04:	2366      	movs	r3, #102	; 0x66
 8006f06:	9306      	str	r3, [sp, #24]
 8006f08:	e033      	b.n	8006f72 <_svfprintf_r+0x972>
 8006f0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f0e:	f802 6b01 	strb.w	r6, [r2], #1
 8006f12:	e675      	b.n	8006c00 <_svfprintf_r+0x600>
 8006f14:	b941      	cbnz	r1, 8006f28 <_svfprintf_r+0x928>
 8006f16:	2230      	movs	r2, #48	; 0x30
 8006f18:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006f1c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006f20:	3330      	adds	r3, #48	; 0x30
 8006f22:	f802 3b01 	strb.w	r3, [r2], #1
 8006f26:	e677      	b.n	8006c18 <_svfprintf_r+0x618>
 8006f28:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006f2c:	e7f8      	b.n	8006f20 <_svfprintf_r+0x920>
 8006f2e:	b1e3      	cbz	r3, 8006f6a <_svfprintf_r+0x96a>
 8006f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f32:	9a04      	ldr	r2, [sp, #16]
 8006f34:	3301      	adds	r3, #1
 8006f36:	e7e3      	b.n	8006f00 <_svfprintf_r+0x900>
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	db07      	blt.n	8006f4e <_svfprintf_r+0x94e>
 8006f3e:	f01b 0f01 	tst.w	fp, #1
 8006f42:	d02d      	beq.n	8006fa0 <_svfprintf_r+0x9a0>
 8006f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f46:	18eb      	adds	r3, r5, r3
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	2367      	movs	r3, #103	; 0x67
 8006f4c:	e7db      	b.n	8006f06 <_svfprintf_r+0x906>
 8006f4e:	9b05      	ldr	r3, [sp, #20]
 8006f50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	4413      	add	r3, r2
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	dcf7      	bgt.n	8006f4a <_svfprintf_r+0x94a>
 8006f5a:	9a04      	ldr	r2, [sp, #16]
 8006f5c:	f1c5 0301 	rsb	r3, r5, #1
 8006f60:	441a      	add	r2, r3
 8006f62:	9204      	str	r2, [sp, #16]
 8006f64:	e7f1      	b.n	8006f4a <_svfprintf_r+0x94a>
 8006f66:	9504      	str	r5, [sp, #16]
 8006f68:	e7cc      	b.n	8006f04 <_svfprintf_r+0x904>
 8006f6a:	2366      	movs	r3, #102	; 0x66
 8006f6c:	9306      	str	r3, [sp, #24]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
 8006f78:	d025      	beq.n	8006fc6 <_svfprintf_r+0x9c6>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2d00      	cmp	r5, #0
 8006f7e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006f82:	f77f ae61 	ble.w	8006c48 <_svfprintf_r+0x648>
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2bff      	cmp	r3, #255	; 0xff
 8006f8c:	d10a      	bne.n	8006fa4 <_svfprintf_r+0x9a4>
 8006f8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f94:	4413      	add	r3, r2
 8006f96:	9a04      	ldr	r2, [sp, #16]
 8006f98:	fb01 2303 	mla	r3, r1, r3, r2
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	e653      	b.n	8006c48 <_svfprintf_r+0x648>
 8006fa0:	9504      	str	r5, [sp, #16]
 8006fa2:	e7d2      	b.n	8006f4a <_svfprintf_r+0x94a>
 8006fa4:	42ab      	cmp	r3, r5
 8006fa6:	daf2      	bge.n	8006f8e <_svfprintf_r+0x98e>
 8006fa8:	1aed      	subs	r5, r5, r3
 8006faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	b133      	cbz	r3, 8006fbe <_svfprintf_r+0x9be>
 8006fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	3301      	adds	r3, #1
 8006fba:	930a      	str	r3, [sp, #40]	; 0x28
 8006fbc:	e7e3      	b.n	8006f86 <_svfprintf_r+0x986>
 8006fbe:	9b08      	ldr	r3, [sp, #32]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	e7df      	b.n	8006f86 <_svfprintf_r+0x986>
 8006fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc8:	9308      	str	r3, [sp, #32]
 8006fca:	e63d      	b.n	8006c48 <_svfprintf_r+0x648>
 8006fcc:	1d33      	adds	r3, r6, #4
 8006fce:	f01b 0f20 	tst.w	fp, #32
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	d00a      	beq.n	8006fec <_svfprintf_r+0x9ec>
 8006fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fdc:	17d2      	asrs	r2, r2, #31
 8006fde:	e9c3 1200 	strd	r1, r2, [r3]
 8006fe2:	9e07      	ldr	r6, [sp, #28]
 8006fe4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006fe8:	f7ff bb4a 	b.w	8006680 <_svfprintf_r+0x80>
 8006fec:	f01b 0f10 	tst.w	fp, #16
 8006ff0:	d003      	beq.n	8006ffa <_svfprintf_r+0x9fa>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e7f3      	b.n	8006fe2 <_svfprintf_r+0x9e2>
 8006ffa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006ffe:	d003      	beq.n	8007008 <_svfprintf_r+0xa08>
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e7ec      	b.n	8006fe2 <_svfprintf_r+0x9e2>
 8007008:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800700c:	d0f1      	beq.n	8006ff2 <_svfprintf_r+0x9f2>
 800700e:	6833      	ldr	r3, [r6, #0]
 8007010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e7e5      	b.n	8006fe2 <_svfprintf_r+0x9e2>
 8007016:	f04b 0b10 	orr.w	fp, fp, #16
 800701a:	f01b 0320 	ands.w	r3, fp, #32
 800701e:	d01f      	beq.n	8007060 <_svfprintf_r+0xa60>
 8007020:	1df3      	adds	r3, r6, #7
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	461a      	mov	r2, r3
 8007028:	685d      	ldr	r5, [r3, #4]
 800702a:	f852 6b08 	ldr.w	r6, [r2], #8
 800702e:	9207      	str	r2, [sp, #28]
 8007030:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	3201      	adds	r2, #1
 8007040:	f000 848d 	beq.w	800795e <_svfprintf_r+0x135e>
 8007044:	ea56 0205 	orrs.w	r2, r6, r5
 8007048:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 800704c:	f040 848c 	bne.w	8007968 <_svfprintf_r+0x1368>
 8007050:	9a04      	ldr	r2, [sp, #16]
 8007052:	2a00      	cmp	r2, #0
 8007054:	f000 80f9 	beq.w	800724a <_svfprintf_r+0xc4a>
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 8488 	bne.w	800796e <_svfprintf_r+0x136e>
 800705e:	e09f      	b.n	80071a0 <_svfprintf_r+0xba0>
 8007060:	4632      	mov	r2, r6
 8007062:	f01b 0510 	ands.w	r5, fp, #16
 8007066:	f852 6b04 	ldr.w	r6, [r2], #4
 800706a:	9207      	str	r2, [sp, #28]
 800706c:	d001      	beq.n	8007072 <_svfprintf_r+0xa72>
 800706e:	461d      	mov	r5, r3
 8007070:	e7de      	b.n	8007030 <_svfprintf_r+0xa30>
 8007072:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007076:	d001      	beq.n	800707c <_svfprintf_r+0xa7c>
 8007078:	b2b6      	uxth	r6, r6
 800707a:	e7d9      	b.n	8007030 <_svfprintf_r+0xa30>
 800707c:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8007080:	d0d6      	beq.n	8007030 <_svfprintf_r+0xa30>
 8007082:	b2f6      	uxtb	r6, r6
 8007084:	e7f3      	b.n	800706e <_svfprintf_r+0xa6e>
 8007086:	4633      	mov	r3, r6
 8007088:	2278      	movs	r2, #120	; 0x78
 800708a:	f853 6b04 	ldr.w	r6, [r3], #4
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	2330      	movs	r3, #48	; 0x30
 8007092:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8007096:	4ba3      	ldr	r3, [pc, #652]	; (8007324 <_svfprintf_r+0xd24>)
 8007098:	9316      	str	r3, [sp, #88]	; 0x58
 800709a:	2500      	movs	r5, #0
 800709c:	f04b 0b02 	orr.w	fp, fp, #2
 80070a0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80070a4:	2302      	movs	r3, #2
 80070a6:	9206      	str	r2, [sp, #24]
 80070a8:	e7c5      	b.n	8007036 <_svfprintf_r+0xa36>
 80070aa:	4633      	mov	r3, r6
 80070ac:	2500      	movs	r5, #0
 80070ae:	f853 9b04 	ldr.w	r9, [r3], #4
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	9b04      	ldr	r3, [sp, #16]
 80070b6:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80070ba:	1c58      	adds	r0, r3, #1
 80070bc:	d010      	beq.n	80070e0 <_svfprintf_r+0xae0>
 80070be:	461a      	mov	r2, r3
 80070c0:	4629      	mov	r1, r5
 80070c2:	4648      	mov	r0, r9
 80070c4:	f7f9 f89c 	bl	8000200 <memchr>
 80070c8:	9003      	str	r0, [sp, #12]
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f000 80d4 	beq.w	8007278 <_svfprintf_r+0xc78>
 80070d0:	eba0 0309 	sub.w	r3, r0, r9
 80070d4:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80070d8:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80070dc:	462e      	mov	r6, r5
 80070de:	e5bb      	b.n	8006c58 <_svfprintf_r+0x658>
 80070e0:	4648      	mov	r0, r9
 80070e2:	f7f9 f87f 	bl	80001e4 <strlen>
 80070e6:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80070ea:	e45f      	b.n	80069ac <_svfprintf_r+0x3ac>
 80070ec:	f04b 0b10 	orr.w	fp, fp, #16
 80070f0:	f01b 0320 	ands.w	r3, fp, #32
 80070f4:	d009      	beq.n	800710a <_svfprintf_r+0xb0a>
 80070f6:	1df3      	adds	r3, r6, #7
 80070f8:	f023 0307 	bic.w	r3, r3, #7
 80070fc:	461a      	mov	r2, r3
 80070fe:	685d      	ldr	r5, [r3, #4]
 8007100:	f852 6b08 	ldr.w	r6, [r2], #8
 8007104:	9207      	str	r2, [sp, #28]
 8007106:	2301      	movs	r3, #1
 8007108:	e795      	b.n	8007036 <_svfprintf_r+0xa36>
 800710a:	4632      	mov	r2, r6
 800710c:	f01b 0510 	ands.w	r5, fp, #16
 8007110:	f852 6b04 	ldr.w	r6, [r2], #4
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	d001      	beq.n	800711c <_svfprintf_r+0xb1c>
 8007118:	461d      	mov	r5, r3
 800711a:	e7f4      	b.n	8007106 <_svfprintf_r+0xb06>
 800711c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007120:	d001      	beq.n	8007126 <_svfprintf_r+0xb26>
 8007122:	b2b6      	uxth	r6, r6
 8007124:	e7ef      	b.n	8007106 <_svfprintf_r+0xb06>
 8007126:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800712a:	d0ec      	beq.n	8007106 <_svfprintf_r+0xb06>
 800712c:	b2f6      	uxtb	r6, r6
 800712e:	e7f3      	b.n	8007118 <_svfprintf_r+0xb18>
 8007130:	4b7d      	ldr	r3, [pc, #500]	; (8007328 <_svfprintf_r+0xd28>)
 8007132:	9316      	str	r3, [sp, #88]	; 0x58
 8007134:	f01b 0320 	ands.w	r3, fp, #32
 8007138:	d01b      	beq.n	8007172 <_svfprintf_r+0xb72>
 800713a:	1df3      	adds	r3, r6, #7
 800713c:	f023 0307 	bic.w	r3, r3, #7
 8007140:	461a      	mov	r2, r3
 8007142:	685d      	ldr	r5, [r3, #4]
 8007144:	f852 6b08 	ldr.w	r6, [r2], #8
 8007148:	9207      	str	r2, [sp, #28]
 800714a:	f01b 0f01 	tst.w	fp, #1
 800714e:	d00a      	beq.n	8007166 <_svfprintf_r+0xb66>
 8007150:	ea56 0305 	orrs.w	r3, r6, r5
 8007154:	d007      	beq.n	8007166 <_svfprintf_r+0xb66>
 8007156:	2330      	movs	r3, #48	; 0x30
 8007158:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800715c:	9b06      	ldr	r3, [sp, #24]
 800715e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8007162:	f04b 0b02 	orr.w	fp, fp, #2
 8007166:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800716a:	2302      	movs	r3, #2
 800716c:	e763      	b.n	8007036 <_svfprintf_r+0xa36>
 800716e:	4b6d      	ldr	r3, [pc, #436]	; (8007324 <_svfprintf_r+0xd24>)
 8007170:	e7df      	b.n	8007132 <_svfprintf_r+0xb32>
 8007172:	4632      	mov	r2, r6
 8007174:	f01b 0510 	ands.w	r5, fp, #16
 8007178:	f852 6b04 	ldr.w	r6, [r2], #4
 800717c:	9207      	str	r2, [sp, #28]
 800717e:	d001      	beq.n	8007184 <_svfprintf_r+0xb84>
 8007180:	461d      	mov	r5, r3
 8007182:	e7e2      	b.n	800714a <_svfprintf_r+0xb4a>
 8007184:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007188:	d001      	beq.n	800718e <_svfprintf_r+0xb8e>
 800718a:	b2b6      	uxth	r6, r6
 800718c:	e7dd      	b.n	800714a <_svfprintf_r+0xb4a>
 800718e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8007192:	d0da      	beq.n	800714a <_svfprintf_r+0xb4a>
 8007194:	b2f6      	uxtb	r6, r6
 8007196:	e7f3      	b.n	8007180 <_svfprintf_r+0xb80>
 8007198:	2e0a      	cmp	r6, #10
 800719a:	f175 0300 	sbcs.w	r3, r5, #0
 800719e:	d205      	bcs.n	80071ac <_svfprintf_r+0xbac>
 80071a0:	3630      	adds	r6, #48	; 0x30
 80071a2:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80071a6:	f20d 1937 	addw	r9, sp, #311	; 0x137
 80071aa:	e3fb      	b.n	80079a4 <_svfprintf_r+0x13a4>
 80071ac:	2300      	movs	r3, #0
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 80071b4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	220a      	movs	r2, #10
 80071bc:	2300      	movs	r3, #0
 80071be:	4630      	mov	r0, r6
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fd71 	bl	8000ca8 <__aeabi_uldivmod>
 80071c6:	9b05      	ldr	r3, [sp, #20]
 80071c8:	3301      	adds	r3, #1
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	3230      	adds	r2, #48	; 0x30
 80071d0:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 80071d4:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80071d8:	b1d3      	cbz	r3, 8007210 <_svfprintf_r+0xc10>
 80071da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071dc:	9a05      	ldr	r2, [sp, #20]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d115      	bne.n	8007210 <_svfprintf_r+0xc10>
 80071e4:	2aff      	cmp	r2, #255	; 0xff
 80071e6:	d013      	beq.n	8007210 <_svfprintf_r+0xc10>
 80071e8:	2e0a      	cmp	r6, #10
 80071ea:	f175 0300 	sbcs.w	r3, r5, #0
 80071ee:	d30f      	bcc.n	8007210 <_svfprintf_r+0xc10>
 80071f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80071f4:	eba9 0903 	sub.w	r9, r9, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	4648      	mov	r0, r9
 80071fc:	f002 fe3c 	bl	8009e78 <strncpy>
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	b11b      	cbz	r3, 800720e <_svfprintf_r+0xc0e>
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	3301      	adds	r3, #1
 800720a:	930a      	str	r3, [sp, #40]	; 0x28
 800720c:	2300      	movs	r3, #0
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	220a      	movs	r2, #10
 8007214:	4630      	mov	r0, r6
 8007216:	4629      	mov	r1, r5
 8007218:	f7f9 fd46 	bl	8000ca8 <__aeabi_uldivmod>
 800721c:	2e0a      	cmp	r6, #10
 800721e:	f175 0300 	sbcs.w	r3, r5, #0
 8007222:	f0c0 83bf 	bcc.w	80079a4 <_svfprintf_r+0x13a4>
 8007226:	4606      	mov	r6, r0
 8007228:	460d      	mov	r5, r1
 800722a:	46cb      	mov	fp, r9
 800722c:	e7c5      	b.n	80071ba <_svfprintf_r+0xbba>
 800722e:	f006 030f 	and.w	r3, r6, #15
 8007232:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007234:	0936      	lsrs	r6, r6, #4
 8007236:	5cd3      	ldrb	r3, [r2, r3]
 8007238:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800723c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8007240:	092d      	lsrs	r5, r5, #4
 8007242:	ea56 0305 	orrs.w	r3, r6, r5
 8007246:	d1f2      	bne.n	800722e <_svfprintf_r+0xc2e>
 8007248:	e3ac      	b.n	80079a4 <_svfprintf_r+0x13a4>
 800724a:	b933      	cbnz	r3, 800725a <_svfprintf_r+0xc5a>
 800724c:	f01b 0f01 	tst.w	fp, #1
 8007250:	d003      	beq.n	800725a <_svfprintf_r+0xc5a>
 8007252:	2330      	movs	r3, #48	; 0x30
 8007254:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8007258:	e7a5      	b.n	80071a6 <_svfprintf_r+0xba6>
 800725a:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800725e:	e3a1      	b.n	80079a4 <_svfprintf_r+0x13a4>
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8370 	beq.w	8007948 <_svfprintf_r+0x1348>
 8007268:	2000      	movs	r0, #0
 800726a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800726e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8007272:	9607      	str	r6, [sp, #28]
 8007274:	f7ff bb29 	b.w	80068ca <_svfprintf_r+0x2ca>
 8007278:	9e03      	ldr	r6, [sp, #12]
 800727a:	f7ff bb98 	b.w	80069ae <_svfprintf_r+0x3ae>
 800727e:	2010      	movs	r0, #16
 8007280:	4402      	add	r2, r0
 8007282:	2b07      	cmp	r3, #7
 8007284:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007288:	6060      	str	r0, [r4, #4]
 800728a:	dd08      	ble.n	800729e <_svfprintf_r+0xc9e>
 800728c:	aa22      	add	r2, sp, #136	; 0x88
 800728e:	4641      	mov	r1, r8
 8007290:	4650      	mov	r0, sl
 8007292:	f002 fe04 	bl	8009e9e <__ssprint_r>
 8007296:	2800      	cmp	r0, #0
 8007298:	f040 8334 	bne.w	8007904 <_svfprintf_r+0x1304>
 800729c:	a925      	add	r1, sp, #148	; 0x94
 800729e:	3f10      	subs	r7, #16
 80072a0:	460c      	mov	r4, r1
 80072a2:	e4f4      	b.n	8006c8e <_svfprintf_r+0x68e>
 80072a4:	460c      	mov	r4, r1
 80072a6:	e50d      	b.n	8006cc4 <_svfprintf_r+0x6c4>
 80072a8:	aa22      	add	r2, sp, #136	; 0x88
 80072aa:	4641      	mov	r1, r8
 80072ac:	4650      	mov	r0, sl
 80072ae:	f002 fdf6 	bl	8009e9e <__ssprint_r>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	f040 8326 	bne.w	8007904 <_svfprintf_r+0x1304>
 80072b8:	ac25      	add	r4, sp, #148	; 0x94
 80072ba:	e515      	b.n	8006ce8 <_svfprintf_r+0x6e8>
 80072bc:	aa22      	add	r2, sp, #136	; 0x88
 80072be:	4641      	mov	r1, r8
 80072c0:	4650      	mov	r0, sl
 80072c2:	f002 fdec 	bl	8009e9e <__ssprint_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f040 831c 	bne.w	8007904 <_svfprintf_r+0x1304>
 80072cc:	ac25      	add	r4, sp, #148	; 0x94
 80072ce:	e51b      	b.n	8006d08 <_svfprintf_r+0x708>
 80072d0:	2010      	movs	r0, #16
 80072d2:	4402      	add	r2, r0
 80072d4:	2b07      	cmp	r3, #7
 80072d6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80072da:	6060      	str	r0, [r4, #4]
 80072dc:	dd08      	ble.n	80072f0 <_svfprintf_r+0xcf0>
 80072de:	aa22      	add	r2, sp, #136	; 0x88
 80072e0:	4641      	mov	r1, r8
 80072e2:	4650      	mov	r0, sl
 80072e4:	f002 fddb 	bl	8009e9e <__ssprint_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f040 830b 	bne.w	8007904 <_svfprintf_r+0x1304>
 80072ee:	a925      	add	r1, sp, #148	; 0x94
 80072f0:	3f10      	subs	r7, #16
 80072f2:	460c      	mov	r4, r1
 80072f4:	e510      	b.n	8006d18 <_svfprintf_r+0x718>
 80072f6:	460c      	mov	r4, r1
 80072f8:	e529      	b.n	8006d4e <_svfprintf_r+0x74e>
 80072fa:	2010      	movs	r0, #16
 80072fc:	4402      	add	r2, r0
 80072fe:	2b07      	cmp	r3, #7
 8007300:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007304:	6060      	str	r0, [r4, #4]
 8007306:	dd08      	ble.n	800731a <_svfprintf_r+0xd1a>
 8007308:	aa22      	add	r2, sp, #136	; 0x88
 800730a:	4641      	mov	r1, r8
 800730c:	4650      	mov	r0, sl
 800730e:	f002 fdc6 	bl	8009e9e <__ssprint_r>
 8007312:	2800      	cmp	r0, #0
 8007314:	f040 82f6 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007318:	a925      	add	r1, sp, #148	; 0x94
 800731a:	3e10      	subs	r6, #16
 800731c:	460c      	mov	r4, r1
 800731e:	e529      	b.n	8006d74 <_svfprintf_r+0x774>
 8007320:	460c      	mov	r4, r1
 8007322:	e541      	b.n	8006da8 <_svfprintf_r+0x7a8>
 8007324:	0800bc78 	.word	0x0800bc78
 8007328:	0800bc89 	.word	0x0800bc89
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	2b65      	cmp	r3, #101	; 0x65
 8007330:	f340 8230 	ble.w	8007794 <_svfprintf_r+0x1194>
 8007334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	f7f9 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007340:	2800      	cmp	r0, #0
 8007342:	d068      	beq.n	8007416 <_svfprintf_r+0xe16>
 8007344:	4b6d      	ldr	r3, [pc, #436]	; (80074fc <_svfprintf_r+0xefc>)
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	2301      	movs	r3, #1
 800734a:	441e      	add	r6, r3
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007350:	9624      	str	r6, [sp, #144]	; 0x90
 8007352:	3301      	adds	r3, #1
 8007354:	2b07      	cmp	r3, #7
 8007356:	9323      	str	r3, [sp, #140]	; 0x8c
 8007358:	dc37      	bgt.n	80073ca <_svfprintf_r+0xdca>
 800735a:	3408      	adds	r4, #8
 800735c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800735e:	9a05      	ldr	r2, [sp, #20]
 8007360:	4293      	cmp	r3, r2
 8007362:	db03      	blt.n	800736c <_svfprintf_r+0xd6c>
 8007364:	f01b 0f01 	tst.w	fp, #1
 8007368:	f43f ad30 	beq.w	8006dcc <_svfprintf_r+0x7cc>
 800736c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007374:	6063      	str	r3, [r4, #4]
 8007376:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007378:	4413      	add	r3, r2
 800737a:	9324      	str	r3, [sp, #144]	; 0x90
 800737c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800737e:	3301      	adds	r3, #1
 8007380:	2b07      	cmp	r3, #7
 8007382:	9323      	str	r3, [sp, #140]	; 0x8c
 8007384:	dc2b      	bgt.n	80073de <_svfprintf_r+0xdde>
 8007386:	3408      	adds	r4, #8
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	1e5d      	subs	r5, r3, #1
 800738c:	2d00      	cmp	r5, #0
 800738e:	f77f ad1d 	ble.w	8006dcc <_svfprintf_r+0x7cc>
 8007392:	4e5b      	ldr	r6, [pc, #364]	; (8007500 <_svfprintf_r+0xf00>)
 8007394:	2710      	movs	r7, #16
 8007396:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800739a:	2d10      	cmp	r5, #16
 800739c:	f103 0301 	add.w	r3, r3, #1
 80073a0:	f104 0108 	add.w	r1, r4, #8
 80073a4:	6026      	str	r6, [r4, #0]
 80073a6:	dc24      	bgt.n	80073f2 <_svfprintf_r+0xdf2>
 80073a8:	6065      	str	r5, [r4, #4]
 80073aa:	2b07      	cmp	r3, #7
 80073ac:	4415      	add	r5, r2
 80073ae:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80073b2:	f340 8286 	ble.w	80078c2 <_svfprintf_r+0x12c2>
 80073b6:	aa22      	add	r2, sp, #136	; 0x88
 80073b8:	4641      	mov	r1, r8
 80073ba:	4650      	mov	r0, sl
 80073bc:	f002 fd6f 	bl	8009e9e <__ssprint_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f040 829f 	bne.w	8007904 <_svfprintf_r+0x1304>
 80073c6:	ac25      	add	r4, sp, #148	; 0x94
 80073c8:	e500      	b.n	8006dcc <_svfprintf_r+0x7cc>
 80073ca:	aa22      	add	r2, sp, #136	; 0x88
 80073cc:	4641      	mov	r1, r8
 80073ce:	4650      	mov	r0, sl
 80073d0:	f002 fd65 	bl	8009e9e <__ssprint_r>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f040 8295 	bne.w	8007904 <_svfprintf_r+0x1304>
 80073da:	ac25      	add	r4, sp, #148	; 0x94
 80073dc:	e7be      	b.n	800735c <_svfprintf_r+0xd5c>
 80073de:	aa22      	add	r2, sp, #136	; 0x88
 80073e0:	4641      	mov	r1, r8
 80073e2:	4650      	mov	r0, sl
 80073e4:	f002 fd5b 	bl	8009e9e <__ssprint_r>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f040 828b 	bne.w	8007904 <_svfprintf_r+0x1304>
 80073ee:	ac25      	add	r4, sp, #148	; 0x94
 80073f0:	e7ca      	b.n	8007388 <_svfprintf_r+0xd88>
 80073f2:	3210      	adds	r2, #16
 80073f4:	2b07      	cmp	r3, #7
 80073f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80073fa:	6067      	str	r7, [r4, #4]
 80073fc:	dd08      	ble.n	8007410 <_svfprintf_r+0xe10>
 80073fe:	aa22      	add	r2, sp, #136	; 0x88
 8007400:	4641      	mov	r1, r8
 8007402:	4650      	mov	r0, sl
 8007404:	f002 fd4b 	bl	8009e9e <__ssprint_r>
 8007408:	2800      	cmp	r0, #0
 800740a:	f040 827b 	bne.w	8007904 <_svfprintf_r+0x1304>
 800740e:	a925      	add	r1, sp, #148	; 0x94
 8007410:	3d10      	subs	r5, #16
 8007412:	460c      	mov	r4, r1
 8007414:	e7bf      	b.n	8007396 <_svfprintf_r+0xd96>
 8007416:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007418:	2b00      	cmp	r3, #0
 800741a:	dc73      	bgt.n	8007504 <_svfprintf_r+0xf04>
 800741c:	4b37      	ldr	r3, [pc, #220]	; (80074fc <_svfprintf_r+0xefc>)
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	2301      	movs	r3, #1
 8007422:	441e      	add	r6, r3
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007428:	9624      	str	r6, [sp, #144]	; 0x90
 800742a:	3301      	adds	r3, #1
 800742c:	2b07      	cmp	r3, #7
 800742e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007430:	dc3d      	bgt.n	80074ae <_svfprintf_r+0xeae>
 8007432:	3408      	adds	r4, #8
 8007434:	9905      	ldr	r1, [sp, #20]
 8007436:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007438:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800743a:	430a      	orrs	r2, r1
 800743c:	f00b 0101 	and.w	r1, fp, #1
 8007440:	430a      	orrs	r2, r1
 8007442:	f43f acc3 	beq.w	8006dcc <_svfprintf_r+0x7cc>
 8007446:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800744c:	6062      	str	r2, [r4, #4]
 800744e:	4413      	add	r3, r2
 8007450:	9324      	str	r3, [sp, #144]	; 0x90
 8007452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007454:	3301      	adds	r3, #1
 8007456:	2b07      	cmp	r3, #7
 8007458:	9323      	str	r3, [sp, #140]	; 0x8c
 800745a:	dc32      	bgt.n	80074c2 <_svfprintf_r+0xec2>
 800745c:	3408      	adds	r4, #8
 800745e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007460:	2d00      	cmp	r5, #0
 8007462:	da1b      	bge.n	800749c <_svfprintf_r+0xe9c>
 8007464:	4e26      	ldr	r6, [pc, #152]	; (8007500 <_svfprintf_r+0xf00>)
 8007466:	426d      	negs	r5, r5
 8007468:	4623      	mov	r3, r4
 800746a:	2710      	movs	r7, #16
 800746c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8007470:	2d10      	cmp	r5, #16
 8007472:	f102 0201 	add.w	r2, r2, #1
 8007476:	f104 0408 	add.w	r4, r4, #8
 800747a:	601e      	str	r6, [r3, #0]
 800747c:	dc2b      	bgt.n	80074d6 <_svfprintf_r+0xed6>
 800747e:	605d      	str	r5, [r3, #4]
 8007480:	2a07      	cmp	r2, #7
 8007482:	440d      	add	r5, r1
 8007484:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8007488:	dd08      	ble.n	800749c <_svfprintf_r+0xe9c>
 800748a:	aa22      	add	r2, sp, #136	; 0x88
 800748c:	4641      	mov	r1, r8
 800748e:	4650      	mov	r0, sl
 8007490:	f002 fd05 	bl	8009e9e <__ssprint_r>
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 8235 	bne.w	8007904 <_svfprintf_r+0x1304>
 800749a:	ac25      	add	r4, sp, #148	; 0x94
 800749c:	9b05      	ldr	r3, [sp, #20]
 800749e:	9a05      	ldr	r2, [sp, #20]
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80074a4:	f8c4 9000 	str.w	r9, [r4]
 80074a8:	4413      	add	r3, r2
 80074aa:	9324      	str	r3, [sp, #144]	; 0x90
 80074ac:	e487      	b.n	8006dbe <_svfprintf_r+0x7be>
 80074ae:	aa22      	add	r2, sp, #136	; 0x88
 80074b0:	4641      	mov	r1, r8
 80074b2:	4650      	mov	r0, sl
 80074b4:	f002 fcf3 	bl	8009e9e <__ssprint_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f040 8223 	bne.w	8007904 <_svfprintf_r+0x1304>
 80074be:	ac25      	add	r4, sp, #148	; 0x94
 80074c0:	e7b8      	b.n	8007434 <_svfprintf_r+0xe34>
 80074c2:	aa22      	add	r2, sp, #136	; 0x88
 80074c4:	4641      	mov	r1, r8
 80074c6:	4650      	mov	r0, sl
 80074c8:	f002 fce9 	bl	8009e9e <__ssprint_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f040 8219 	bne.w	8007904 <_svfprintf_r+0x1304>
 80074d2:	ac25      	add	r4, sp, #148	; 0x94
 80074d4:	e7c3      	b.n	800745e <_svfprintf_r+0xe5e>
 80074d6:	3110      	adds	r1, #16
 80074d8:	2a07      	cmp	r2, #7
 80074da:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80074de:	605f      	str	r7, [r3, #4]
 80074e0:	dd08      	ble.n	80074f4 <_svfprintf_r+0xef4>
 80074e2:	aa22      	add	r2, sp, #136	; 0x88
 80074e4:	4641      	mov	r1, r8
 80074e6:	4650      	mov	r0, sl
 80074e8:	f002 fcd9 	bl	8009e9e <__ssprint_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 8209 	bne.w	8007904 <_svfprintf_r+0x1304>
 80074f2:	ac25      	add	r4, sp, #148	; 0x94
 80074f4:	3d10      	subs	r5, #16
 80074f6:	4623      	mov	r3, r4
 80074f8:	e7b8      	b.n	800746c <_svfprintf_r+0xe6c>
 80074fa:	bf00      	nop
 80074fc:	0800bc9a 	.word	0x0800bc9a
 8007500:	0800bcac 	.word	0x0800bcac
 8007504:	9f05      	ldr	r7, [sp, #20]
 8007506:	42af      	cmp	r7, r5
 8007508:	bfa8      	it	ge
 800750a:	462f      	movge	r7, r5
 800750c:	2f00      	cmp	r7, #0
 800750e:	dd0a      	ble.n	8007526 <_svfprintf_r+0xf26>
 8007510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007512:	3301      	adds	r3, #1
 8007514:	443e      	add	r6, r7
 8007516:	2b07      	cmp	r3, #7
 8007518:	e9c4 9700 	strd	r9, r7, [r4]
 800751c:	9624      	str	r6, [sp, #144]	; 0x90
 800751e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007520:	f300 8085 	bgt.w	800762e <_svfprintf_r+0x102e>
 8007524:	3408      	adds	r4, #8
 8007526:	2f00      	cmp	r7, #0
 8007528:	bfac      	ite	ge
 800752a:	1bee      	subge	r6, r5, r7
 800752c:	462e      	movlt	r6, r5
 800752e:	2e00      	cmp	r6, #0
 8007530:	dd19      	ble.n	8007566 <_svfprintf_r+0xf66>
 8007532:	4f97      	ldr	r7, [pc, #604]	; (8007790 <_svfprintf_r+0x1190>)
 8007534:	6027      	str	r7, [r4, #0]
 8007536:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800753a:	2e10      	cmp	r6, #16
 800753c:	f103 0301 	add.w	r3, r3, #1
 8007540:	f104 0108 	add.w	r1, r4, #8
 8007544:	dc7d      	bgt.n	8007642 <_svfprintf_r+0x1042>
 8007546:	6066      	str	r6, [r4, #4]
 8007548:	2b07      	cmp	r3, #7
 800754a:	4416      	add	r6, r2
 800754c:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007550:	f340 808a 	ble.w	8007668 <_svfprintf_r+0x1068>
 8007554:	aa22      	add	r2, sp, #136	; 0x88
 8007556:	4641      	mov	r1, r8
 8007558:	4650      	mov	r0, sl
 800755a:	f002 fca0 	bl	8009e9e <__ssprint_r>
 800755e:	2800      	cmp	r0, #0
 8007560:	f040 81d0 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007564:	ac25      	add	r4, sp, #148	; 0x94
 8007566:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800756a:	444d      	add	r5, r9
 800756c:	d00a      	beq.n	8007584 <_svfprintf_r+0xf84>
 800756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d17b      	bne.n	800766c <_svfprintf_r+0x106c>
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d17b      	bne.n	8007672 <_svfprintf_r+0x1072>
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	444b      	add	r3, r9
 800757e:	429d      	cmp	r5, r3
 8007580:	bf28      	it	cs
 8007582:	461d      	movcs	r5, r3
 8007584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007586:	9a05      	ldr	r2, [sp, #20]
 8007588:	4293      	cmp	r3, r2
 800758a:	db02      	blt.n	8007592 <_svfprintf_r+0xf92>
 800758c:	f01b 0f01 	tst.w	fp, #1
 8007590:	d00e      	beq.n	80075b0 <_svfprintf_r+0xfb0>
 8007592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800759e:	4413      	add	r3, r2
 80075a0:	9324      	str	r3, [sp, #144]	; 0x90
 80075a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075a4:	3301      	adds	r3, #1
 80075a6:	2b07      	cmp	r3, #7
 80075a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80075aa:	f300 80dd 	bgt.w	8007768 <_svfprintf_r+0x1168>
 80075ae:	3408      	adds	r4, #8
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80075b4:	eb09 0203 	add.w	r2, r9, r3
 80075b8:	1b9e      	subs	r6, r3, r6
 80075ba:	1b52      	subs	r2, r2, r5
 80075bc:	4296      	cmp	r6, r2
 80075be:	bfa8      	it	ge
 80075c0:	4616      	movge	r6, r2
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	dd0b      	ble.n	80075de <_svfprintf_r+0xfde>
 80075c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075c8:	4433      	add	r3, r6
 80075ca:	9324      	str	r3, [sp, #144]	; 0x90
 80075cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075ce:	3301      	adds	r3, #1
 80075d0:	2b07      	cmp	r3, #7
 80075d2:	e9c4 5600 	strd	r5, r6, [r4]
 80075d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80075d8:	f300 80d0 	bgt.w	800777c <_svfprintf_r+0x117c>
 80075dc:	3408      	adds	r4, #8
 80075de:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	eba3 0505 	sub.w	r5, r3, r5
 80075e8:	bfa8      	it	ge
 80075ea:	1bad      	subge	r5, r5, r6
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	f77f abed 	ble.w	8006dcc <_svfprintf_r+0x7cc>
 80075f2:	4e67      	ldr	r6, [pc, #412]	; (8007790 <_svfprintf_r+0x1190>)
 80075f4:	2710      	movs	r7, #16
 80075f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80075fa:	2d10      	cmp	r5, #16
 80075fc:	f103 0301 	add.w	r3, r3, #1
 8007600:	f104 0108 	add.w	r1, r4, #8
 8007604:	6026      	str	r6, [r4, #0]
 8007606:	f77f aecf 	ble.w	80073a8 <_svfprintf_r+0xda8>
 800760a:	3210      	adds	r2, #16
 800760c:	2b07      	cmp	r3, #7
 800760e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007612:	6067      	str	r7, [r4, #4]
 8007614:	dd08      	ble.n	8007628 <_svfprintf_r+0x1028>
 8007616:	aa22      	add	r2, sp, #136	; 0x88
 8007618:	4641      	mov	r1, r8
 800761a:	4650      	mov	r0, sl
 800761c:	f002 fc3f 	bl	8009e9e <__ssprint_r>
 8007620:	2800      	cmp	r0, #0
 8007622:	f040 816f 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007626:	a925      	add	r1, sp, #148	; 0x94
 8007628:	3d10      	subs	r5, #16
 800762a:	460c      	mov	r4, r1
 800762c:	e7e3      	b.n	80075f6 <_svfprintf_r+0xff6>
 800762e:	aa22      	add	r2, sp, #136	; 0x88
 8007630:	4641      	mov	r1, r8
 8007632:	4650      	mov	r0, sl
 8007634:	f002 fc33 	bl	8009e9e <__ssprint_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 8163 	bne.w	8007904 <_svfprintf_r+0x1304>
 800763e:	ac25      	add	r4, sp, #148	; 0x94
 8007640:	e771      	b.n	8007526 <_svfprintf_r+0xf26>
 8007642:	2010      	movs	r0, #16
 8007644:	4402      	add	r2, r0
 8007646:	2b07      	cmp	r3, #7
 8007648:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800764c:	6060      	str	r0, [r4, #4]
 800764e:	dd08      	ble.n	8007662 <_svfprintf_r+0x1062>
 8007650:	aa22      	add	r2, sp, #136	; 0x88
 8007652:	4641      	mov	r1, r8
 8007654:	4650      	mov	r0, sl
 8007656:	f002 fc22 	bl	8009e9e <__ssprint_r>
 800765a:	2800      	cmp	r0, #0
 800765c:	f040 8152 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007660:	a925      	add	r1, sp, #148	; 0x94
 8007662:	3e10      	subs	r6, #16
 8007664:	460c      	mov	r4, r1
 8007666:	e765      	b.n	8007534 <_svfprintf_r+0xf34>
 8007668:	460c      	mov	r4, r1
 800766a:	e77c      	b.n	8007566 <_svfprintf_r+0xf66>
 800766c:	9b08      	ldr	r3, [sp, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d04a      	beq.n	8007708 <_svfprintf_r+0x1108>
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	3b01      	subs	r3, #1
 8007676:	9308      	str	r3, [sp, #32]
 8007678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800767e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007680:	6063      	str	r3, [r4, #4]
 8007682:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007684:	4413      	add	r3, r2
 8007686:	9324      	str	r3, [sp, #144]	; 0x90
 8007688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800768a:	3301      	adds	r3, #1
 800768c:	2b07      	cmp	r3, #7
 800768e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007690:	dc41      	bgt.n	8007716 <_svfprintf_r+0x1116>
 8007692:	3408      	adds	r4, #8
 8007694:	9b05      	ldr	r3, [sp, #20]
 8007696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007698:	eb09 0703 	add.w	r7, r9, r3
 800769c:	1b7b      	subs	r3, r7, r5
 800769e:	7817      	ldrb	r7, [r2, #0]
 80076a0:	429f      	cmp	r7, r3
 80076a2:	bfa8      	it	ge
 80076a4:	461f      	movge	r7, r3
 80076a6:	2f00      	cmp	r7, #0
 80076a8:	dd0a      	ble.n	80076c0 <_svfprintf_r+0x10c0>
 80076aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076ac:	443b      	add	r3, r7
 80076ae:	9324      	str	r3, [sp, #144]	; 0x90
 80076b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076b2:	3301      	adds	r3, #1
 80076b4:	2b07      	cmp	r3, #7
 80076b6:	e9c4 5700 	strd	r5, r7, [r4]
 80076ba:	9323      	str	r3, [sp, #140]	; 0x8c
 80076bc:	dc35      	bgt.n	800772a <_svfprintf_r+0x112a>
 80076be:	3408      	adds	r4, #8
 80076c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c2:	781e      	ldrb	r6, [r3, #0]
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	bfa8      	it	ge
 80076c8:	1bf6      	subge	r6, r6, r7
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	dd18      	ble.n	8007700 <_svfprintf_r+0x1100>
 80076ce:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80076d2:	482f      	ldr	r0, [pc, #188]	; (8007790 <_svfprintf_r+0x1190>)
 80076d4:	6020      	str	r0, [r4, #0]
 80076d6:	2e10      	cmp	r6, #16
 80076d8:	f103 0301 	add.w	r3, r3, #1
 80076dc:	f104 0108 	add.w	r1, r4, #8
 80076e0:	dc2d      	bgt.n	800773e <_svfprintf_r+0x113e>
 80076e2:	4432      	add	r2, r6
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80076ea:	6066      	str	r6, [r4, #4]
 80076ec:	dd3a      	ble.n	8007764 <_svfprintf_r+0x1164>
 80076ee:	aa22      	add	r2, sp, #136	; 0x88
 80076f0:	4641      	mov	r1, r8
 80076f2:	4650      	mov	r0, sl
 80076f4:	f002 fbd3 	bl	8009e9e <__ssprint_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f040 8103 	bne.w	8007904 <_svfprintf_r+0x1304>
 80076fe:	ac25      	add	r4, sp, #148	; 0x94
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	441d      	add	r5, r3
 8007706:	e732      	b.n	800756e <_svfprintf_r+0xf6e>
 8007708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770a:	3b01      	subs	r3, #1
 800770c:	930a      	str	r3, [sp, #40]	; 0x28
 800770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007710:	3b01      	subs	r3, #1
 8007712:	9309      	str	r3, [sp, #36]	; 0x24
 8007714:	e7b0      	b.n	8007678 <_svfprintf_r+0x1078>
 8007716:	aa22      	add	r2, sp, #136	; 0x88
 8007718:	4641      	mov	r1, r8
 800771a:	4650      	mov	r0, sl
 800771c:	f002 fbbf 	bl	8009e9e <__ssprint_r>
 8007720:	2800      	cmp	r0, #0
 8007722:	f040 80ef 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007726:	ac25      	add	r4, sp, #148	; 0x94
 8007728:	e7b4      	b.n	8007694 <_svfprintf_r+0x1094>
 800772a:	aa22      	add	r2, sp, #136	; 0x88
 800772c:	4641      	mov	r1, r8
 800772e:	4650      	mov	r0, sl
 8007730:	f002 fbb5 	bl	8009e9e <__ssprint_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	f040 80e5 	bne.w	8007904 <_svfprintf_r+0x1304>
 800773a:	ac25      	add	r4, sp, #148	; 0x94
 800773c:	e7c0      	b.n	80076c0 <_svfprintf_r+0x10c0>
 800773e:	2010      	movs	r0, #16
 8007740:	4402      	add	r2, r0
 8007742:	2b07      	cmp	r3, #7
 8007744:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007748:	6060      	str	r0, [r4, #4]
 800774a:	dd08      	ble.n	800775e <_svfprintf_r+0x115e>
 800774c:	aa22      	add	r2, sp, #136	; 0x88
 800774e:	4641      	mov	r1, r8
 8007750:	4650      	mov	r0, sl
 8007752:	f002 fba4 	bl	8009e9e <__ssprint_r>
 8007756:	2800      	cmp	r0, #0
 8007758:	f040 80d4 	bne.w	8007904 <_svfprintf_r+0x1304>
 800775c:	a925      	add	r1, sp, #148	; 0x94
 800775e:	3e10      	subs	r6, #16
 8007760:	460c      	mov	r4, r1
 8007762:	e7b4      	b.n	80076ce <_svfprintf_r+0x10ce>
 8007764:	460c      	mov	r4, r1
 8007766:	e7cb      	b.n	8007700 <_svfprintf_r+0x1100>
 8007768:	aa22      	add	r2, sp, #136	; 0x88
 800776a:	4641      	mov	r1, r8
 800776c:	4650      	mov	r0, sl
 800776e:	f002 fb96 	bl	8009e9e <__ssprint_r>
 8007772:	2800      	cmp	r0, #0
 8007774:	f040 80c6 	bne.w	8007904 <_svfprintf_r+0x1304>
 8007778:	ac25      	add	r4, sp, #148	; 0x94
 800777a:	e719      	b.n	80075b0 <_svfprintf_r+0xfb0>
 800777c:	aa22      	add	r2, sp, #136	; 0x88
 800777e:	4641      	mov	r1, r8
 8007780:	4650      	mov	r0, sl
 8007782:	f002 fb8c 	bl	8009e9e <__ssprint_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 80bc 	bne.w	8007904 <_svfprintf_r+0x1304>
 800778c:	ac25      	add	r4, sp, #148	; 0x94
 800778e:	e726      	b.n	80075de <_svfprintf_r+0xfde>
 8007790:	0800bcac 	.word	0x0800bcac
 8007794:	9a05      	ldr	r2, [sp, #20]
 8007796:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007798:	2a01      	cmp	r2, #1
 800779a:	f106 0601 	add.w	r6, r6, #1
 800779e:	f103 0301 	add.w	r3, r3, #1
 80077a2:	f104 0508 	add.w	r5, r4, #8
 80077a6:	dc02      	bgt.n	80077ae <_svfprintf_r+0x11ae>
 80077a8:	f01b 0f01 	tst.w	fp, #1
 80077ac:	d07e      	beq.n	80078ac <_svfprintf_r+0x12ac>
 80077ae:	2201      	movs	r2, #1
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80077b6:	f8c4 9000 	str.w	r9, [r4]
 80077ba:	6062      	str	r2, [r4, #4]
 80077bc:	dd08      	ble.n	80077d0 <_svfprintf_r+0x11d0>
 80077be:	aa22      	add	r2, sp, #136	; 0x88
 80077c0:	4641      	mov	r1, r8
 80077c2:	4650      	mov	r0, sl
 80077c4:	f002 fb6b 	bl	8009e9e <__ssprint_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f040 809b 	bne.w	8007904 <_svfprintf_r+0x1304>
 80077ce:	ad25      	add	r5, sp, #148	; 0x94
 80077d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077d8:	606b      	str	r3, [r5, #4]
 80077da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077dc:	4413      	add	r3, r2
 80077de:	9324      	str	r3, [sp, #144]	; 0x90
 80077e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077e2:	3301      	adds	r3, #1
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80077e8:	dc32      	bgt.n	8007850 <_svfprintf_r+0x1250>
 80077ea:	3508      	adds	r5, #8
 80077ec:	9b05      	ldr	r3, [sp, #20]
 80077ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80077f2:	1e5c      	subs	r4, r3, #1
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f7f9 f976 	bl	8000ae8 <__aeabi_dcmpeq>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d130      	bne.n	8007862 <_svfprintf_r+0x1262>
 8007800:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007804:	9a05      	ldr	r2, [sp, #20]
 8007806:	3101      	adds	r1, #1
 8007808:	3b01      	subs	r3, #1
 800780a:	f109 0001 	add.w	r0, r9, #1
 800780e:	4413      	add	r3, r2
 8007810:	2907      	cmp	r1, #7
 8007812:	e9c5 0400 	strd	r0, r4, [r5]
 8007816:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800781a:	dd50      	ble.n	80078be <_svfprintf_r+0x12be>
 800781c:	aa22      	add	r2, sp, #136	; 0x88
 800781e:	4641      	mov	r1, r8
 8007820:	4650      	mov	r0, sl
 8007822:	f002 fb3c 	bl	8009e9e <__ssprint_r>
 8007826:	2800      	cmp	r0, #0
 8007828:	d16c      	bne.n	8007904 <_svfprintf_r+0x1304>
 800782a:	ad25      	add	r5, sp, #148	; 0x94
 800782c:	ab1e      	add	r3, sp, #120	; 0x78
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007832:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007834:	606b      	str	r3, [r5, #4]
 8007836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007838:	4413      	add	r3, r2
 800783a:	9324      	str	r3, [sp, #144]	; 0x90
 800783c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800783e:	3301      	adds	r3, #1
 8007840:	2b07      	cmp	r3, #7
 8007842:	9323      	str	r3, [sp, #140]	; 0x8c
 8007844:	f73f adb7 	bgt.w	80073b6 <_svfprintf_r+0xdb6>
 8007848:	f105 0408 	add.w	r4, r5, #8
 800784c:	f7ff babe 	b.w	8006dcc <_svfprintf_r+0x7cc>
 8007850:	aa22      	add	r2, sp, #136	; 0x88
 8007852:	4641      	mov	r1, r8
 8007854:	4650      	mov	r0, sl
 8007856:	f002 fb22 	bl	8009e9e <__ssprint_r>
 800785a:	2800      	cmp	r0, #0
 800785c:	d152      	bne.n	8007904 <_svfprintf_r+0x1304>
 800785e:	ad25      	add	r5, sp, #148	; 0x94
 8007860:	e7c4      	b.n	80077ec <_svfprintf_r+0x11ec>
 8007862:	2c00      	cmp	r4, #0
 8007864:	dde2      	ble.n	800782c <_svfprintf_r+0x122c>
 8007866:	4e56      	ldr	r6, [pc, #344]	; (80079c0 <_svfprintf_r+0x13c0>)
 8007868:	2710      	movs	r7, #16
 800786a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800786e:	2c10      	cmp	r4, #16
 8007870:	f103 0301 	add.w	r3, r3, #1
 8007874:	f105 0108 	add.w	r1, r5, #8
 8007878:	602e      	str	r6, [r5, #0]
 800787a:	dc07      	bgt.n	800788c <_svfprintf_r+0x128c>
 800787c:	606c      	str	r4, [r5, #4]
 800787e:	2b07      	cmp	r3, #7
 8007880:	4414      	add	r4, r2
 8007882:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8007886:	dcc9      	bgt.n	800781c <_svfprintf_r+0x121c>
 8007888:	460d      	mov	r5, r1
 800788a:	e7cf      	b.n	800782c <_svfprintf_r+0x122c>
 800788c:	3210      	adds	r2, #16
 800788e:	2b07      	cmp	r3, #7
 8007890:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007894:	606f      	str	r7, [r5, #4]
 8007896:	dd06      	ble.n	80078a6 <_svfprintf_r+0x12a6>
 8007898:	aa22      	add	r2, sp, #136	; 0x88
 800789a:	4641      	mov	r1, r8
 800789c:	4650      	mov	r0, sl
 800789e:	f002 fafe 	bl	8009e9e <__ssprint_r>
 80078a2:	bb78      	cbnz	r0, 8007904 <_svfprintf_r+0x1304>
 80078a4:	a925      	add	r1, sp, #148	; 0x94
 80078a6:	3c10      	subs	r4, #16
 80078a8:	460d      	mov	r5, r1
 80078aa:	e7de      	b.n	800786a <_svfprintf_r+0x126a>
 80078ac:	2201      	movs	r2, #1
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80078b4:	f8c4 9000 	str.w	r9, [r4]
 80078b8:	6062      	str	r2, [r4, #4]
 80078ba:	ddb7      	ble.n	800782c <_svfprintf_r+0x122c>
 80078bc:	e7ae      	b.n	800781c <_svfprintf_r+0x121c>
 80078be:	3508      	adds	r5, #8
 80078c0:	e7b4      	b.n	800782c <_svfprintf_r+0x122c>
 80078c2:	460c      	mov	r4, r1
 80078c4:	f7ff ba82 	b.w	8006dcc <_svfprintf_r+0x7cc>
 80078c8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80078cc:	1a9d      	subs	r5, r3, r2
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	f77f aa80 	ble.w	8006dd4 <_svfprintf_r+0x7d4>
 80078d4:	4e3b      	ldr	r6, [pc, #236]	; (80079c4 <_svfprintf_r+0x13c4>)
 80078d6:	2710      	movs	r7, #16
 80078d8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80078dc:	2d10      	cmp	r5, #16
 80078de:	f103 0301 	add.w	r3, r3, #1
 80078e2:	6026      	str	r6, [r4, #0]
 80078e4:	dc18      	bgt.n	8007918 <_svfprintf_r+0x1318>
 80078e6:	6065      	str	r5, [r4, #4]
 80078e8:	2b07      	cmp	r3, #7
 80078ea:	4415      	add	r5, r2
 80078ec:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80078f0:	f77f aa70 	ble.w	8006dd4 <_svfprintf_r+0x7d4>
 80078f4:	aa22      	add	r2, sp, #136	; 0x88
 80078f6:	4641      	mov	r1, r8
 80078f8:	4650      	mov	r0, sl
 80078fa:	f002 fad0 	bl	8009e9e <__ssprint_r>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aa68 	beq.w	8006dd4 <_svfprintf_r+0x7d4>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f a887 	beq.w	8006a1a <_svfprintf_r+0x41a>
 800790c:	4619      	mov	r1, r3
 800790e:	4650      	mov	r0, sl
 8007910:	f000 ff34 	bl	800877c <_free_r>
 8007914:	f7ff b881 	b.w	8006a1a <_svfprintf_r+0x41a>
 8007918:	3210      	adds	r2, #16
 800791a:	2b07      	cmp	r3, #7
 800791c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007920:	6067      	str	r7, [r4, #4]
 8007922:	dc02      	bgt.n	800792a <_svfprintf_r+0x132a>
 8007924:	3408      	adds	r4, #8
 8007926:	3d10      	subs	r5, #16
 8007928:	e7d6      	b.n	80078d8 <_svfprintf_r+0x12d8>
 800792a:	aa22      	add	r2, sp, #136	; 0x88
 800792c:	4641      	mov	r1, r8
 800792e:	4650      	mov	r0, sl
 8007930:	f002 fab5 	bl	8009e9e <__ssprint_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	d1e5      	bne.n	8007904 <_svfprintf_r+0x1304>
 8007938:	ac25      	add	r4, sp, #148	; 0x94
 800793a:	e7f4      	b.n	8007926 <_svfprintf_r+0x1326>
 800793c:	9903      	ldr	r1, [sp, #12]
 800793e:	4650      	mov	r0, sl
 8007940:	f000 ff1c 	bl	800877c <_free_r>
 8007944:	f7ff ba5e 	b.w	8006e04 <_svfprintf_r+0x804>
 8007948:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800794a:	2b00      	cmp	r3, #0
 800794c:	f43f a865 	beq.w	8006a1a <_svfprintf_r+0x41a>
 8007950:	aa22      	add	r2, sp, #136	; 0x88
 8007952:	4641      	mov	r1, r8
 8007954:	4650      	mov	r0, sl
 8007956:	f002 faa2 	bl	8009e9e <__ssprint_r>
 800795a:	f7ff b85e 	b.w	8006a1a <_svfprintf_r+0x41a>
 800795e:	ea56 0205 	orrs.w	r2, r6, r5
 8007962:	465f      	mov	r7, fp
 8007964:	f43f ab78 	beq.w	8007058 <_svfprintf_r+0xa58>
 8007968:	2b01      	cmp	r3, #1
 800796a:	f43f ac15 	beq.w	8007198 <_svfprintf_r+0xb98>
 800796e:	2b02      	cmp	r3, #2
 8007970:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8007974:	f43f ac5b 	beq.w	800722e <_svfprintf_r+0xc2e>
 8007978:	f006 0307 	and.w	r3, r6, #7
 800797c:	08f6      	lsrs	r6, r6, #3
 800797e:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8007982:	08ed      	lsrs	r5, r5, #3
 8007984:	3330      	adds	r3, #48	; 0x30
 8007986:	ea56 0105 	orrs.w	r1, r6, r5
 800798a:	464a      	mov	r2, r9
 800798c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007990:	d1f2      	bne.n	8007978 <_svfprintf_r+0x1378>
 8007992:	07f9      	lsls	r1, r7, #31
 8007994:	d506      	bpl.n	80079a4 <_svfprintf_r+0x13a4>
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d004      	beq.n	80079a4 <_svfprintf_r+0x13a4>
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f809 3c01 	strb.w	r3, [r9, #-1]
 80079a0:	f1a2 0902 	sub.w	r9, r2, #2
 80079a4:	ab4e      	add	r3, sp, #312	; 0x138
 80079a6:	eba3 0309 	sub.w	r3, r3, r9
 80079aa:	9e04      	ldr	r6, [sp, #16]
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	46bb      	mov	fp, r7
 80079b2:	9303      	str	r3, [sp, #12]
 80079b4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80079b8:	461d      	mov	r5, r3
 80079ba:	f7ff b94d 	b.w	8006c58 <_svfprintf_r+0x658>
 80079be:	bf00      	nop
 80079c0:	0800bcac 	.word	0x0800bcac
 80079c4:	0800bc9c 	.word	0x0800bc9c

080079c8 <register_fini>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <register_fini+0xc>)
 80079ca:	b113      	cbz	r3, 80079d2 <register_fini+0xa>
 80079cc:	4802      	ldr	r0, [pc, #8]	; (80079d8 <register_fini+0x10>)
 80079ce:	f000 b805 	b.w	80079dc <atexit>
 80079d2:	4770      	bx	lr
 80079d4:	00000000 	.word	0x00000000
 80079d8:	080086ad 	.word	0x080086ad

080079dc <atexit>:
 80079dc:	2300      	movs	r3, #0
 80079de:	4601      	mov	r1, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 baf0 	b.w	8009fc8 <__register_exitproc>

080079e8 <quorem>:
 80079e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	6903      	ldr	r3, [r0, #16]
 80079ee:	690c      	ldr	r4, [r1, #16]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	4607      	mov	r7, r0
 80079f4:	f2c0 8081 	blt.w	8007afa <quorem+0x112>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	f101 0814 	add.w	r8, r1, #20
 80079fe:	f100 0514 	add.w	r5, r0, #20
 8007a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a10:	3301      	adds	r3, #1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a20:	d331      	bcc.n	8007a86 <quorem+0x9e>
 8007a22:	f04f 0e00 	mov.w	lr, #0
 8007a26:	4640      	mov	r0, r8
 8007a28:	46ac      	mov	ip, r5
 8007a2a:	46f2      	mov	sl, lr
 8007a2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a30:	b293      	uxth	r3, r2
 8007a32:	fb06 e303 	mla	r3, r6, r3, lr
 8007a36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a40:	f8dc a000 	ldr.w	sl, [ip]
 8007a44:	0c12      	lsrs	r2, r2, #16
 8007a46:	fa13 f38a 	uxtah	r3, r3, sl
 8007a4a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a56:	b292      	uxth	r2, r2
 8007a58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a60:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a64:	4581      	cmp	r9, r0
 8007a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a72:	d2db      	bcs.n	8007a2c <quorem+0x44>
 8007a74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a78:	b92b      	cbnz	r3, 8007a86 <quorem+0x9e>
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	d32e      	bcc.n	8007ae2 <quorem+0xfa>
 8007a84:	613c      	str	r4, [r7, #16]
 8007a86:	4638      	mov	r0, r7
 8007a88:	f001 ff9c 	bl	80099c4 <__mcmp>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	db24      	blt.n	8007ada <quorem+0xf2>
 8007a90:	3601      	adds	r6, #1
 8007a92:	4628      	mov	r0, r5
 8007a94:	f04f 0c00 	mov.w	ip, #0
 8007a98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007aa0:	b293      	uxth	r3, r2
 8007aa2:	ebac 0303 	sub.w	r3, ip, r3
 8007aa6:	0c12      	lsrs	r2, r2, #16
 8007aa8:	fa13 f38e 	uxtah	r3, r3, lr
 8007aac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aba:	45c1      	cmp	r9, r8
 8007abc:	f840 3b04 	str.w	r3, [r0], #4
 8007ac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ac4:	d2e8      	bcs.n	8007a98 <quorem+0xb0>
 8007ac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ace:	b922      	cbnz	r2, 8007ada <quorem+0xf2>
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	d30a      	bcc.n	8007aee <quorem+0x106>
 8007ad8:	613c      	str	r4, [r7, #16]
 8007ada:	4630      	mov	r0, r6
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1cc      	bne.n	8007a84 <quorem+0x9c>
 8007aea:	3c01      	subs	r4, #1
 8007aec:	e7c7      	b.n	8007a7e <quorem+0x96>
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1f0      	bne.n	8007ad8 <quorem+0xf0>
 8007af6:	3c01      	subs	r4, #1
 8007af8:	e7eb      	b.n	8007ad2 <quorem+0xea>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7ee      	b.n	8007adc <quorem+0xf4>
	...

08007b00 <_dtoa_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	ed2d 8b04 	vpush	{d8-d9}
 8007b08:	b093      	sub	sp, #76	; 0x4c
 8007b0a:	ec57 6b10 	vmov	r6, r7, d0
 8007b0e:	9106      	str	r1, [sp, #24]
 8007b10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007b12:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007b14:	9209      	str	r2, [sp, #36]	; 0x24
 8007b16:	ee10 aa10 	vmov	sl, s0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b1e:	46bb      	mov	fp, r7
 8007b20:	b141      	cbz	r1, 8007b34 <_dtoa_r+0x34>
 8007b22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b24:	604a      	str	r2, [r1, #4]
 8007b26:	2301      	movs	r3, #1
 8007b28:	4093      	lsls	r3, r2
 8007b2a:	608b      	str	r3, [r1, #8]
 8007b2c:	f001 fcf1 	bl	8009512 <_Bfree>
 8007b30:	2300      	movs	r3, #0
 8007b32:	6423      	str	r3, [r4, #64]	; 0x40
 8007b34:	1e3b      	subs	r3, r7, #0
 8007b36:	bfaa      	itet	ge
 8007b38:	2300      	movge	r3, #0
 8007b3a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b3e:	602b      	strge	r3, [r5, #0]
 8007b40:	4ba3      	ldr	r3, [pc, #652]	; (8007dd0 <_dtoa_r+0x2d0>)
 8007b42:	bfbc      	itt	lt
 8007b44:	2201      	movlt	r2, #1
 8007b46:	602a      	strlt	r2, [r5, #0]
 8007b48:	ea33 030b 	bics.w	r3, r3, fp
 8007b4c:	d11b      	bne.n	8007b86 <_dtoa_r+0x86>
 8007b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b5a:	4333      	orrs	r3, r6
 8007b5c:	f000 8590 	beq.w	8008680 <_dtoa_r+0xb80>
 8007b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b62:	b90b      	cbnz	r3, 8007b68 <_dtoa_r+0x68>
 8007b64:	4b9b      	ldr	r3, [pc, #620]	; (8007dd4 <_dtoa_r+0x2d4>)
 8007b66:	e022      	b.n	8007bae <_dtoa_r+0xae>
 8007b68:	4b9a      	ldr	r3, [pc, #616]	; (8007dd4 <_dtoa_r+0x2d4>)
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	3303      	adds	r3, #3
 8007b6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	9801      	ldr	r0, [sp, #4]
 8007b74:	b013      	add	sp, #76	; 0x4c
 8007b76:	ecbd 8b04 	vpop	{d8-d9}
 8007b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7e:	4b96      	ldr	r3, [pc, #600]	; (8007dd8 <_dtoa_r+0x2d8>)
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	3308      	adds	r3, #8
 8007b84:	e7f3      	b.n	8007b6e <_dtoa_r+0x6e>
 8007b86:	2200      	movs	r2, #0
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	f7f8 ffab 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b92:	ec4b ab19 	vmov	d9, sl, fp
 8007b96:	4680      	mov	r8, r0
 8007b98:	b158      	cbz	r0, 8007bb2 <_dtoa_r+0xb2>
 8007b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8569 	beq.w	800867a <_dtoa_r+0xb7a>
 8007ba8:	488c      	ldr	r0, [pc, #560]	; (8007ddc <_dtoa_r+0x2dc>)
 8007baa:	6018      	str	r0, [r3, #0]
 8007bac:	1e43      	subs	r3, r0, #1
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	e7df      	b.n	8007b72 <_dtoa_r+0x72>
 8007bb2:	ec4b ab10 	vmov	d0, sl, fp
 8007bb6:	aa10      	add	r2, sp, #64	; 0x40
 8007bb8:	a911      	add	r1, sp, #68	; 0x44
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f002 f824 	bl	8009c08 <__d2b>
 8007bc0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007bc4:	ee08 0a10 	vmov	s16, r0
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	f000 8082 	beq.w	8007cd2 <_dtoa_r+0x1d2>
 8007bce:	ee19 3a90 	vmov	r3, s19
 8007bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007bda:	4656      	mov	r6, sl
 8007bdc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007be0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007be4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007be8:	4b7d      	ldr	r3, [pc, #500]	; (8007de0 <_dtoa_r+0x2e0>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f8 fb5a 	bl	80002a8 <__aeabi_dsub>
 8007bf4:	a370      	add	r3, pc, #448	; (adr r3, 8007db8 <_dtoa_r+0x2b8>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fd0d 	bl	8000618 <__aeabi_dmul>
 8007bfe:	a370      	add	r3, pc, #448	; (adr r3, 8007dc0 <_dtoa_r+0x2c0>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fb52 	bl	80002ac <__adddf3>
 8007c08:	4606      	mov	r6, r0
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	460f      	mov	r7, r1
 8007c0e:	f7f8 fc99 	bl	8000544 <__aeabi_i2d>
 8007c12:	a36d      	add	r3, pc, #436	; (adr r3, 8007dc8 <_dtoa_r+0x2c8>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fcfe 	bl	8000618 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 fb42 	bl	80002ac <__adddf3>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	f7f8 ffa4 	bl	8000b78 <__aeabi_d2iz>
 8007c30:	2200      	movs	r2, #0
 8007c32:	9000      	str	r0, [sp, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	f7f8 ff5f 	bl	8000afc <__aeabi_dcmplt>
 8007c3e:	b150      	cbz	r0, 8007c56 <_dtoa_r+0x156>
 8007c40:	9800      	ldr	r0, [sp, #0]
 8007c42:	f7f8 fc7f 	bl	8000544 <__aeabi_i2d>
 8007c46:	4632      	mov	r2, r6
 8007c48:	463b      	mov	r3, r7
 8007c4a:	f7f8 ff4d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c4e:	b910      	cbnz	r0, 8007c56 <_dtoa_r+0x156>
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	2b16      	cmp	r3, #22
 8007c5a:	d858      	bhi.n	8007d0e <_dtoa_r+0x20e>
 8007c5c:	9a00      	ldr	r2, [sp, #0]
 8007c5e:	4b61      	ldr	r3, [pc, #388]	; (8007de4 <_dtoa_r+0x2e4>)
 8007c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	ec51 0b19 	vmov	r0, r1, d9
 8007c6c:	f7f8 ff46 	bl	8000afc <__aeabi_dcmplt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d04e      	beq.n	8007d12 <_dtoa_r+0x212>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c80:	1b5d      	subs	r5, r3, r5
 8007c82:	1e6b      	subs	r3, r5, #1
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	bf45      	ittet	mi
 8007c88:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c8c:	9304      	strmi	r3, [sp, #16]
 8007c8e:	2300      	movpl	r3, #0
 8007c90:	2300      	movmi	r3, #0
 8007c92:	bf4c      	ite	mi
 8007c94:	9305      	strmi	r3, [sp, #20]
 8007c96:	9304      	strpl	r3, [sp, #16]
 8007c98:	9b00      	ldr	r3, [sp, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db3b      	blt.n	8007d16 <_dtoa_r+0x216>
 8007c9e:	9b05      	ldr	r3, [sp, #20]
 8007ca0:	9a00      	ldr	r2, [sp, #0]
 8007ca2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ca4:	4413      	add	r3, r2
 8007ca6:	9305      	str	r3, [sp, #20]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9307      	str	r3, [sp, #28]
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d869      	bhi.n	8007d86 <_dtoa_r+0x286>
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	bfc4      	itt	gt
 8007cb6:	3b04      	subgt	r3, #4
 8007cb8:	9306      	strgt	r3, [sp, #24]
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8007cc0:	bfcc      	ite	gt
 8007cc2:	2500      	movgt	r5, #0
 8007cc4:	2501      	movle	r5, #1
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d868      	bhi.n	8007d9c <_dtoa_r+0x29c>
 8007cca:	e8df f003 	tbb	[pc, r3]
 8007cce:	3a2d      	.short	0x3a2d
 8007cd0:	5a38      	.short	0x5a38
 8007cd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007cd6:	441d      	add	r5, r3
 8007cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	bfc1      	itttt	gt
 8007ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ce8:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cf0:	bfda      	itte	le
 8007cf2:	f1c3 0320 	rsble	r3, r3, #32
 8007cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8007cfa:	4318      	orrgt	r0, r3
 8007cfc:	f7f8 fc12 	bl	8000524 <__aeabi_ui2d>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4606      	mov	r6, r0
 8007d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d08:	3d01      	subs	r5, #1
 8007d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d0c:	e76c      	b.n	8007be8 <_dtoa_r+0xe8>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7b4      	b.n	8007c7c <_dtoa_r+0x17c>
 8007d12:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d14:	e7b3      	b.n	8007c7e <_dtoa_r+0x17e>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	9a00      	ldr	r2, [sp, #0]
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	4253      	negs	r3, r2
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	2300      	movs	r3, #0
 8007d24:	930a      	str	r3, [sp, #40]	; 0x28
 8007d26:	e7c1      	b.n	8007cac <_dtoa_r+0x1ac>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	9308      	str	r3, [sp, #32]
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dc37      	bgt.n	8007da2 <_dtoa_r+0x2a2>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3c:	e00c      	b.n	8007d58 <_dtoa_r+0x258>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e7f3      	b.n	8007d2a <_dtoa_r+0x22a>
 8007d42:	2300      	movs	r3, #0
 8007d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d46:	9308      	str	r3, [sp, #32]
 8007d48:	9b00      	ldr	r3, [sp, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	bfb8      	it	lt
 8007d56:	2301      	movlt	r3, #1
 8007d58:	2200      	movs	r2, #0
 8007d5a:	6462      	str	r2, [r4, #68]	; 0x44
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	f102 0014 	add.w	r0, r2, #20
 8007d62:	4298      	cmp	r0, r3
 8007d64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007d66:	d920      	bls.n	8007daa <_dtoa_r+0x2aa>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f001 fbad 	bl	80094c8 <_Balloc>
 8007d6e:	9001      	str	r0, [sp, #4]
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d13d      	bne.n	8007df0 <_dtoa_r+0x2f0>
 8007d74:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <_dtoa_r+0x2e8>)
 8007d76:	4602      	mov	r2, r0
 8007d78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d7c:	481b      	ldr	r0, [pc, #108]	; (8007dec <_dtoa_r+0x2ec>)
 8007d7e:	f002 f965 	bl	800a04c <__assert_func>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7de      	b.n	8007d44 <_dtoa_r+0x244>
 8007d86:	2501      	movs	r5, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9306      	str	r3, [sp, #24]
 8007d8c:	9508      	str	r5, [sp, #32]
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	2312      	movs	r3, #18
 8007d9a:	e7ce      	b.n	8007d3a <_dtoa_r+0x23a>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	9308      	str	r3, [sp, #32]
 8007da0:	e7f5      	b.n	8007d8e <_dtoa_r+0x28e>
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da8:	e7d6      	b.n	8007d58 <_dtoa_r+0x258>
 8007daa:	3101      	adds	r1, #1
 8007dac:	6461      	str	r1, [r4, #68]	; 0x44
 8007dae:	0052      	lsls	r2, r2, #1
 8007db0:	e7d5      	b.n	8007d5e <_dtoa_r+0x25e>
 8007db2:	bf00      	nop
 8007db4:	f3af 8000 	nop.w
 8007db8:	636f4361 	.word	0x636f4361
 8007dbc:	3fd287a7 	.word	0x3fd287a7
 8007dc0:	8b60c8b3 	.word	0x8b60c8b3
 8007dc4:	3fc68a28 	.word	0x3fc68a28
 8007dc8:	509f79fb 	.word	0x509f79fb
 8007dcc:	3fd34413 	.word	0x3fd34413
 8007dd0:	7ff00000 	.word	0x7ff00000
 8007dd4:	0800bdbd 	.word	0x0800bdbd
 8007dd8:	0800bdc1 	.word	0x0800bdc1
 8007ddc:	0800bc9b 	.word	0x0800bc9b
 8007de0:	3ff80000 	.word	0x3ff80000
 8007de4:	0800bf38 	.word	0x0800bf38
 8007de8:	0800bdca 	.word	0x0800bdca
 8007dec:	0800bddb 	.word	0x0800bddb
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	6423      	str	r3, [r4, #64]	; 0x40
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	2b0e      	cmp	r3, #14
 8007df8:	f200 809d 	bhi.w	8007f36 <_dtoa_r+0x436>
 8007dfc:	2d00      	cmp	r5, #0
 8007dfe:	f000 809a 	beq.w	8007f36 <_dtoa_r+0x436>
 8007e02:	9b00      	ldr	r3, [sp, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd32      	ble.n	8007e6e <_dtoa_r+0x36e>
 8007e08:	4ab7      	ldr	r2, [pc, #732]	; (80080e8 <_dtoa_r+0x5e8>)
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e16:	9b00      	ldr	r3, [sp, #0]
 8007e18:	05d8      	lsls	r0, r3, #23
 8007e1a:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e1e:	d516      	bpl.n	8007e4e <_dtoa_r+0x34e>
 8007e20:	4bb2      	ldr	r3, [pc, #712]	; (80080ec <_dtoa_r+0x5ec>)
 8007e22:	ec51 0b19 	vmov	r0, r1, d9
 8007e26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e2a:	f7f8 fd1f 	bl	800086c <__aeabi_ddiv>
 8007e2e:	f007 070f 	and.w	r7, r7, #15
 8007e32:	4682      	mov	sl, r0
 8007e34:	468b      	mov	fp, r1
 8007e36:	2503      	movs	r5, #3
 8007e38:	4eac      	ldr	r6, [pc, #688]	; (80080ec <_dtoa_r+0x5ec>)
 8007e3a:	b957      	cbnz	r7, 8007e52 <_dtoa_r+0x352>
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	4650      	mov	r0, sl
 8007e42:	4659      	mov	r1, fp
 8007e44:	f7f8 fd12 	bl	800086c <__aeabi_ddiv>
 8007e48:	4682      	mov	sl, r0
 8007e4a:	468b      	mov	fp, r1
 8007e4c:	e028      	b.n	8007ea0 <_dtoa_r+0x3a0>
 8007e4e:	2502      	movs	r5, #2
 8007e50:	e7f2      	b.n	8007e38 <_dtoa_r+0x338>
 8007e52:	07f9      	lsls	r1, r7, #31
 8007e54:	d508      	bpl.n	8007e68 <_dtoa_r+0x368>
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e5e:	f7f8 fbdb 	bl	8000618 <__aeabi_dmul>
 8007e62:	3501      	adds	r5, #1
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	107f      	asrs	r7, r7, #1
 8007e6a:	3608      	adds	r6, #8
 8007e6c:	e7e5      	b.n	8007e3a <_dtoa_r+0x33a>
 8007e6e:	f000 809b 	beq.w	8007fa8 <_dtoa_r+0x4a8>
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	4f9d      	ldr	r7, [pc, #628]	; (80080ec <_dtoa_r+0x5ec>)
 8007e76:	425e      	negs	r6, r3
 8007e78:	4b9b      	ldr	r3, [pc, #620]	; (80080e8 <_dtoa_r+0x5e8>)
 8007e7a:	f006 020f 	and.w	r2, r6, #15
 8007e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	ec51 0b19 	vmov	r0, r1, d9
 8007e8a:	f7f8 fbc5 	bl	8000618 <__aeabi_dmul>
 8007e8e:	1136      	asrs	r6, r6, #4
 8007e90:	4682      	mov	sl, r0
 8007e92:	468b      	mov	fp, r1
 8007e94:	2300      	movs	r3, #0
 8007e96:	2502      	movs	r5, #2
 8007e98:	2e00      	cmp	r6, #0
 8007e9a:	d17a      	bne.n	8007f92 <_dtoa_r+0x492>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1d3      	bne.n	8007e48 <_dtoa_r+0x348>
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8082 	beq.w	8007fac <_dtoa_r+0x4ac>
 8007ea8:	4b91      	ldr	r3, [pc, #580]	; (80080f0 <_dtoa_r+0x5f0>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4650      	mov	r0, sl
 8007eae:	4659      	mov	r1, fp
 8007eb0:	f7f8 fe24 	bl	8000afc <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d079      	beq.n	8007fac <_dtoa_r+0x4ac>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d076      	beq.n	8007fac <_dtoa_r+0x4ac>
 8007ebe:	9b02      	ldr	r3, [sp, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dd36      	ble.n	8007f32 <_dtoa_r+0x432>
 8007ec4:	9b00      	ldr	r3, [sp, #0]
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	4659      	mov	r1, fp
 8007eca:	1e5f      	subs	r7, r3, #1
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4b89      	ldr	r3, [pc, #548]	; (80080f4 <_dtoa_r+0x5f4>)
 8007ed0:	f7f8 fba2 	bl	8000618 <__aeabi_dmul>
 8007ed4:	9e02      	ldr	r6, [sp, #8]
 8007ed6:	4682      	mov	sl, r0
 8007ed8:	468b      	mov	fp, r1
 8007eda:	3501      	adds	r5, #1
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7f8 fb31 	bl	8000544 <__aeabi_i2d>
 8007ee2:	4652      	mov	r2, sl
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	f7f8 fb97 	bl	8000618 <__aeabi_dmul>
 8007eea:	4b83      	ldr	r3, [pc, #524]	; (80080f8 <_dtoa_r+0x5f8>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	f7f8 f9dd 	bl	80002ac <__adddf3>
 8007ef2:	46d0      	mov	r8, sl
 8007ef4:	46d9      	mov	r9, fp
 8007ef6:	4682      	mov	sl, r0
 8007ef8:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007efc:	2e00      	cmp	r6, #0
 8007efe:	d158      	bne.n	8007fb2 <_dtoa_r+0x4b2>
 8007f00:	4b7e      	ldr	r3, [pc, #504]	; (80080fc <_dtoa_r+0x5fc>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 f9ce 	bl	80002a8 <__aeabi_dsub>
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	465b      	mov	r3, fp
 8007f10:	4680      	mov	r8, r0
 8007f12:	4689      	mov	r9, r1
 8007f14:	f7f8 fe10 	bl	8000b38 <__aeabi_dcmpgt>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f040 8296 	bne.w	800844a <_dtoa_r+0x94a>
 8007f1e:	4652      	mov	r2, sl
 8007f20:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f24:	4640      	mov	r0, r8
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 fde8 	bl	8000afc <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 828a 	bne.w	8008446 <_dtoa_r+0x946>
 8007f32:	ec5b ab19 	vmov	sl, fp, d9
 8007f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f2c0 8149 	blt.w	80081d0 <_dtoa_r+0x6d0>
 8007f3e:	9a00      	ldr	r2, [sp, #0]
 8007f40:	2a0e      	cmp	r2, #14
 8007f42:	f300 8145 	bgt.w	80081d0 <_dtoa_r+0x6d0>
 8007f46:	4b68      	ldr	r3, [pc, #416]	; (80080e8 <_dtoa_r+0x5e8>)
 8007f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f280 80d6 	bge.w	8008104 <_dtoa_r+0x604>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f300 80d2 	bgt.w	8008104 <_dtoa_r+0x604>
 8007f60:	f040 8270 	bne.w	8008444 <_dtoa_r+0x944>
 8007f64:	4b65      	ldr	r3, [pc, #404]	; (80080fc <_dtoa_r+0x5fc>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 fb54 	bl	8000618 <__aeabi_dmul>
 8007f70:	4652      	mov	r2, sl
 8007f72:	465b      	mov	r3, fp
 8007f74:	f7f8 fdd6 	bl	8000b24 <__aeabi_dcmpge>
 8007f78:	9e03      	ldr	r6, [sp, #12]
 8007f7a:	4637      	mov	r7, r6
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 8246 	bne.w	800840e <_dtoa_r+0x90e>
 8007f82:	9d01      	ldr	r5, [sp, #4]
 8007f84:	2331      	movs	r3, #49	; 0x31
 8007f86:	f805 3b01 	strb.w	r3, [r5], #1
 8007f8a:	9b00      	ldr	r3, [sp, #0]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	e241      	b.n	8008416 <_dtoa_r+0x916>
 8007f92:	07f2      	lsls	r2, r6, #31
 8007f94:	d505      	bpl.n	8007fa2 <_dtoa_r+0x4a2>
 8007f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9a:	f7f8 fb3d 	bl	8000618 <__aeabi_dmul>
 8007f9e:	3501      	adds	r5, #1
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	1076      	asrs	r6, r6, #1
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	e777      	b.n	8007e98 <_dtoa_r+0x398>
 8007fa8:	2502      	movs	r5, #2
 8007faa:	e779      	b.n	8007ea0 <_dtoa_r+0x3a0>
 8007fac:	9f00      	ldr	r7, [sp, #0]
 8007fae:	9e03      	ldr	r6, [sp, #12]
 8007fb0:	e794      	b.n	8007edc <_dtoa_r+0x3dc>
 8007fb2:	9901      	ldr	r1, [sp, #4]
 8007fb4:	4b4c      	ldr	r3, [pc, #304]	; (80080e8 <_dtoa_r+0x5e8>)
 8007fb6:	4431      	add	r1, r6
 8007fb8:	910d      	str	r1, [sp, #52]	; 0x34
 8007fba:	9908      	ldr	r1, [sp, #32]
 8007fbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d043      	beq.n	8008050 <_dtoa_r+0x550>
 8007fc8:	494d      	ldr	r1, [pc, #308]	; (8008100 <_dtoa_r+0x600>)
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f7f8 fc4e 	bl	800086c <__aeabi_ddiv>
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	f7f8 f968 	bl	80002a8 <__aeabi_dsub>
 8007fd8:	9d01      	ldr	r5, [sp, #4]
 8007fda:	4682      	mov	sl, r0
 8007fdc:	468b      	mov	fp, r1
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	f7f8 fdc9 	bl	8000b78 <__aeabi_d2iz>
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	f7f8 faac 	bl	8000544 <__aeabi_i2d>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 f958 	bl	80002a8 <__aeabi_dsub>
 8007ff8:	3630      	adds	r6, #48	; 0x30
 8007ffa:	f805 6b01 	strb.w	r6, [r5], #1
 8007ffe:	4652      	mov	r2, sl
 8008000:	465b      	mov	r3, fp
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	f7f8 fd79 	bl	8000afc <__aeabi_dcmplt>
 800800a:	2800      	cmp	r0, #0
 800800c:	d163      	bne.n	80080d6 <_dtoa_r+0x5d6>
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	4937      	ldr	r1, [pc, #220]	; (80080f0 <_dtoa_r+0x5f0>)
 8008014:	2000      	movs	r0, #0
 8008016:	f7f8 f947 	bl	80002a8 <__aeabi_dsub>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 fd6d 	bl	8000afc <__aeabi_dcmplt>
 8008022:	2800      	cmp	r0, #0
 8008024:	f040 80b6 	bne.w	8008194 <_dtoa_r+0x694>
 8008028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800802a:	429d      	cmp	r5, r3
 800802c:	d081      	beq.n	8007f32 <_dtoa_r+0x432>
 800802e:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <_dtoa_r+0x5f4>)
 8008030:	2200      	movs	r2, #0
 8008032:	4650      	mov	r0, sl
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 faef 	bl	8000618 <__aeabi_dmul>
 800803a:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <_dtoa_r+0x5f4>)
 800803c:	4682      	mov	sl, r0
 800803e:	468b      	mov	fp, r1
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	2200      	movs	r2, #0
 8008046:	f7f8 fae7 	bl	8000618 <__aeabi_dmul>
 800804a:	4680      	mov	r8, r0
 800804c:	4689      	mov	r9, r1
 800804e:	e7c6      	b.n	8007fde <_dtoa_r+0x4de>
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 fae0 	bl	8000618 <__aeabi_dmul>
 8008058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800805a:	9d01      	ldr	r5, [sp, #4]
 800805c:	930f      	str	r3, [sp, #60]	; 0x3c
 800805e:	4682      	mov	sl, r0
 8008060:	468b      	mov	fp, r1
 8008062:	4649      	mov	r1, r9
 8008064:	4640      	mov	r0, r8
 8008066:	f7f8 fd87 	bl	8000b78 <__aeabi_d2iz>
 800806a:	4606      	mov	r6, r0
 800806c:	f7f8 fa6a 	bl	8000544 <__aeabi_i2d>
 8008070:	3630      	adds	r6, #48	; 0x30
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	f7f8 f915 	bl	80002a8 <__aeabi_dsub>
 800807e:	f805 6b01 	strb.w	r6, [r5], #1
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	429d      	cmp	r5, r3
 8008086:	4680      	mov	r8, r0
 8008088:	4689      	mov	r9, r1
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	d124      	bne.n	80080da <_dtoa_r+0x5da>
 8008090:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <_dtoa_r+0x600>)
 8008092:	4650      	mov	r0, sl
 8008094:	4659      	mov	r1, fp
 8008096:	f7f8 f909 	bl	80002ac <__adddf3>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd49 	bl	8000b38 <__aeabi_dcmpgt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d174      	bne.n	8008194 <_dtoa_r+0x694>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	4914      	ldr	r1, [pc, #80]	; (8008100 <_dtoa_r+0x600>)
 80080b0:	2000      	movs	r0, #0
 80080b2:	f7f8 f8f9 	bl	80002a8 <__aeabi_dsub>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4640      	mov	r0, r8
 80080bc:	4649      	mov	r1, r9
 80080be:	f7f8 fd1d 	bl	8000afc <__aeabi_dcmplt>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f43f af35 	beq.w	8007f32 <_dtoa_r+0x432>
 80080c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080ca:	1e6b      	subs	r3, r5, #1
 80080cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080d2:	2b30      	cmp	r3, #48	; 0x30
 80080d4:	d0f8      	beq.n	80080c8 <_dtoa_r+0x5c8>
 80080d6:	9700      	str	r7, [sp, #0]
 80080d8:	e04a      	b.n	8008170 <_dtoa_r+0x670>
 80080da:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <_dtoa_r+0x5f4>)
 80080dc:	f7f8 fa9c 	bl	8000618 <__aeabi_dmul>
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	e7bd      	b.n	8008062 <_dtoa_r+0x562>
 80080e6:	bf00      	nop
 80080e8:	0800bf38 	.word	0x0800bf38
 80080ec:	0800bf10 	.word	0x0800bf10
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	40240000 	.word	0x40240000
 80080f8:	401c0000 	.word	0x401c0000
 80080fc:	40140000 	.word	0x40140000
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	9d01      	ldr	r5, [sp, #4]
 8008106:	4656      	mov	r6, sl
 8008108:	465f      	mov	r7, fp
 800810a:	4642      	mov	r2, r8
 800810c:	464b      	mov	r3, r9
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 fbab 	bl	800086c <__aeabi_ddiv>
 8008116:	f7f8 fd2f 	bl	8000b78 <__aeabi_d2iz>
 800811a:	4682      	mov	sl, r0
 800811c:	f7f8 fa12 	bl	8000544 <__aeabi_i2d>
 8008120:	4642      	mov	r2, r8
 8008122:	464b      	mov	r3, r9
 8008124:	f7f8 fa78 	bl	8000618 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008134:	f7f8 f8b8 	bl	80002a8 <__aeabi_dsub>
 8008138:	f805 6b01 	strb.w	r6, [r5], #1
 800813c:	9e01      	ldr	r6, [sp, #4]
 800813e:	9f03      	ldr	r7, [sp, #12]
 8008140:	1bae      	subs	r6, r5, r6
 8008142:	42b7      	cmp	r7, r6
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	d135      	bne.n	80081b6 <_dtoa_r+0x6b6>
 800814a:	f7f8 f8af 	bl	80002ac <__adddf3>
 800814e:	4642      	mov	r2, r8
 8008150:	464b      	mov	r3, r9
 8008152:	4606      	mov	r6, r0
 8008154:	460f      	mov	r7, r1
 8008156:	f7f8 fcef 	bl	8000b38 <__aeabi_dcmpgt>
 800815a:	b9d0      	cbnz	r0, 8008192 <_dtoa_r+0x692>
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fcc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008168:	b110      	cbz	r0, 8008170 <_dtoa_r+0x670>
 800816a:	f01a 0f01 	tst.w	sl, #1
 800816e:	d110      	bne.n	8008192 <_dtoa_r+0x692>
 8008170:	4620      	mov	r0, r4
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	f001 f9cc 	bl	8009512 <_Bfree>
 800817a:	2300      	movs	r3, #0
 800817c:	9800      	ldr	r0, [sp, #0]
 800817e:	702b      	strb	r3, [r5, #0]
 8008180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008182:	3001      	adds	r0, #1
 8008184:	6018      	str	r0, [r3, #0]
 8008186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008188:	2b00      	cmp	r3, #0
 800818a:	f43f acf2 	beq.w	8007b72 <_dtoa_r+0x72>
 800818e:	601d      	str	r5, [r3, #0]
 8008190:	e4ef      	b.n	8007b72 <_dtoa_r+0x72>
 8008192:	9f00      	ldr	r7, [sp, #0]
 8008194:	462b      	mov	r3, r5
 8008196:	461d      	mov	r5, r3
 8008198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819c:	2a39      	cmp	r2, #57	; 0x39
 800819e:	d106      	bne.n	80081ae <_dtoa_r+0x6ae>
 80081a0:	9a01      	ldr	r2, [sp, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d1f7      	bne.n	8008196 <_dtoa_r+0x696>
 80081a6:	9901      	ldr	r1, [sp, #4]
 80081a8:	2230      	movs	r2, #48	; 0x30
 80081aa:	3701      	adds	r7, #1
 80081ac:	700a      	strb	r2, [r1, #0]
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	3201      	adds	r2, #1
 80081b2:	701a      	strb	r2, [r3, #0]
 80081b4:	e78f      	b.n	80080d6 <_dtoa_r+0x5d6>
 80081b6:	4ba6      	ldr	r3, [pc, #664]	; (8008450 <_dtoa_r+0x950>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	f7f8 fa2d 	bl	8000618 <__aeabi_dmul>
 80081be:	2200      	movs	r2, #0
 80081c0:	2300      	movs	r3, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	f7f8 fc8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d09d      	beq.n	800810a <_dtoa_r+0x60a>
 80081ce:	e7cf      	b.n	8008170 <_dtoa_r+0x670>
 80081d0:	9a08      	ldr	r2, [sp, #32]
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	f000 80d7 	beq.w	8008386 <_dtoa_r+0x886>
 80081d8:	9a06      	ldr	r2, [sp, #24]
 80081da:	2a01      	cmp	r2, #1
 80081dc:	f300 80ba 	bgt.w	8008354 <_dtoa_r+0x854>
 80081e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	f000 80b2 	beq.w	800834c <_dtoa_r+0x84c>
 80081e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ec:	9e07      	ldr	r6, [sp, #28]
 80081ee:	9d04      	ldr	r5, [sp, #16]
 80081f0:	9a04      	ldr	r2, [sp, #16]
 80081f2:	441a      	add	r2, r3
 80081f4:	9204      	str	r2, [sp, #16]
 80081f6:	9a05      	ldr	r2, [sp, #20]
 80081f8:	2101      	movs	r1, #1
 80081fa:	441a      	add	r2, r3
 80081fc:	4620      	mov	r0, r4
 80081fe:	9205      	str	r2, [sp, #20]
 8008200:	f001 fa70 	bl	80096e4 <__i2b>
 8008204:	4607      	mov	r7, r0
 8008206:	2d00      	cmp	r5, #0
 8008208:	dd0c      	ble.n	8008224 <_dtoa_r+0x724>
 800820a:	9b05      	ldr	r3, [sp, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd09      	ble.n	8008224 <_dtoa_r+0x724>
 8008210:	42ab      	cmp	r3, r5
 8008212:	9a04      	ldr	r2, [sp, #16]
 8008214:	bfa8      	it	ge
 8008216:	462b      	movge	r3, r5
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	9204      	str	r2, [sp, #16]
 800821c:	9a05      	ldr	r2, [sp, #20]
 800821e:	1aed      	subs	r5, r5, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	b31b      	cbz	r3, 8008270 <_dtoa_r+0x770>
 8008228:	9b08      	ldr	r3, [sp, #32]
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 80af 	beq.w	800838e <_dtoa_r+0x88e>
 8008230:	2e00      	cmp	r6, #0
 8008232:	dd13      	ble.n	800825c <_dtoa_r+0x75c>
 8008234:	4639      	mov	r1, r7
 8008236:	4632      	mov	r2, r6
 8008238:	4620      	mov	r0, r4
 800823a:	f001 fb13 	bl	8009864 <__pow5mult>
 800823e:	ee18 2a10 	vmov	r2, s16
 8008242:	4601      	mov	r1, r0
 8008244:	4607      	mov	r7, r0
 8008246:	4620      	mov	r0, r4
 8008248:	f001 fa62 	bl	8009710 <__multiply>
 800824c:	ee18 1a10 	vmov	r1, s16
 8008250:	4680      	mov	r8, r0
 8008252:	4620      	mov	r0, r4
 8008254:	f001 f95d 	bl	8009512 <_Bfree>
 8008258:	ee08 8a10 	vmov	s16, r8
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	1b9a      	subs	r2, r3, r6
 8008260:	d006      	beq.n	8008270 <_dtoa_r+0x770>
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	4620      	mov	r0, r4
 8008268:	f001 fafc 	bl	8009864 <__pow5mult>
 800826c:	ee08 0a10 	vmov	s16, r0
 8008270:	2101      	movs	r1, #1
 8008272:	4620      	mov	r0, r4
 8008274:	f001 fa36 	bl	80096e4 <__i2b>
 8008278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	4606      	mov	r6, r0
 800827e:	f340 8088 	ble.w	8008392 <_dtoa_r+0x892>
 8008282:	461a      	mov	r2, r3
 8008284:	4601      	mov	r1, r0
 8008286:	4620      	mov	r0, r4
 8008288:	f001 faec 	bl	8009864 <__pow5mult>
 800828c:	9b06      	ldr	r3, [sp, #24]
 800828e:	2b01      	cmp	r3, #1
 8008290:	4606      	mov	r6, r0
 8008292:	f340 8081 	ble.w	8008398 <_dtoa_r+0x898>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	6933      	ldr	r3, [r6, #16]
 800829c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082a0:	6918      	ldr	r0, [r3, #16]
 80082a2:	f001 f9cf 	bl	8009644 <__hi0bits>
 80082a6:	f1c0 0020 	rsb	r0, r0, #32
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	4418      	add	r0, r3
 80082ae:	f010 001f 	ands.w	r0, r0, #31
 80082b2:	f000 8092 	beq.w	80083da <_dtoa_r+0x8da>
 80082b6:	f1c0 0320 	rsb	r3, r0, #32
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	f340 808a 	ble.w	80083d4 <_dtoa_r+0x8d4>
 80082c0:	f1c0 001c 	rsb	r0, r0, #28
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	4403      	add	r3, r0
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	9b05      	ldr	r3, [sp, #20]
 80082cc:	4403      	add	r3, r0
 80082ce:	4405      	add	r5, r0
 80082d0:	9305      	str	r3, [sp, #20]
 80082d2:	9b04      	ldr	r3, [sp, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dd07      	ble.n	80082e8 <_dtoa_r+0x7e8>
 80082d8:	ee18 1a10 	vmov	r1, s16
 80082dc:	461a      	mov	r2, r3
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 fb00 	bl	80098e4 <__lshift>
 80082e4:	ee08 0a10 	vmov	s16, r0
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dd05      	ble.n	80082fa <_dtoa_r+0x7fa>
 80082ee:	4631      	mov	r1, r6
 80082f0:	461a      	mov	r2, r3
 80082f2:	4620      	mov	r0, r4
 80082f4:	f001 faf6 	bl	80098e4 <__lshift>
 80082f8:	4606      	mov	r6, r0
 80082fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d06e      	beq.n	80083de <_dtoa_r+0x8de>
 8008300:	ee18 0a10 	vmov	r0, s16
 8008304:	4631      	mov	r1, r6
 8008306:	f001 fb5d 	bl	80099c4 <__mcmp>
 800830a:	2800      	cmp	r0, #0
 800830c:	da67      	bge.n	80083de <_dtoa_r+0x8de>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	3b01      	subs	r3, #1
 8008312:	ee18 1a10 	vmov	r1, s16
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	220a      	movs	r2, #10
 800831a:	2300      	movs	r3, #0
 800831c:	4620      	mov	r0, r4
 800831e:	f001 f901 	bl	8009524 <__multadd>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	ee08 0a10 	vmov	s16, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 81b0 	beq.w	800868e <_dtoa_r+0xb8e>
 800832e:	2300      	movs	r3, #0
 8008330:	4639      	mov	r1, r7
 8008332:	220a      	movs	r2, #10
 8008334:	4620      	mov	r0, r4
 8008336:	f001 f8f5 	bl	8009524 <__multadd>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	4607      	mov	r7, r0
 8008340:	f300 808e 	bgt.w	8008460 <_dtoa_r+0x960>
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	2b02      	cmp	r3, #2
 8008348:	dc51      	bgt.n	80083ee <_dtoa_r+0x8ee>
 800834a:	e089      	b.n	8008460 <_dtoa_r+0x960>
 800834c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800834e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008352:	e74b      	b.n	80081ec <_dtoa_r+0x6ec>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1e5e      	subs	r6, r3, #1
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	42b3      	cmp	r3, r6
 800835c:	bfbf      	itttt	lt
 800835e:	9b07      	ldrlt	r3, [sp, #28]
 8008360:	9607      	strlt	r6, [sp, #28]
 8008362:	1af2      	sublt	r2, r6, r3
 8008364:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008366:	bfb6      	itet	lt
 8008368:	189b      	addlt	r3, r3, r2
 800836a:	1b9e      	subge	r6, r3, r6
 800836c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	bfb8      	it	lt
 8008372:	2600      	movlt	r6, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfb7      	itett	lt
 8008378:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800837c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008380:	1a9d      	sublt	r5, r3, r2
 8008382:	2300      	movlt	r3, #0
 8008384:	e734      	b.n	80081f0 <_dtoa_r+0x6f0>
 8008386:	9e07      	ldr	r6, [sp, #28]
 8008388:	9d04      	ldr	r5, [sp, #16]
 800838a:	9f08      	ldr	r7, [sp, #32]
 800838c:	e73b      	b.n	8008206 <_dtoa_r+0x706>
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	e767      	b.n	8008262 <_dtoa_r+0x762>
 8008392:	9b06      	ldr	r3, [sp, #24]
 8008394:	2b01      	cmp	r3, #1
 8008396:	dc18      	bgt.n	80083ca <_dtoa_r+0x8ca>
 8008398:	f1ba 0f00 	cmp.w	sl, #0
 800839c:	d115      	bne.n	80083ca <_dtoa_r+0x8ca>
 800839e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083a2:	b993      	cbnz	r3, 80083ca <_dtoa_r+0x8ca>
 80083a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083a8:	0d1b      	lsrs	r3, r3, #20
 80083aa:	051b      	lsls	r3, r3, #20
 80083ac:	b183      	cbz	r3, 80083d0 <_dtoa_r+0x8d0>
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	3301      	adds	r3, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	3301      	adds	r3, #1
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	f04f 0801 	mov.w	r8, #1
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af6a 	bne.w	800829a <_dtoa_r+0x79a>
 80083c6:	2001      	movs	r0, #1
 80083c8:	e76f      	b.n	80082aa <_dtoa_r+0x7aa>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	e7f6      	b.n	80083be <_dtoa_r+0x8be>
 80083d0:	4698      	mov	r8, r3
 80083d2:	e7f4      	b.n	80083be <_dtoa_r+0x8be>
 80083d4:	f43f af7d 	beq.w	80082d2 <_dtoa_r+0x7d2>
 80083d8:	4618      	mov	r0, r3
 80083da:	301c      	adds	r0, #28
 80083dc:	e772      	b.n	80082c4 <_dtoa_r+0x7c4>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc37      	bgt.n	8008454 <_dtoa_r+0x954>
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	dd34      	ble.n	8008454 <_dtoa_r+0x954>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	9302      	str	r3, [sp, #8]
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	b96b      	cbnz	r3, 800840e <_dtoa_r+0x90e>
 80083f2:	4631      	mov	r1, r6
 80083f4:	2205      	movs	r2, #5
 80083f6:	4620      	mov	r0, r4
 80083f8:	f001 f894 	bl	8009524 <__multadd>
 80083fc:	4601      	mov	r1, r0
 80083fe:	4606      	mov	r6, r0
 8008400:	ee18 0a10 	vmov	r0, s16
 8008404:	f001 fade 	bl	80099c4 <__mcmp>
 8008408:	2800      	cmp	r0, #0
 800840a:	f73f adba 	bgt.w	8007f82 <_dtoa_r+0x482>
 800840e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008410:	9d01      	ldr	r5, [sp, #4]
 8008412:	43db      	mvns	r3, r3
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	f04f 0800 	mov.w	r8, #0
 800841a:	4631      	mov	r1, r6
 800841c:	4620      	mov	r0, r4
 800841e:	f001 f878 	bl	8009512 <_Bfree>
 8008422:	2f00      	cmp	r7, #0
 8008424:	f43f aea4 	beq.w	8008170 <_dtoa_r+0x670>
 8008428:	f1b8 0f00 	cmp.w	r8, #0
 800842c:	d005      	beq.n	800843a <_dtoa_r+0x93a>
 800842e:	45b8      	cmp	r8, r7
 8008430:	d003      	beq.n	800843a <_dtoa_r+0x93a>
 8008432:	4641      	mov	r1, r8
 8008434:	4620      	mov	r0, r4
 8008436:	f001 f86c 	bl	8009512 <_Bfree>
 800843a:	4639      	mov	r1, r7
 800843c:	4620      	mov	r0, r4
 800843e:	f001 f868 	bl	8009512 <_Bfree>
 8008442:	e695      	b.n	8008170 <_dtoa_r+0x670>
 8008444:	2600      	movs	r6, #0
 8008446:	4637      	mov	r7, r6
 8008448:	e7e1      	b.n	800840e <_dtoa_r+0x90e>
 800844a:	9700      	str	r7, [sp, #0]
 800844c:	4637      	mov	r7, r6
 800844e:	e598      	b.n	8007f82 <_dtoa_r+0x482>
 8008450:	40240000 	.word	0x40240000
 8008454:	9b08      	ldr	r3, [sp, #32]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80c9 	beq.w	80085ee <_dtoa_r+0xaee>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	9302      	str	r3, [sp, #8]
 8008460:	2d00      	cmp	r5, #0
 8008462:	dd05      	ble.n	8008470 <_dtoa_r+0x970>
 8008464:	4639      	mov	r1, r7
 8008466:	462a      	mov	r2, r5
 8008468:	4620      	mov	r0, r4
 800846a:	f001 fa3b 	bl	80098e4 <__lshift>
 800846e:	4607      	mov	r7, r0
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	d05a      	beq.n	800852c <_dtoa_r+0xa2c>
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4620      	mov	r0, r4
 800847a:	f001 f825 	bl	80094c8 <_Balloc>
 800847e:	4605      	mov	r5, r0
 8008480:	b920      	cbnz	r0, 800848c <_dtoa_r+0x98c>
 8008482:	4b87      	ldr	r3, [pc, #540]	; (80086a0 <_dtoa_r+0xba0>)
 8008484:	4602      	mov	r2, r0
 8008486:	f240 21ea 	movw	r1, #746	; 0x2ea
 800848a:	e477      	b.n	8007d7c <_dtoa_r+0x27c>
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	3202      	adds	r2, #2
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	f107 010c 	add.w	r1, r7, #12
 8008496:	300c      	adds	r0, #12
 8008498:	f000 fffc 	bl	8009494 <memcpy>
 800849c:	2201      	movs	r2, #1
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 fa1f 	bl	80098e4 <__lshift>
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	f103 0901 	add.w	r9, r3, #1
 80084ac:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	f00a 0301 	and.w	r3, sl, #1
 80084b8:	46b8      	mov	r8, r7
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	4607      	mov	r7, r0
 80084be:	4631      	mov	r1, r6
 80084c0:	ee18 0a10 	vmov	r0, s16
 80084c4:	f7ff fa90 	bl	80079e8 <quorem>
 80084c8:	4641      	mov	r1, r8
 80084ca:	9002      	str	r0, [sp, #8]
 80084cc:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084d0:	ee18 0a10 	vmov	r0, s16
 80084d4:	f001 fa76 	bl	80099c4 <__mcmp>
 80084d8:	463a      	mov	r2, r7
 80084da:	9003      	str	r0, [sp, #12]
 80084dc:	4631      	mov	r1, r6
 80084de:	4620      	mov	r0, r4
 80084e0:	f001 fa8c 	bl	80099fc <__mdiff>
 80084e4:	68c2      	ldr	r2, [r0, #12]
 80084e6:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80084ea:	4605      	mov	r5, r0
 80084ec:	bb02      	cbnz	r2, 8008530 <_dtoa_r+0xa30>
 80084ee:	4601      	mov	r1, r0
 80084f0:	ee18 0a10 	vmov	r0, s16
 80084f4:	f001 fa66 	bl	80099c4 <__mcmp>
 80084f8:	4602      	mov	r2, r0
 80084fa:	4629      	mov	r1, r5
 80084fc:	4620      	mov	r0, r4
 80084fe:	9207      	str	r2, [sp, #28]
 8008500:	f001 f807 	bl	8009512 <_Bfree>
 8008504:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008508:	ea43 0102 	orr.w	r1, r3, r2
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	430b      	orrs	r3, r1
 8008510:	464d      	mov	r5, r9
 8008512:	d10f      	bne.n	8008534 <_dtoa_r+0xa34>
 8008514:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008518:	d02a      	beq.n	8008570 <_dtoa_r+0xa70>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd02      	ble.n	8008526 <_dtoa_r+0xa26>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008526:	f88b a000 	strb.w	sl, [fp]
 800852a:	e776      	b.n	800841a <_dtoa_r+0x91a>
 800852c:	4638      	mov	r0, r7
 800852e:	e7ba      	b.n	80084a6 <_dtoa_r+0x9a6>
 8008530:	2201      	movs	r2, #1
 8008532:	e7e2      	b.n	80084fa <_dtoa_r+0x9fa>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	db04      	blt.n	8008544 <_dtoa_r+0xa44>
 800853a:	9906      	ldr	r1, [sp, #24]
 800853c:	430b      	orrs	r3, r1
 800853e:	9904      	ldr	r1, [sp, #16]
 8008540:	430b      	orrs	r3, r1
 8008542:	d122      	bne.n	800858a <_dtoa_r+0xa8a>
 8008544:	2a00      	cmp	r2, #0
 8008546:	ddee      	ble.n	8008526 <_dtoa_r+0xa26>
 8008548:	ee18 1a10 	vmov	r1, s16
 800854c:	2201      	movs	r2, #1
 800854e:	4620      	mov	r0, r4
 8008550:	f001 f9c8 	bl	80098e4 <__lshift>
 8008554:	4631      	mov	r1, r6
 8008556:	ee08 0a10 	vmov	s16, r0
 800855a:	f001 fa33 	bl	80099c4 <__mcmp>
 800855e:	2800      	cmp	r0, #0
 8008560:	dc03      	bgt.n	800856a <_dtoa_r+0xa6a>
 8008562:	d1e0      	bne.n	8008526 <_dtoa_r+0xa26>
 8008564:	f01a 0f01 	tst.w	sl, #1
 8008568:	d0dd      	beq.n	8008526 <_dtoa_r+0xa26>
 800856a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800856e:	d1d7      	bne.n	8008520 <_dtoa_r+0xa20>
 8008570:	2339      	movs	r3, #57	; 0x39
 8008572:	f88b 3000 	strb.w	r3, [fp]
 8008576:	462b      	mov	r3, r5
 8008578:	461d      	mov	r5, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008580:	2a39      	cmp	r2, #57	; 0x39
 8008582:	d071      	beq.n	8008668 <_dtoa_r+0xb68>
 8008584:	3201      	adds	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	e747      	b.n	800841a <_dtoa_r+0x91a>
 800858a:	2a00      	cmp	r2, #0
 800858c:	dd07      	ble.n	800859e <_dtoa_r+0xa9e>
 800858e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008592:	d0ed      	beq.n	8008570 <_dtoa_r+0xa70>
 8008594:	f10a 0301 	add.w	r3, sl, #1
 8008598:	f88b 3000 	strb.w	r3, [fp]
 800859c:	e73d      	b.n	800841a <_dtoa_r+0x91a>
 800859e:	9b05      	ldr	r3, [sp, #20]
 80085a0:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085a4:	4599      	cmp	r9, r3
 80085a6:	d047      	beq.n	8008638 <_dtoa_r+0xb38>
 80085a8:	ee18 1a10 	vmov	r1, s16
 80085ac:	2300      	movs	r3, #0
 80085ae:	220a      	movs	r2, #10
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 ffb7 	bl	8009524 <__multadd>
 80085b6:	45b8      	cmp	r8, r7
 80085b8:	ee08 0a10 	vmov	s16, r0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	f04f 020a 	mov.w	r2, #10
 80085c4:	4641      	mov	r1, r8
 80085c6:	4620      	mov	r0, r4
 80085c8:	d106      	bne.n	80085d8 <_dtoa_r+0xad8>
 80085ca:	f000 ffab 	bl	8009524 <__multadd>
 80085ce:	4680      	mov	r8, r0
 80085d0:	4607      	mov	r7, r0
 80085d2:	f109 0901 	add.w	r9, r9, #1
 80085d6:	e772      	b.n	80084be <_dtoa_r+0x9be>
 80085d8:	f000 ffa4 	bl	8009524 <__multadd>
 80085dc:	4639      	mov	r1, r7
 80085de:	4680      	mov	r8, r0
 80085e0:	2300      	movs	r3, #0
 80085e2:	220a      	movs	r2, #10
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 ff9d 	bl	8009524 <__multadd>
 80085ea:	4607      	mov	r7, r0
 80085ec:	e7f1      	b.n	80085d2 <_dtoa_r+0xad2>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	9302      	str	r3, [sp, #8]
 80085f2:	9d01      	ldr	r5, [sp, #4]
 80085f4:	ee18 0a10 	vmov	r0, s16
 80085f8:	4631      	mov	r1, r6
 80085fa:	f7ff f9f5 	bl	80079e8 <quorem>
 80085fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	f805 ab01 	strb.w	sl, [r5], #1
 8008608:	1aea      	subs	r2, r5, r3
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	4293      	cmp	r3, r2
 800860e:	dd09      	ble.n	8008624 <_dtoa_r+0xb24>
 8008610:	ee18 1a10 	vmov	r1, s16
 8008614:	2300      	movs	r3, #0
 8008616:	220a      	movs	r2, #10
 8008618:	4620      	mov	r0, r4
 800861a:	f000 ff83 	bl	8009524 <__multadd>
 800861e:	ee08 0a10 	vmov	s16, r0
 8008622:	e7e7      	b.n	80085f4 <_dtoa_r+0xaf4>
 8008624:	9b02      	ldr	r3, [sp, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfc8      	it	gt
 800862a:	461d      	movgt	r5, r3
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	bfd8      	it	le
 8008630:	2501      	movle	r5, #1
 8008632:	441d      	add	r5, r3
 8008634:	f04f 0800 	mov.w	r8, #0
 8008638:	ee18 1a10 	vmov	r1, s16
 800863c:	2201      	movs	r2, #1
 800863e:	4620      	mov	r0, r4
 8008640:	f001 f950 	bl	80098e4 <__lshift>
 8008644:	4631      	mov	r1, r6
 8008646:	ee08 0a10 	vmov	s16, r0
 800864a:	f001 f9bb 	bl	80099c4 <__mcmp>
 800864e:	2800      	cmp	r0, #0
 8008650:	dc91      	bgt.n	8008576 <_dtoa_r+0xa76>
 8008652:	d102      	bne.n	800865a <_dtoa_r+0xb5a>
 8008654:	f01a 0f01 	tst.w	sl, #1
 8008658:	d18d      	bne.n	8008576 <_dtoa_r+0xa76>
 800865a:	462b      	mov	r3, r5
 800865c:	461d      	mov	r5, r3
 800865e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008662:	2a30      	cmp	r2, #48	; 0x30
 8008664:	d0fa      	beq.n	800865c <_dtoa_r+0xb5c>
 8008666:	e6d8      	b.n	800841a <_dtoa_r+0x91a>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	429a      	cmp	r2, r3
 800866c:	d184      	bne.n	8008578 <_dtoa_r+0xa78>
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2331      	movs	r3, #49	; 0x31
 8008676:	7013      	strb	r3, [r2, #0]
 8008678:	e6cf      	b.n	800841a <_dtoa_r+0x91a>
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <_dtoa_r+0xba4>)
 800867c:	f7ff ba97 	b.w	8007bae <_dtoa_r+0xae>
 8008680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008682:	2b00      	cmp	r3, #0
 8008684:	f47f aa7b 	bne.w	8007b7e <_dtoa_r+0x7e>
 8008688:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <_dtoa_r+0xba8>)
 800868a:	f7ff ba90 	b.w	8007bae <_dtoa_r+0xae>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	dcae      	bgt.n	80085f2 <_dtoa_r+0xaf2>
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	2b02      	cmp	r3, #2
 8008698:	f73f aea9 	bgt.w	80083ee <_dtoa_r+0x8ee>
 800869c:	e7a9      	b.n	80085f2 <_dtoa_r+0xaf2>
 800869e:	bf00      	nop
 80086a0:	0800bdca 	.word	0x0800bdca
 80086a4:	0800bc9a 	.word	0x0800bc9a
 80086a8:	0800bdc1 	.word	0x0800bdc1

080086ac <__libc_fini_array>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	; (80086cc <__libc_fini_array+0x20>)
 80086b0:	4c07      	ldr	r4, [pc, #28]	; (80086d0 <__libc_fini_array+0x24>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	b91c      	cbnz	r4, 80086c0 <__libc_fini_array+0x14>
 80086b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086bc:	f003 b964 	b.w	800b988 <_fini>
 80086c0:	3c01      	subs	r4, #1
 80086c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80086c6:	4798      	blx	r3
 80086c8:	e7f5      	b.n	80086b6 <__libc_fini_array+0xa>
 80086ca:	bf00      	nop
 80086cc:	0800c078 	.word	0x0800c078
 80086d0:	0800c07c 	.word	0x0800c07c

080086d4 <_malloc_trim_r>:
 80086d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d8:	4606      	mov	r6, r0
 80086da:	2008      	movs	r0, #8
 80086dc:	460c      	mov	r4, r1
 80086de:	f001 fc59 	bl	8009f94 <sysconf>
 80086e2:	4f23      	ldr	r7, [pc, #140]	; (8008770 <_malloc_trim_r+0x9c>)
 80086e4:	4680      	mov	r8, r0
 80086e6:	4630      	mov	r0, r6
 80086e8:	f000 fee2 	bl	80094b0 <__malloc_lock>
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685d      	ldr	r5, [r3, #4]
 80086f0:	f025 0503 	bic.w	r5, r5, #3
 80086f4:	1b2c      	subs	r4, r5, r4
 80086f6:	3c11      	subs	r4, #17
 80086f8:	4444      	add	r4, r8
 80086fa:	fbb4 f4f8 	udiv	r4, r4, r8
 80086fe:	3c01      	subs	r4, #1
 8008700:	fb08 f404 	mul.w	r4, r8, r4
 8008704:	45a0      	cmp	r8, r4
 8008706:	dd05      	ble.n	8008714 <_malloc_trim_r+0x40>
 8008708:	4630      	mov	r0, r6
 800870a:	f000 fed7 	bl	80094bc <__malloc_unlock>
 800870e:	2000      	movs	r0, #0
 8008710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008714:	2100      	movs	r1, #0
 8008716:	4630      	mov	r0, r6
 8008718:	f001 fb8a 	bl	8009e30 <_sbrk_r>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	442b      	add	r3, r5
 8008720:	4298      	cmp	r0, r3
 8008722:	d1f1      	bne.n	8008708 <_malloc_trim_r+0x34>
 8008724:	4261      	negs	r1, r4
 8008726:	4630      	mov	r0, r6
 8008728:	f001 fb82 	bl	8009e30 <_sbrk_r>
 800872c:	3001      	adds	r0, #1
 800872e:	d110      	bne.n	8008752 <_malloc_trim_r+0x7e>
 8008730:	2100      	movs	r1, #0
 8008732:	4630      	mov	r0, r6
 8008734:	f001 fb7c 	bl	8009e30 <_sbrk_r>
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	1a83      	subs	r3, r0, r2
 800873c:	2b0f      	cmp	r3, #15
 800873e:	dde3      	ble.n	8008708 <_malloc_trim_r+0x34>
 8008740:	490c      	ldr	r1, [pc, #48]	; (8008774 <_malloc_trim_r+0xa0>)
 8008742:	6809      	ldr	r1, [r1, #0]
 8008744:	1a40      	subs	r0, r0, r1
 8008746:	490c      	ldr	r1, [pc, #48]	; (8008778 <_malloc_trim_r+0xa4>)
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	6008      	str	r0, [r1, #0]
 800874e:	6053      	str	r3, [r2, #4]
 8008750:	e7da      	b.n	8008708 <_malloc_trim_r+0x34>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <_malloc_trim_r+0xa4>)
 8008756:	1b2d      	subs	r5, r5, r4
 8008758:	f045 0501 	orr.w	r5, r5, #1
 800875c:	605d      	str	r5, [r3, #4]
 800875e:	6813      	ldr	r3, [r2, #0]
 8008760:	4630      	mov	r0, r6
 8008762:	1b1b      	subs	r3, r3, r4
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	f000 fea9 	bl	80094bc <__malloc_unlock>
 800876a:	2001      	movs	r0, #1
 800876c:	e7d0      	b.n	8008710 <_malloc_trim_r+0x3c>
 800876e:	bf00      	nop
 8008770:	200005b4 	.word	0x200005b4
 8008774:	200009bc 	.word	0x200009bc
 8008778:	20000bb0 	.word	0x20000bb0

0800877c <_free_r>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	4605      	mov	r5, r0
 8008780:	460f      	mov	r7, r1
 8008782:	2900      	cmp	r1, #0
 8008784:	f000 80b1 	beq.w	80088ea <_free_r+0x16e>
 8008788:	f000 fe92 	bl	80094b0 <__malloc_lock>
 800878c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008790:	4856      	ldr	r0, [pc, #344]	; (80088ec <_free_r+0x170>)
 8008792:	f022 0401 	bic.w	r4, r2, #1
 8008796:	f1a7 0308 	sub.w	r3, r7, #8
 800879a:	eb03 0c04 	add.w	ip, r3, r4
 800879e:	6881      	ldr	r1, [r0, #8]
 80087a0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80087a4:	4561      	cmp	r1, ip
 80087a6:	f026 0603 	bic.w	r6, r6, #3
 80087aa:	f002 0201 	and.w	r2, r2, #1
 80087ae:	d11b      	bne.n	80087e8 <_free_r+0x6c>
 80087b0:	4434      	add	r4, r6
 80087b2:	b93a      	cbnz	r2, 80087c4 <_free_r+0x48>
 80087b4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	4414      	add	r4, r2
 80087bc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80087c0:	60ca      	str	r2, [r1, #12]
 80087c2:	6091      	str	r1, [r2, #8]
 80087c4:	f044 0201 	orr.w	r2, r4, #1
 80087c8:	605a      	str	r2, [r3, #4]
 80087ca:	6083      	str	r3, [r0, #8]
 80087cc:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <_free_r+0x174>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d804      	bhi.n	80087de <_free_r+0x62>
 80087d4:	4b47      	ldr	r3, [pc, #284]	; (80088f4 <_free_r+0x178>)
 80087d6:	4628      	mov	r0, r5
 80087d8:	6819      	ldr	r1, [r3, #0]
 80087da:	f7ff ff7b 	bl	80086d4 <_malloc_trim_r>
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087e4:	f000 be6a 	b.w	80094bc <__malloc_unlock>
 80087e8:	f8cc 6004 	str.w	r6, [ip, #4]
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d138      	bne.n	8008862 <_free_r+0xe6>
 80087f0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80087f4:	1a5b      	subs	r3, r3, r1
 80087f6:	440c      	add	r4, r1
 80087f8:	6899      	ldr	r1, [r3, #8]
 80087fa:	f100 0708 	add.w	r7, r0, #8
 80087fe:	42b9      	cmp	r1, r7
 8008800:	d031      	beq.n	8008866 <_free_r+0xea>
 8008802:	68df      	ldr	r7, [r3, #12]
 8008804:	60cf      	str	r7, [r1, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	eb0c 0106 	add.w	r1, ip, r6
 800880c:	6849      	ldr	r1, [r1, #4]
 800880e:	07c9      	lsls	r1, r1, #31
 8008810:	d40b      	bmi.n	800882a <_free_r+0xae>
 8008812:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008816:	4434      	add	r4, r6
 8008818:	bb3a      	cbnz	r2, 800886a <_free_r+0xee>
 800881a:	4e37      	ldr	r6, [pc, #220]	; (80088f8 <_free_r+0x17c>)
 800881c:	42b1      	cmp	r1, r6
 800881e:	d124      	bne.n	800886a <_free_r+0xee>
 8008820:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008824:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008828:	2201      	movs	r2, #1
 800882a:	f044 0101 	orr.w	r1, r4, #1
 800882e:	6059      	str	r1, [r3, #4]
 8008830:	511c      	str	r4, [r3, r4]
 8008832:	2a00      	cmp	r2, #0
 8008834:	d1d3      	bne.n	80087de <_free_r+0x62>
 8008836:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800883a:	d21b      	bcs.n	8008874 <_free_r+0xf8>
 800883c:	0961      	lsrs	r1, r4, #5
 800883e:	08e2      	lsrs	r2, r4, #3
 8008840:	2401      	movs	r4, #1
 8008842:	408c      	lsls	r4, r1
 8008844:	6841      	ldr	r1, [r0, #4]
 8008846:	3201      	adds	r2, #1
 8008848:	430c      	orrs	r4, r1
 800884a:	6044      	str	r4, [r0, #4]
 800884c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008850:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008854:	3908      	subs	r1, #8
 8008856:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800885a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800885e:	60e3      	str	r3, [r4, #12]
 8008860:	e7bd      	b.n	80087de <_free_r+0x62>
 8008862:	2200      	movs	r2, #0
 8008864:	e7d0      	b.n	8008808 <_free_r+0x8c>
 8008866:	2201      	movs	r2, #1
 8008868:	e7ce      	b.n	8008808 <_free_r+0x8c>
 800886a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800886e:	60ce      	str	r6, [r1, #12]
 8008870:	60b1      	str	r1, [r6, #8]
 8008872:	e7da      	b.n	800882a <_free_r+0xae>
 8008874:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008878:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800887c:	d214      	bcs.n	80088a8 <_free_r+0x12c>
 800887e:	09a2      	lsrs	r2, r4, #6
 8008880:	3238      	adds	r2, #56	; 0x38
 8008882:	1c51      	adds	r1, r2, #1
 8008884:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008888:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800888c:	428e      	cmp	r6, r1
 800888e:	d125      	bne.n	80088dc <_free_r+0x160>
 8008890:	2401      	movs	r4, #1
 8008892:	1092      	asrs	r2, r2, #2
 8008894:	fa04 f202 	lsl.w	r2, r4, r2
 8008898:	6844      	ldr	r4, [r0, #4]
 800889a:	4322      	orrs	r2, r4
 800889c:	6042      	str	r2, [r0, #4]
 800889e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80088a2:	60b3      	str	r3, [r6, #8]
 80088a4:	60cb      	str	r3, [r1, #12]
 80088a6:	e79a      	b.n	80087de <_free_r+0x62>
 80088a8:	2a14      	cmp	r2, #20
 80088aa:	d801      	bhi.n	80088b0 <_free_r+0x134>
 80088ac:	325b      	adds	r2, #91	; 0x5b
 80088ae:	e7e8      	b.n	8008882 <_free_r+0x106>
 80088b0:	2a54      	cmp	r2, #84	; 0x54
 80088b2:	d802      	bhi.n	80088ba <_free_r+0x13e>
 80088b4:	0b22      	lsrs	r2, r4, #12
 80088b6:	326e      	adds	r2, #110	; 0x6e
 80088b8:	e7e3      	b.n	8008882 <_free_r+0x106>
 80088ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80088be:	d802      	bhi.n	80088c6 <_free_r+0x14a>
 80088c0:	0be2      	lsrs	r2, r4, #15
 80088c2:	3277      	adds	r2, #119	; 0x77
 80088c4:	e7dd      	b.n	8008882 <_free_r+0x106>
 80088c6:	f240 5154 	movw	r1, #1364	; 0x554
 80088ca:	428a      	cmp	r2, r1
 80088cc:	bf9a      	itte	ls
 80088ce:	0ca2      	lsrls	r2, r4, #18
 80088d0:	327c      	addls	r2, #124	; 0x7c
 80088d2:	227e      	movhi	r2, #126	; 0x7e
 80088d4:	e7d5      	b.n	8008882 <_free_r+0x106>
 80088d6:	6889      	ldr	r1, [r1, #8]
 80088d8:	428e      	cmp	r6, r1
 80088da:	d004      	beq.n	80088e6 <_free_r+0x16a>
 80088dc:	684a      	ldr	r2, [r1, #4]
 80088de:	f022 0203 	bic.w	r2, r2, #3
 80088e2:	42a2      	cmp	r2, r4
 80088e4:	d8f7      	bhi.n	80088d6 <_free_r+0x15a>
 80088e6:	68ce      	ldr	r6, [r1, #12]
 80088e8:	e7d9      	b.n	800889e <_free_r+0x122>
 80088ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ec:	200005b4 	.word	0x200005b4
 80088f0:	200009c0 	.word	0x200009c0
 80088f4:	20000be0 	.word	0x20000be0
 80088f8:	200005bc 	.word	0x200005bc

080088fc <rshift>:
 80088fc:	6903      	ldr	r3, [r0, #16]
 80088fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008906:	ea4f 1261 	mov.w	r2, r1, asr #5
 800890a:	f100 0414 	add.w	r4, r0, #20
 800890e:	dd45      	ble.n	800899c <rshift+0xa0>
 8008910:	f011 011f 	ands.w	r1, r1, #31
 8008914:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008918:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800891c:	d10c      	bne.n	8008938 <rshift+0x3c>
 800891e:	f100 0710 	add.w	r7, r0, #16
 8008922:	4629      	mov	r1, r5
 8008924:	42b1      	cmp	r1, r6
 8008926:	d334      	bcc.n	8008992 <rshift+0x96>
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	1eea      	subs	r2, r5, #3
 800892e:	4296      	cmp	r6, r2
 8008930:	bf38      	it	cc
 8008932:	2300      	movcc	r3, #0
 8008934:	4423      	add	r3, r4
 8008936:	e015      	b.n	8008964 <rshift+0x68>
 8008938:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800893c:	f1c1 0820 	rsb	r8, r1, #32
 8008940:	40cf      	lsrs	r7, r1
 8008942:	f105 0e04 	add.w	lr, r5, #4
 8008946:	46a1      	mov	r9, r4
 8008948:	4576      	cmp	r6, lr
 800894a:	46f4      	mov	ip, lr
 800894c:	d815      	bhi.n	800897a <rshift+0x7e>
 800894e:	1a9a      	subs	r2, r3, r2
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	3a04      	subs	r2, #4
 8008954:	3501      	adds	r5, #1
 8008956:	42ae      	cmp	r6, r5
 8008958:	bf38      	it	cc
 800895a:	2200      	movcc	r2, #0
 800895c:	18a3      	adds	r3, r4, r2
 800895e:	50a7      	str	r7, [r4, r2]
 8008960:	b107      	cbz	r7, 8008964 <rshift+0x68>
 8008962:	3304      	adds	r3, #4
 8008964:	1b1a      	subs	r2, r3, r4
 8008966:	42a3      	cmp	r3, r4
 8008968:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800896c:	bf08      	it	eq
 800896e:	2300      	moveq	r3, #0
 8008970:	6102      	str	r2, [r0, #16]
 8008972:	bf08      	it	eq
 8008974:	6143      	streq	r3, [r0, #20]
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897a:	f8dc c000 	ldr.w	ip, [ip]
 800897e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008982:	ea4c 0707 	orr.w	r7, ip, r7
 8008986:	f849 7b04 	str.w	r7, [r9], #4
 800898a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800898e:	40cf      	lsrs	r7, r1
 8008990:	e7da      	b.n	8008948 <rshift+0x4c>
 8008992:	f851 cb04 	ldr.w	ip, [r1], #4
 8008996:	f847 cf04 	str.w	ip, [r7, #4]!
 800899a:	e7c3      	b.n	8008924 <rshift+0x28>
 800899c:	4623      	mov	r3, r4
 800899e:	e7e1      	b.n	8008964 <rshift+0x68>

080089a0 <__hexdig_fun>:
 80089a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d802      	bhi.n	80089ae <__hexdig_fun+0xe>
 80089a8:	3820      	subs	r0, #32
 80089aa:	b2c0      	uxtb	r0, r0
 80089ac:	4770      	bx	lr
 80089ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d801      	bhi.n	80089ba <__hexdig_fun+0x1a>
 80089b6:	3847      	subs	r0, #71	; 0x47
 80089b8:	e7f7      	b.n	80089aa <__hexdig_fun+0xa>
 80089ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089be:	2b05      	cmp	r3, #5
 80089c0:	d801      	bhi.n	80089c6 <__hexdig_fun+0x26>
 80089c2:	3827      	subs	r0, #39	; 0x27
 80089c4:	e7f1      	b.n	80089aa <__hexdig_fun+0xa>
 80089c6:	2000      	movs	r0, #0
 80089c8:	4770      	bx	lr
	...

080089cc <__gethex>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	ed2d 8b02 	vpush	{d8}
 80089d4:	b089      	sub	sp, #36	; 0x24
 80089d6:	ee08 0a10 	vmov	s16, r0
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	4bb4      	ldr	r3, [pc, #720]	; (8008cb0 <__gethex+0x2e4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	4618      	mov	r0, r3
 80089e4:	468b      	mov	fp, r1
 80089e6:	4690      	mov	r8, r2
 80089e8:	f7f7 fbfc 	bl	80001e4 <strlen>
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	f8db 2000 	ldr.w	r2, [fp]
 80089f2:	4403      	add	r3, r0
 80089f4:	4682      	mov	sl, r0
 80089f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	1c93      	adds	r3, r2, #2
 80089fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a06:	32fe      	adds	r2, #254	; 0xfe
 8008a08:	18d1      	adds	r1, r2, r3
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a10:	9100      	str	r1, [sp, #0]
 8008a12:	2830      	cmp	r0, #48	; 0x30
 8008a14:	d0f8      	beq.n	8008a08 <__gethex+0x3c>
 8008a16:	f7ff ffc3 	bl	80089a0 <__hexdig_fun>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d13a      	bne.n	8008a96 <__gethex+0xca>
 8008a20:	9901      	ldr	r1, [sp, #4]
 8008a22:	4652      	mov	r2, sl
 8008a24:	4638      	mov	r0, r7
 8008a26:	f001 fa13 	bl	8009e50 <strncmp>
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d168      	bne.n	8008b02 <__gethex+0x136>
 8008a30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a34:	eb07 060a 	add.w	r6, r7, sl
 8008a38:	f7ff ffb2 	bl	80089a0 <__hexdig_fun>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d062      	beq.n	8008b06 <__gethex+0x13a>
 8008a40:	4633      	mov	r3, r6
 8008a42:	7818      	ldrb	r0, [r3, #0]
 8008a44:	2830      	cmp	r0, #48	; 0x30
 8008a46:	461f      	mov	r7, r3
 8008a48:	f103 0301 	add.w	r3, r3, #1
 8008a4c:	d0f9      	beq.n	8008a42 <__gethex+0x76>
 8008a4e:	f7ff ffa7 	bl	80089a0 <__hexdig_fun>
 8008a52:	2301      	movs	r3, #1
 8008a54:	fab0 f480 	clz	r4, r0
 8008a58:	0964      	lsrs	r4, r4, #5
 8008a5a:	4635      	mov	r5, r6
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4616      	mov	r6, r2
 8008a62:	3201      	adds	r2, #1
 8008a64:	7830      	ldrb	r0, [r6, #0]
 8008a66:	f7ff ff9b 	bl	80089a0 <__hexdig_fun>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d1f8      	bne.n	8008a60 <__gethex+0x94>
 8008a6e:	9901      	ldr	r1, [sp, #4]
 8008a70:	4652      	mov	r2, sl
 8008a72:	4630      	mov	r0, r6
 8008a74:	f001 f9ec 	bl	8009e50 <strncmp>
 8008a78:	b980      	cbnz	r0, 8008a9c <__gethex+0xd0>
 8008a7a:	b94d      	cbnz	r5, 8008a90 <__gethex+0xc4>
 8008a7c:	eb06 050a 	add.w	r5, r6, sl
 8008a80:	462a      	mov	r2, r5
 8008a82:	4616      	mov	r6, r2
 8008a84:	3201      	adds	r2, #1
 8008a86:	7830      	ldrb	r0, [r6, #0]
 8008a88:	f7ff ff8a 	bl	80089a0 <__hexdig_fun>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d1f8      	bne.n	8008a82 <__gethex+0xb6>
 8008a90:	1bad      	subs	r5, r5, r6
 8008a92:	00ad      	lsls	r5, r5, #2
 8008a94:	e004      	b.n	8008aa0 <__gethex+0xd4>
 8008a96:	2400      	movs	r4, #0
 8008a98:	4625      	mov	r5, r4
 8008a9a:	e7e0      	b.n	8008a5e <__gethex+0x92>
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	d1f7      	bne.n	8008a90 <__gethex+0xc4>
 8008aa0:	7833      	ldrb	r3, [r6, #0]
 8008aa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aa6:	2b50      	cmp	r3, #80	; 0x50
 8008aa8:	d13b      	bne.n	8008b22 <__gethex+0x156>
 8008aaa:	7873      	ldrb	r3, [r6, #1]
 8008aac:	2b2b      	cmp	r3, #43	; 0x2b
 8008aae:	d02c      	beq.n	8008b0a <__gethex+0x13e>
 8008ab0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ab2:	d02e      	beq.n	8008b12 <__gethex+0x146>
 8008ab4:	1c71      	adds	r1, r6, #1
 8008ab6:	f04f 0900 	mov.w	r9, #0
 8008aba:	7808      	ldrb	r0, [r1, #0]
 8008abc:	f7ff ff70 	bl	80089a0 <__hexdig_fun>
 8008ac0:	1e43      	subs	r3, r0, #1
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b18      	cmp	r3, #24
 8008ac6:	d82c      	bhi.n	8008b22 <__gethex+0x156>
 8008ac8:	f1a0 0210 	sub.w	r2, r0, #16
 8008acc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ad0:	f7ff ff66 	bl	80089a0 <__hexdig_fun>
 8008ad4:	1e43      	subs	r3, r0, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b18      	cmp	r3, #24
 8008ada:	d91d      	bls.n	8008b18 <__gethex+0x14c>
 8008adc:	f1b9 0f00 	cmp.w	r9, #0
 8008ae0:	d000      	beq.n	8008ae4 <__gethex+0x118>
 8008ae2:	4252      	negs	r2, r2
 8008ae4:	4415      	add	r5, r2
 8008ae6:	f8cb 1000 	str.w	r1, [fp]
 8008aea:	b1e4      	cbz	r4, 8008b26 <__gethex+0x15a>
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2700      	movne	r7, #0
 8008af4:	2706      	moveq	r7, #6
 8008af6:	4638      	mov	r0, r7
 8008af8:	b009      	add	sp, #36	; 0x24
 8008afa:	ecbd 8b02 	vpop	{d8}
 8008afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b02:	463e      	mov	r6, r7
 8008b04:	4625      	mov	r5, r4
 8008b06:	2401      	movs	r4, #1
 8008b08:	e7ca      	b.n	8008aa0 <__gethex+0xd4>
 8008b0a:	f04f 0900 	mov.w	r9, #0
 8008b0e:	1cb1      	adds	r1, r6, #2
 8008b10:	e7d3      	b.n	8008aba <__gethex+0xee>
 8008b12:	f04f 0901 	mov.w	r9, #1
 8008b16:	e7fa      	b.n	8008b0e <__gethex+0x142>
 8008b18:	230a      	movs	r3, #10
 8008b1a:	fb03 0202 	mla	r2, r3, r2, r0
 8008b1e:	3a10      	subs	r2, #16
 8008b20:	e7d4      	b.n	8008acc <__gethex+0x100>
 8008b22:	4631      	mov	r1, r6
 8008b24:	e7df      	b.n	8008ae6 <__gethex+0x11a>
 8008b26:	1bf3      	subs	r3, r6, r7
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	2b07      	cmp	r3, #7
 8008b2e:	dc0b      	bgt.n	8008b48 <__gethex+0x17c>
 8008b30:	ee18 0a10 	vmov	r0, s16
 8008b34:	f000 fcc8 	bl	80094c8 <_Balloc>
 8008b38:	4604      	mov	r4, r0
 8008b3a:	b940      	cbnz	r0, 8008b4e <__gethex+0x182>
 8008b3c:	4b5d      	ldr	r3, [pc, #372]	; (8008cb4 <__gethex+0x2e8>)
 8008b3e:	4602      	mov	r2, r0
 8008b40:	21de      	movs	r1, #222	; 0xde
 8008b42:	485d      	ldr	r0, [pc, #372]	; (8008cb8 <__gethex+0x2ec>)
 8008b44:	f001 fa82 	bl	800a04c <__assert_func>
 8008b48:	3101      	adds	r1, #1
 8008b4a:	105b      	asrs	r3, r3, #1
 8008b4c:	e7ee      	b.n	8008b2c <__gethex+0x160>
 8008b4e:	f100 0914 	add.w	r9, r0, #20
 8008b52:	f04f 0b00 	mov.w	fp, #0
 8008b56:	f1ca 0301 	rsb	r3, sl, #1
 8008b5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b5e:	f8cd b000 	str.w	fp, [sp]
 8008b62:	9306      	str	r3, [sp, #24]
 8008b64:	42b7      	cmp	r7, r6
 8008b66:	d340      	bcc.n	8008bea <__gethex+0x21e>
 8008b68:	9802      	ldr	r0, [sp, #8]
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	f840 3b04 	str.w	r3, [r0], #4
 8008b70:	eba0 0009 	sub.w	r0, r0, r9
 8008b74:	1080      	asrs	r0, r0, #2
 8008b76:	0146      	lsls	r6, r0, #5
 8008b78:	6120      	str	r0, [r4, #16]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fd62 	bl	8009644 <__hi0bits>
 8008b80:	1a30      	subs	r0, r6, r0
 8008b82:	f8d8 6000 	ldr.w	r6, [r8]
 8008b86:	42b0      	cmp	r0, r6
 8008b88:	dd63      	ble.n	8008c52 <__gethex+0x286>
 8008b8a:	1b87      	subs	r7, r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f001 f8ec 	bl	8009d6c <__any_on>
 8008b94:	4682      	mov	sl, r0
 8008b96:	b1a8      	cbz	r0, 8008bc4 <__gethex+0x1f8>
 8008b98:	1e7b      	subs	r3, r7, #1
 8008b9a:	1159      	asrs	r1, r3, #5
 8008b9c:	f003 021f 	and.w	r2, r3, #31
 8008ba0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ba4:	f04f 0a01 	mov.w	sl, #1
 8008ba8:	fa0a f202 	lsl.w	r2, sl, r2
 8008bac:	420a      	tst	r2, r1
 8008bae:	d009      	beq.n	8008bc4 <__gethex+0x1f8>
 8008bb0:	4553      	cmp	r3, sl
 8008bb2:	dd05      	ble.n	8008bc0 <__gethex+0x1f4>
 8008bb4:	1eb9      	subs	r1, r7, #2
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f001 f8d8 	bl	8009d6c <__any_on>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d145      	bne.n	8008c4c <__gethex+0x280>
 8008bc0:	f04f 0a02 	mov.w	sl, #2
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f7ff fe98 	bl	80088fc <rshift>
 8008bcc:	443d      	add	r5, r7
 8008bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	da4c      	bge.n	8008c70 <__gethex+0x2a4>
 8008bd6:	ee18 0a10 	vmov	r0, s16
 8008bda:	4621      	mov	r1, r4
 8008bdc:	f000 fc99 	bl	8009512 <_Bfree>
 8008be0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008be2:	2300      	movs	r3, #0
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	27a3      	movs	r7, #163	; 0xa3
 8008be8:	e785      	b.n	8008af6 <__gethex+0x12a>
 8008bea:	1e73      	subs	r3, r6, #1
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d019      	beq.n	8008c2c <__gethex+0x260>
 8008bf8:	f1bb 0f20 	cmp.w	fp, #32
 8008bfc:	d107      	bne.n	8008c0e <__gethex+0x242>
 8008bfe:	9b02      	ldr	r3, [sp, #8]
 8008c00:	9a00      	ldr	r2, [sp, #0]
 8008c02:	f843 2b04 	str.w	r2, [r3], #4
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	469b      	mov	fp, r3
 8008c0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c12:	f7ff fec5 	bl	80089a0 <__hexdig_fun>
 8008c16:	9b00      	ldr	r3, [sp, #0]
 8008c18:	f000 000f 	and.w	r0, r0, #15
 8008c1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c20:	4303      	orrs	r3, r0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	f10b 0b04 	add.w	fp, fp, #4
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	e00d      	b.n	8008c48 <__gethex+0x27c>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	9a06      	ldr	r2, [sp, #24]
 8008c30:	4413      	add	r3, r2
 8008c32:	42bb      	cmp	r3, r7
 8008c34:	d3e0      	bcc.n	8008bf8 <__gethex+0x22c>
 8008c36:	4618      	mov	r0, r3
 8008c38:	9901      	ldr	r1, [sp, #4]
 8008c3a:	9307      	str	r3, [sp, #28]
 8008c3c:	4652      	mov	r2, sl
 8008c3e:	f001 f907 	bl	8009e50 <strncmp>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1d7      	bne.n	8008bf8 <__gethex+0x22c>
 8008c48:	461e      	mov	r6, r3
 8008c4a:	e78b      	b.n	8008b64 <__gethex+0x198>
 8008c4c:	f04f 0a03 	mov.w	sl, #3
 8008c50:	e7b8      	b.n	8008bc4 <__gethex+0x1f8>
 8008c52:	da0a      	bge.n	8008c6a <__gethex+0x29e>
 8008c54:	1a37      	subs	r7, r6, r0
 8008c56:	4621      	mov	r1, r4
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	463a      	mov	r2, r7
 8008c5e:	f000 fe41 	bl	80098e4 <__lshift>
 8008c62:	1bed      	subs	r5, r5, r7
 8008c64:	4604      	mov	r4, r0
 8008c66:	f100 0914 	add.w	r9, r0, #20
 8008c6a:	f04f 0a00 	mov.w	sl, #0
 8008c6e:	e7ae      	b.n	8008bce <__gethex+0x202>
 8008c70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c74:	42a8      	cmp	r0, r5
 8008c76:	dd72      	ble.n	8008d5e <__gethex+0x392>
 8008c78:	1b45      	subs	r5, r0, r5
 8008c7a:	42ae      	cmp	r6, r5
 8008c7c:	dc36      	bgt.n	8008cec <__gethex+0x320>
 8008c7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d02a      	beq.n	8008cdc <__gethex+0x310>
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d02c      	beq.n	8008ce4 <__gethex+0x318>
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d11c      	bne.n	8008cc8 <__gethex+0x2fc>
 8008c8e:	42ae      	cmp	r6, r5
 8008c90:	d11a      	bne.n	8008cc8 <__gethex+0x2fc>
 8008c92:	2e01      	cmp	r6, #1
 8008c94:	d112      	bne.n	8008cbc <__gethex+0x2f0>
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	f8c9 3000 	str.w	r3, [r9]
 8008ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ca8:	2762      	movs	r7, #98	; 0x62
 8008caa:	601c      	str	r4, [r3, #0]
 8008cac:	e723      	b.n	8008af6 <__gethex+0x12a>
 8008cae:	bf00      	nop
 8008cb0:	0800be9c 	.word	0x0800be9c
 8008cb4:	0800bdca 	.word	0x0800bdca
 8008cb8:	0800be36 	.word	0x0800be36
 8008cbc:	1e71      	subs	r1, r6, #1
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f001 f854 	bl	8009d6c <__any_on>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d1e6      	bne.n	8008c96 <__gethex+0x2ca>
 8008cc8:	ee18 0a10 	vmov	r0, s16
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f000 fc20 	bl	8009512 <_Bfree>
 8008cd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	2750      	movs	r7, #80	; 0x50
 8008cda:	e70c      	b.n	8008af6 <__gethex+0x12a>
 8008cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1f2      	bne.n	8008cc8 <__gethex+0x2fc>
 8008ce2:	e7d8      	b.n	8008c96 <__gethex+0x2ca>
 8008ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1d5      	bne.n	8008c96 <__gethex+0x2ca>
 8008cea:	e7ed      	b.n	8008cc8 <__gethex+0x2fc>
 8008cec:	1e6f      	subs	r7, r5, #1
 8008cee:	f1ba 0f00 	cmp.w	sl, #0
 8008cf2:	d131      	bne.n	8008d58 <__gethex+0x38c>
 8008cf4:	b127      	cbz	r7, 8008d00 <__gethex+0x334>
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 f837 	bl	8009d6c <__any_on>
 8008cfe:	4682      	mov	sl, r0
 8008d00:	117b      	asrs	r3, r7, #5
 8008d02:	2101      	movs	r1, #1
 8008d04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d08:	f007 071f 	and.w	r7, r7, #31
 8008d0c:	fa01 f707 	lsl.w	r7, r1, r7
 8008d10:	421f      	tst	r7, r3
 8008d12:	4629      	mov	r1, r5
 8008d14:	4620      	mov	r0, r4
 8008d16:	bf18      	it	ne
 8008d18:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d1c:	1b76      	subs	r6, r6, r5
 8008d1e:	f7ff fded 	bl	80088fc <rshift>
 8008d22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d26:	2702      	movs	r7, #2
 8008d28:	f1ba 0f00 	cmp.w	sl, #0
 8008d2c:	d048      	beq.n	8008dc0 <__gethex+0x3f4>
 8008d2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d015      	beq.n	8008d62 <__gethex+0x396>
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d017      	beq.n	8008d6a <__gethex+0x39e>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d109      	bne.n	8008d52 <__gethex+0x386>
 8008d3e:	f01a 0f02 	tst.w	sl, #2
 8008d42:	d006      	beq.n	8008d52 <__gethex+0x386>
 8008d44:	f8d9 0000 	ldr.w	r0, [r9]
 8008d48:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d4c:	f01a 0f01 	tst.w	sl, #1
 8008d50:	d10e      	bne.n	8008d70 <__gethex+0x3a4>
 8008d52:	f047 0710 	orr.w	r7, r7, #16
 8008d56:	e033      	b.n	8008dc0 <__gethex+0x3f4>
 8008d58:	f04f 0a01 	mov.w	sl, #1
 8008d5c:	e7d0      	b.n	8008d00 <__gethex+0x334>
 8008d5e:	2701      	movs	r7, #1
 8008d60:	e7e2      	b.n	8008d28 <__gethex+0x35c>
 8008d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d64:	f1c3 0301 	rsb	r3, r3, #1
 8008d68:	9315      	str	r3, [sp, #84]	; 0x54
 8008d6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <__gethex+0x386>
 8008d70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d74:	f104 0314 	add.w	r3, r4, #20
 8008d78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d80:	f04f 0c00 	mov.w	ip, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008d8e:	d01c      	beq.n	8008dca <__gethex+0x3fe>
 8008d90:	3201      	adds	r2, #1
 8008d92:	6002      	str	r2, [r0, #0]
 8008d94:	2f02      	cmp	r7, #2
 8008d96:	f104 0314 	add.w	r3, r4, #20
 8008d9a:	d13f      	bne.n	8008e1c <__gethex+0x450>
 8008d9c:	f8d8 2000 	ldr.w	r2, [r8]
 8008da0:	3a01      	subs	r2, #1
 8008da2:	42b2      	cmp	r2, r6
 8008da4:	d10a      	bne.n	8008dbc <__gethex+0x3f0>
 8008da6:	1171      	asrs	r1, r6, #5
 8008da8:	2201      	movs	r2, #1
 8008daa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dae:	f006 061f 	and.w	r6, r6, #31
 8008db2:	fa02 f606 	lsl.w	r6, r2, r6
 8008db6:	421e      	tst	r6, r3
 8008db8:	bf18      	it	ne
 8008dba:	4617      	movne	r7, r2
 8008dbc:	f047 0720 	orr.w	r7, r7, #32
 8008dc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dc2:	601c      	str	r4, [r3, #0]
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	601d      	str	r5, [r3, #0]
 8008dc8:	e695      	b.n	8008af6 <__gethex+0x12a>
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dd0:	d8d8      	bhi.n	8008d84 <__gethex+0x3b8>
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	459b      	cmp	fp, r3
 8008dd6:	db19      	blt.n	8008e0c <__gethex+0x440>
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	ee18 0a10 	vmov	r0, s16
 8008dde:	3101      	adds	r1, #1
 8008de0:	f000 fb72 	bl	80094c8 <_Balloc>
 8008de4:	4681      	mov	r9, r0
 8008de6:	b918      	cbnz	r0, 8008df0 <__gethex+0x424>
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <__gethex+0x488>)
 8008dea:	4602      	mov	r2, r0
 8008dec:	2184      	movs	r1, #132	; 0x84
 8008dee:	e6a8      	b.n	8008b42 <__gethex+0x176>
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	3202      	adds	r2, #2
 8008df4:	f104 010c 	add.w	r1, r4, #12
 8008df8:	0092      	lsls	r2, r2, #2
 8008dfa:	300c      	adds	r0, #12
 8008dfc:	f000 fb4a 	bl	8009494 <memcpy>
 8008e00:	4621      	mov	r1, r4
 8008e02:	ee18 0a10 	vmov	r0, s16
 8008e06:	f000 fb84 	bl	8009512 <_Bfree>
 8008e0a:	464c      	mov	r4, r9
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e14:	6122      	str	r2, [r4, #16]
 8008e16:	2201      	movs	r2, #1
 8008e18:	615a      	str	r2, [r3, #20]
 8008e1a:	e7bb      	b.n	8008d94 <__gethex+0x3c8>
 8008e1c:	6922      	ldr	r2, [r4, #16]
 8008e1e:	455a      	cmp	r2, fp
 8008e20:	dd0b      	ble.n	8008e3a <__gethex+0x46e>
 8008e22:	2101      	movs	r1, #1
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7ff fd69 	bl	80088fc <rshift>
 8008e2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e2e:	3501      	adds	r5, #1
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	f6ff aed0 	blt.w	8008bd6 <__gethex+0x20a>
 8008e36:	2701      	movs	r7, #1
 8008e38:	e7c0      	b.n	8008dbc <__gethex+0x3f0>
 8008e3a:	f016 061f 	ands.w	r6, r6, #31
 8008e3e:	d0fa      	beq.n	8008e36 <__gethex+0x46a>
 8008e40:	4453      	add	r3, sl
 8008e42:	f1c6 0620 	rsb	r6, r6, #32
 8008e46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e4a:	f000 fbfb 	bl	8009644 <__hi0bits>
 8008e4e:	42b0      	cmp	r0, r6
 8008e50:	dbe7      	blt.n	8008e22 <__gethex+0x456>
 8008e52:	e7f0      	b.n	8008e36 <__gethex+0x46a>
 8008e54:	0800bdca 	.word	0x0800bdca

08008e58 <L_shift>:
 8008e58:	f1c2 0208 	rsb	r2, r2, #8
 8008e5c:	0092      	lsls	r2, r2, #2
 8008e5e:	b570      	push	{r4, r5, r6, lr}
 8008e60:	f1c2 0620 	rsb	r6, r2, #32
 8008e64:	6843      	ldr	r3, [r0, #4]
 8008e66:	6804      	ldr	r4, [r0, #0]
 8008e68:	fa03 f506 	lsl.w	r5, r3, r6
 8008e6c:	432c      	orrs	r4, r5
 8008e6e:	40d3      	lsrs	r3, r2
 8008e70:	6004      	str	r4, [r0, #0]
 8008e72:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e76:	4288      	cmp	r0, r1
 8008e78:	d3f4      	bcc.n	8008e64 <L_shift+0xc>
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}

08008e7c <__match>:
 8008e7c:	b530      	push	{r4, r5, lr}
 8008e7e:	6803      	ldr	r3, [r0, #0]
 8008e80:	3301      	adds	r3, #1
 8008e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e86:	b914      	cbnz	r4, 8008e8e <__match+0x12>
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	bd30      	pop	{r4, r5, pc}
 8008e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e96:	2d19      	cmp	r5, #25
 8008e98:	bf98      	it	ls
 8008e9a:	3220      	addls	r2, #32
 8008e9c:	42a2      	cmp	r2, r4
 8008e9e:	d0f0      	beq.n	8008e82 <__match+0x6>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7f3      	b.n	8008e8c <__match+0x10>

08008ea4 <__hexnan>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	680b      	ldr	r3, [r1, #0]
 8008eaa:	115e      	asrs	r6, r3, #5
 8008eac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008eb0:	f013 031f 	ands.w	r3, r3, #31
 8008eb4:	b087      	sub	sp, #28
 8008eb6:	bf18      	it	ne
 8008eb8:	3604      	addne	r6, #4
 8008eba:	2500      	movs	r5, #0
 8008ebc:	1f37      	subs	r7, r6, #4
 8008ebe:	4690      	mov	r8, r2
 8008ec0:	6802      	ldr	r2, [r0, #0]
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eca:	46b9      	mov	r9, r7
 8008ecc:	463c      	mov	r4, r7
 8008ece:	9502      	str	r5, [sp, #8]
 8008ed0:	46ab      	mov	fp, r5
 8008ed2:	7851      	ldrb	r1, [r2, #1]
 8008ed4:	1c53      	adds	r3, r2, #1
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	b341      	cbz	r1, 8008f2c <__hexnan+0x88>
 8008eda:	4608      	mov	r0, r1
 8008edc:	9205      	str	r2, [sp, #20]
 8008ede:	9104      	str	r1, [sp, #16]
 8008ee0:	f7ff fd5e 	bl	80089a0 <__hexdig_fun>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d14f      	bne.n	8008f88 <__hexnan+0xe4>
 8008ee8:	9904      	ldr	r1, [sp, #16]
 8008eea:	9a05      	ldr	r2, [sp, #20]
 8008eec:	2920      	cmp	r1, #32
 8008eee:	d818      	bhi.n	8008f22 <__hexnan+0x7e>
 8008ef0:	9b02      	ldr	r3, [sp, #8]
 8008ef2:	459b      	cmp	fp, r3
 8008ef4:	dd13      	ble.n	8008f1e <__hexnan+0x7a>
 8008ef6:	454c      	cmp	r4, r9
 8008ef8:	d206      	bcs.n	8008f08 <__hexnan+0x64>
 8008efa:	2d07      	cmp	r5, #7
 8008efc:	dc04      	bgt.n	8008f08 <__hexnan+0x64>
 8008efe:	462a      	mov	r2, r5
 8008f00:	4649      	mov	r1, r9
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff ffa8 	bl	8008e58 <L_shift>
 8008f08:	4544      	cmp	r4, r8
 8008f0a:	d950      	bls.n	8008fae <__hexnan+0x10a>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f12:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f16:	f8cd b008 	str.w	fp, [sp, #8]
 8008f1a:	464c      	mov	r4, r9
 8008f1c:	461d      	mov	r5, r3
 8008f1e:	9a03      	ldr	r2, [sp, #12]
 8008f20:	e7d7      	b.n	8008ed2 <__hexnan+0x2e>
 8008f22:	2929      	cmp	r1, #41	; 0x29
 8008f24:	d156      	bne.n	8008fd4 <__hexnan+0x130>
 8008f26:	3202      	adds	r2, #2
 8008f28:	f8ca 2000 	str.w	r2, [sl]
 8008f2c:	f1bb 0f00 	cmp.w	fp, #0
 8008f30:	d050      	beq.n	8008fd4 <__hexnan+0x130>
 8008f32:	454c      	cmp	r4, r9
 8008f34:	d206      	bcs.n	8008f44 <__hexnan+0xa0>
 8008f36:	2d07      	cmp	r5, #7
 8008f38:	dc04      	bgt.n	8008f44 <__hexnan+0xa0>
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7ff ff8a 	bl	8008e58 <L_shift>
 8008f44:	4544      	cmp	r4, r8
 8008f46:	d934      	bls.n	8008fb2 <__hexnan+0x10e>
 8008f48:	f1a8 0204 	sub.w	r2, r8, #4
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f52:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f56:	429f      	cmp	r7, r3
 8008f58:	d2f9      	bcs.n	8008f4e <__hexnan+0xaa>
 8008f5a:	1b3b      	subs	r3, r7, r4
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	3304      	adds	r3, #4
 8008f62:	3401      	adds	r4, #1
 8008f64:	3e03      	subs	r6, #3
 8008f66:	42b4      	cmp	r4, r6
 8008f68:	bf88      	it	hi
 8008f6a:	2304      	movhi	r3, #4
 8008f6c:	4443      	add	r3, r8
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f843 2b04 	str.w	r2, [r3], #4
 8008f74:	429f      	cmp	r7, r3
 8008f76:	d2fb      	bcs.n	8008f70 <__hexnan+0xcc>
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	b91b      	cbnz	r3, 8008f84 <__hexnan+0xe0>
 8008f7c:	4547      	cmp	r7, r8
 8008f7e:	d127      	bne.n	8008fd0 <__hexnan+0x12c>
 8008f80:	2301      	movs	r3, #1
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	2005      	movs	r0, #5
 8008f86:	e026      	b.n	8008fd6 <__hexnan+0x132>
 8008f88:	3501      	adds	r5, #1
 8008f8a:	2d08      	cmp	r5, #8
 8008f8c:	f10b 0b01 	add.w	fp, fp, #1
 8008f90:	dd06      	ble.n	8008fa0 <__hexnan+0xfc>
 8008f92:	4544      	cmp	r4, r8
 8008f94:	d9c3      	bls.n	8008f1e <__hexnan+0x7a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f9c:	2501      	movs	r5, #1
 8008f9e:	3c04      	subs	r4, #4
 8008fa0:	6822      	ldr	r2, [r4, #0]
 8008fa2:	f000 000f 	and.w	r0, r0, #15
 8008fa6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	e7b7      	b.n	8008f1e <__hexnan+0x7a>
 8008fae:	2508      	movs	r5, #8
 8008fb0:	e7b5      	b.n	8008f1e <__hexnan+0x7a>
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0df      	beq.n	8008f78 <__hexnan+0xd4>
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbc:	f1c3 0320 	rsb	r3, r3, #32
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fc8:	401a      	ands	r2, r3
 8008fca:	f846 2c04 	str.w	r2, [r6, #-4]
 8008fce:	e7d3      	b.n	8008f78 <__hexnan+0xd4>
 8008fd0:	3f04      	subs	r7, #4
 8008fd2:	e7d1      	b.n	8008f78 <__hexnan+0xd4>
 8008fd4:	2004      	movs	r0, #4
 8008fd6:	b007      	add	sp, #28
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fdc <__locale_mb_cur_max>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <__locale_mb_cur_max+0x8>)
 8008fde:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008fe2:	4770      	bx	lr
 8008fe4:	20000448 	.word	0x20000448

08008fe8 <_localeconv_r>:
 8008fe8:	4800      	ldr	r0, [pc, #0]	; (8008fec <_localeconv_r+0x4>)
 8008fea:	4770      	bx	lr
 8008fec:	20000538 	.word	0x20000538

08008ff0 <__retarget_lock_init_recursive>:
 8008ff0:	4770      	bx	lr

08008ff2 <__retarget_lock_close_recursive>:
 8008ff2:	4770      	bx	lr

08008ff4 <__retarget_lock_acquire_recursive>:
 8008ff4:	4770      	bx	lr

08008ff6 <__retarget_lock_release_recursive>:
 8008ff6:	4770      	bx	lr

08008ff8 <_malloc_r>:
 8008ff8:	f101 030b 	add.w	r3, r1, #11
 8008ffc:	2b16      	cmp	r3, #22
 8008ffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009002:	4605      	mov	r5, r0
 8009004:	d906      	bls.n	8009014 <_malloc_r+0x1c>
 8009006:	f033 0707 	bics.w	r7, r3, #7
 800900a:	d504      	bpl.n	8009016 <_malloc_r+0x1e>
 800900c:	230c      	movs	r3, #12
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	2400      	movs	r4, #0
 8009012:	e1a5      	b.n	8009360 <_malloc_r+0x368>
 8009014:	2710      	movs	r7, #16
 8009016:	42b9      	cmp	r1, r7
 8009018:	d8f8      	bhi.n	800900c <_malloc_r+0x14>
 800901a:	4628      	mov	r0, r5
 800901c:	f000 fa48 	bl	80094b0 <__malloc_lock>
 8009020:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009024:	4eb0      	ldr	r6, [pc, #704]	; (80092e8 <_malloc_r+0x2f0>)
 8009026:	d237      	bcs.n	8009098 <_malloc_r+0xa0>
 8009028:	f107 0208 	add.w	r2, r7, #8
 800902c:	4432      	add	r2, r6
 800902e:	f1a2 0108 	sub.w	r1, r2, #8
 8009032:	6854      	ldr	r4, [r2, #4]
 8009034:	428c      	cmp	r4, r1
 8009036:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800903a:	d102      	bne.n	8009042 <_malloc_r+0x4a>
 800903c:	68d4      	ldr	r4, [r2, #12]
 800903e:	42a2      	cmp	r2, r4
 8009040:	d010      	beq.n	8009064 <_malloc_r+0x6c>
 8009042:	6863      	ldr	r3, [r4, #4]
 8009044:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009048:	f023 0303 	bic.w	r3, r3, #3
 800904c:	60ca      	str	r2, [r1, #12]
 800904e:	4423      	add	r3, r4
 8009050:	6091      	str	r1, [r2, #8]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	f042 0201 	orr.w	r2, r2, #1
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fa2e 	bl	80094bc <__malloc_unlock>
 8009060:	3408      	adds	r4, #8
 8009062:	e17d      	b.n	8009360 <_malloc_r+0x368>
 8009064:	3302      	adds	r3, #2
 8009066:	6934      	ldr	r4, [r6, #16]
 8009068:	49a0      	ldr	r1, [pc, #640]	; (80092ec <_malloc_r+0x2f4>)
 800906a:	428c      	cmp	r4, r1
 800906c:	d077      	beq.n	800915e <_malloc_r+0x166>
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	f022 0c03 	bic.w	ip, r2, #3
 8009074:	ebac 0007 	sub.w	r0, ip, r7
 8009078:	280f      	cmp	r0, #15
 800907a:	dd48      	ble.n	800910e <_malloc_r+0x116>
 800907c:	19e2      	adds	r2, r4, r7
 800907e:	f040 0301 	orr.w	r3, r0, #1
 8009082:	f047 0701 	orr.w	r7, r7, #1
 8009086:	6067      	str	r7, [r4, #4]
 8009088:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800908c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009090:	6053      	str	r3, [r2, #4]
 8009092:	f844 000c 	str.w	r0, [r4, ip]
 8009096:	e7e0      	b.n	800905a <_malloc_r+0x62>
 8009098:	0a7b      	lsrs	r3, r7, #9
 800909a:	d02a      	beq.n	80090f2 <_malloc_r+0xfa>
 800909c:	2b04      	cmp	r3, #4
 800909e:	d812      	bhi.n	80090c6 <_malloc_r+0xce>
 80090a0:	09bb      	lsrs	r3, r7, #6
 80090a2:	3338      	adds	r3, #56	; 0x38
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80090aa:	f1a2 0c08 	sub.w	ip, r2, #8
 80090ae:	6854      	ldr	r4, [r2, #4]
 80090b0:	4564      	cmp	r4, ip
 80090b2:	d006      	beq.n	80090c2 <_malloc_r+0xca>
 80090b4:	6862      	ldr	r2, [r4, #4]
 80090b6:	f022 0203 	bic.w	r2, r2, #3
 80090ba:	1bd0      	subs	r0, r2, r7
 80090bc:	280f      	cmp	r0, #15
 80090be:	dd1c      	ble.n	80090fa <_malloc_r+0x102>
 80090c0:	3b01      	subs	r3, #1
 80090c2:	3301      	adds	r3, #1
 80090c4:	e7cf      	b.n	8009066 <_malloc_r+0x6e>
 80090c6:	2b14      	cmp	r3, #20
 80090c8:	d801      	bhi.n	80090ce <_malloc_r+0xd6>
 80090ca:	335b      	adds	r3, #91	; 0x5b
 80090cc:	e7ea      	b.n	80090a4 <_malloc_r+0xac>
 80090ce:	2b54      	cmp	r3, #84	; 0x54
 80090d0:	d802      	bhi.n	80090d8 <_malloc_r+0xe0>
 80090d2:	0b3b      	lsrs	r3, r7, #12
 80090d4:	336e      	adds	r3, #110	; 0x6e
 80090d6:	e7e5      	b.n	80090a4 <_malloc_r+0xac>
 80090d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80090dc:	d802      	bhi.n	80090e4 <_malloc_r+0xec>
 80090de:	0bfb      	lsrs	r3, r7, #15
 80090e0:	3377      	adds	r3, #119	; 0x77
 80090e2:	e7df      	b.n	80090a4 <_malloc_r+0xac>
 80090e4:	f240 5254 	movw	r2, #1364	; 0x554
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d804      	bhi.n	80090f6 <_malloc_r+0xfe>
 80090ec:	0cbb      	lsrs	r3, r7, #18
 80090ee:	337c      	adds	r3, #124	; 0x7c
 80090f0:	e7d8      	b.n	80090a4 <_malloc_r+0xac>
 80090f2:	233f      	movs	r3, #63	; 0x3f
 80090f4:	e7d6      	b.n	80090a4 <_malloc_r+0xac>
 80090f6:	237e      	movs	r3, #126	; 0x7e
 80090f8:	e7d4      	b.n	80090a4 <_malloc_r+0xac>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	68e1      	ldr	r1, [r4, #12]
 80090fe:	db04      	blt.n	800910a <_malloc_r+0x112>
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	60d9      	str	r1, [r3, #12]
 8009104:	608b      	str	r3, [r1, #8]
 8009106:	18a3      	adds	r3, r4, r2
 8009108:	e7a3      	b.n	8009052 <_malloc_r+0x5a>
 800910a:	460c      	mov	r4, r1
 800910c:	e7d0      	b.n	80090b0 <_malloc_r+0xb8>
 800910e:	2800      	cmp	r0, #0
 8009110:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009114:	db07      	blt.n	8009126 <_malloc_r+0x12e>
 8009116:	44a4      	add	ip, r4
 8009118:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800911c:	f043 0301 	orr.w	r3, r3, #1
 8009120:	f8cc 3004 	str.w	r3, [ip, #4]
 8009124:	e799      	b.n	800905a <_malloc_r+0x62>
 8009126:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800912a:	6870      	ldr	r0, [r6, #4]
 800912c:	f080 8096 	bcs.w	800925c <_malloc_r+0x264>
 8009130:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009134:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009138:	f04f 0c01 	mov.w	ip, #1
 800913c:	3201      	adds	r2, #1
 800913e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009142:	ea4c 0000 	orr.w	r0, ip, r0
 8009146:	6070      	str	r0, [r6, #4]
 8009148:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800914c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009150:	3808      	subs	r0, #8
 8009152:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009156:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800915a:	f8cc 400c 	str.w	r4, [ip, #12]
 800915e:	2001      	movs	r0, #1
 8009160:	109a      	asrs	r2, r3, #2
 8009162:	fa00 f202 	lsl.w	r2, r0, r2
 8009166:	6870      	ldr	r0, [r6, #4]
 8009168:	4290      	cmp	r0, r2
 800916a:	d326      	bcc.n	80091ba <_malloc_r+0x1c2>
 800916c:	4210      	tst	r0, r2
 800916e:	d106      	bne.n	800917e <_malloc_r+0x186>
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	0052      	lsls	r2, r2, #1
 8009176:	4210      	tst	r0, r2
 8009178:	f103 0304 	add.w	r3, r3, #4
 800917c:	d0fa      	beq.n	8009174 <_malloc_r+0x17c>
 800917e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009182:	46c1      	mov	r9, r8
 8009184:	469e      	mov	lr, r3
 8009186:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800918a:	454c      	cmp	r4, r9
 800918c:	f040 80ba 	bne.w	8009304 <_malloc_r+0x30c>
 8009190:	f10e 0e01 	add.w	lr, lr, #1
 8009194:	f01e 0f03 	tst.w	lr, #3
 8009198:	f109 0908 	add.w	r9, r9, #8
 800919c:	d1f3      	bne.n	8009186 <_malloc_r+0x18e>
 800919e:	0798      	lsls	r0, r3, #30
 80091a0:	f040 80e4 	bne.w	800936c <_malloc_r+0x374>
 80091a4:	6873      	ldr	r3, [r6, #4]
 80091a6:	ea23 0302 	bic.w	r3, r3, r2
 80091aa:	6073      	str	r3, [r6, #4]
 80091ac:	6870      	ldr	r0, [r6, #4]
 80091ae:	0052      	lsls	r2, r2, #1
 80091b0:	4290      	cmp	r0, r2
 80091b2:	d302      	bcc.n	80091ba <_malloc_r+0x1c2>
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	f040 80e6 	bne.w	8009386 <_malloc_r+0x38e>
 80091ba:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80091be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80091c2:	f023 0903 	bic.w	r9, r3, #3
 80091c6:	45b9      	cmp	r9, r7
 80091c8:	d304      	bcc.n	80091d4 <_malloc_r+0x1dc>
 80091ca:	eba9 0207 	sub.w	r2, r9, r7
 80091ce:	2a0f      	cmp	r2, #15
 80091d0:	f300 8142 	bgt.w	8009458 <_malloc_r+0x460>
 80091d4:	4b46      	ldr	r3, [pc, #280]	; (80092f0 <_malloc_r+0x2f8>)
 80091d6:	6819      	ldr	r1, [r3, #0]
 80091d8:	3110      	adds	r1, #16
 80091da:	4439      	add	r1, r7
 80091dc:	2008      	movs	r0, #8
 80091de:	9101      	str	r1, [sp, #4]
 80091e0:	f000 fed8 	bl	8009f94 <sysconf>
 80091e4:	4a43      	ldr	r2, [pc, #268]	; (80092f4 <_malloc_r+0x2fc>)
 80091e6:	9901      	ldr	r1, [sp, #4]
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	bf1f      	itttt	ne
 80091ee:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80091f2:	1809      	addne	r1, r1, r0
 80091f4:	4243      	negne	r3, r0
 80091f6:	4019      	andne	r1, r3
 80091f8:	4680      	mov	r8, r0
 80091fa:	4628      	mov	r0, r5
 80091fc:	9101      	str	r1, [sp, #4]
 80091fe:	f000 fe17 	bl	8009e30 <_sbrk_r>
 8009202:	1c42      	adds	r2, r0, #1
 8009204:	eb0a 0b09 	add.w	fp, sl, r9
 8009208:	4604      	mov	r4, r0
 800920a:	f000 80f8 	beq.w	80093fe <_malloc_r+0x406>
 800920e:	4583      	cmp	fp, r0
 8009210:	9901      	ldr	r1, [sp, #4]
 8009212:	4a38      	ldr	r2, [pc, #224]	; (80092f4 <_malloc_r+0x2fc>)
 8009214:	d902      	bls.n	800921c <_malloc_r+0x224>
 8009216:	45b2      	cmp	sl, r6
 8009218:	f040 80f1 	bne.w	80093fe <_malloc_r+0x406>
 800921c:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <_malloc_r+0x300>)
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	45a3      	cmp	fp, r4
 8009222:	eb00 0e01 	add.w	lr, r0, r1
 8009226:	f8c3 e000 	str.w	lr, [r3]
 800922a:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800922e:	f040 80ac 	bne.w	800938a <_malloc_r+0x392>
 8009232:	ea1b 0f0c 	tst.w	fp, ip
 8009236:	f040 80a8 	bne.w	800938a <_malloc_r+0x392>
 800923a:	68b2      	ldr	r2, [r6, #8]
 800923c:	4449      	add	r1, r9
 800923e:	f041 0101 	orr.w	r1, r1, #1
 8009242:	6051      	str	r1, [r2, #4]
 8009244:	4a2d      	ldr	r2, [pc, #180]	; (80092fc <_malloc_r+0x304>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6811      	ldr	r1, [r2, #0]
 800924a:	428b      	cmp	r3, r1
 800924c:	bf88      	it	hi
 800924e:	6013      	strhi	r3, [r2, #0]
 8009250:	4a2b      	ldr	r2, [pc, #172]	; (8009300 <_malloc_r+0x308>)
 8009252:	6811      	ldr	r1, [r2, #0]
 8009254:	428b      	cmp	r3, r1
 8009256:	bf88      	it	hi
 8009258:	6013      	strhi	r3, [r2, #0]
 800925a:	e0d0      	b.n	80093fe <_malloc_r+0x406>
 800925c:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009260:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009264:	d218      	bcs.n	8009298 <_malloc_r+0x2a0>
 8009266:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800926a:	3238      	adds	r2, #56	; 0x38
 800926c:	f102 0e01 	add.w	lr, r2, #1
 8009270:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009274:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009278:	45f0      	cmp	r8, lr
 800927a:	d12b      	bne.n	80092d4 <_malloc_r+0x2dc>
 800927c:	1092      	asrs	r2, r2, #2
 800927e:	f04f 0c01 	mov.w	ip, #1
 8009282:	fa0c f202 	lsl.w	r2, ip, r2
 8009286:	4310      	orrs	r0, r2
 8009288:	6070      	str	r0, [r6, #4]
 800928a:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800928e:	f8c8 4008 	str.w	r4, [r8, #8]
 8009292:	f8ce 400c 	str.w	r4, [lr, #12]
 8009296:	e762      	b.n	800915e <_malloc_r+0x166>
 8009298:	2a14      	cmp	r2, #20
 800929a:	d801      	bhi.n	80092a0 <_malloc_r+0x2a8>
 800929c:	325b      	adds	r2, #91	; 0x5b
 800929e:	e7e5      	b.n	800926c <_malloc_r+0x274>
 80092a0:	2a54      	cmp	r2, #84	; 0x54
 80092a2:	d803      	bhi.n	80092ac <_malloc_r+0x2b4>
 80092a4:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80092a8:	326e      	adds	r2, #110	; 0x6e
 80092aa:	e7df      	b.n	800926c <_malloc_r+0x274>
 80092ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80092b0:	d803      	bhi.n	80092ba <_malloc_r+0x2c2>
 80092b2:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80092b6:	3277      	adds	r2, #119	; 0x77
 80092b8:	e7d8      	b.n	800926c <_malloc_r+0x274>
 80092ba:	f240 5e54 	movw	lr, #1364	; 0x554
 80092be:	4572      	cmp	r2, lr
 80092c0:	bf9a      	itte	ls
 80092c2:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80092c6:	327c      	addls	r2, #124	; 0x7c
 80092c8:	227e      	movhi	r2, #126	; 0x7e
 80092ca:	e7cf      	b.n	800926c <_malloc_r+0x274>
 80092cc:	f8de e008 	ldr.w	lr, [lr, #8]
 80092d0:	45f0      	cmp	r8, lr
 80092d2:	d005      	beq.n	80092e0 <_malloc_r+0x2e8>
 80092d4:	f8de 2004 	ldr.w	r2, [lr, #4]
 80092d8:	f022 0203 	bic.w	r2, r2, #3
 80092dc:	4562      	cmp	r2, ip
 80092de:	d8f5      	bhi.n	80092cc <_malloc_r+0x2d4>
 80092e0:	f8de 800c 	ldr.w	r8, [lr, #12]
 80092e4:	e7d1      	b.n	800928a <_malloc_r+0x292>
 80092e6:	bf00      	nop
 80092e8:	200005b4 	.word	0x200005b4
 80092ec:	200005bc 	.word	0x200005bc
 80092f0:	20000be0 	.word	0x20000be0
 80092f4:	200009bc 	.word	0x200009bc
 80092f8:	20000bb0 	.word	0x20000bb0
 80092fc:	20000bd8 	.word	0x20000bd8
 8009300:	20000bdc 	.word	0x20000bdc
 8009304:	6860      	ldr	r0, [r4, #4]
 8009306:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800930a:	f020 0003 	bic.w	r0, r0, #3
 800930e:	eba0 0a07 	sub.w	sl, r0, r7
 8009312:	f1ba 0f0f 	cmp.w	sl, #15
 8009316:	dd12      	ble.n	800933e <_malloc_r+0x346>
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	19e2      	adds	r2, r4, r7
 800931c:	f047 0701 	orr.w	r7, r7, #1
 8009320:	6067      	str	r7, [r4, #4]
 8009322:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009326:	f8cc 3008 	str.w	r3, [ip, #8]
 800932a:	f04a 0301 	orr.w	r3, sl, #1
 800932e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009332:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009336:	6053      	str	r3, [r2, #4]
 8009338:	f844 a000 	str.w	sl, [r4, r0]
 800933c:	e68d      	b.n	800905a <_malloc_r+0x62>
 800933e:	f1ba 0f00 	cmp.w	sl, #0
 8009342:	db11      	blt.n	8009368 <_malloc_r+0x370>
 8009344:	4420      	add	r0, r4
 8009346:	6843      	ldr	r3, [r0, #4]
 8009348:	f043 0301 	orr.w	r3, r3, #1
 800934c:	6043      	str	r3, [r0, #4]
 800934e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009352:	4628      	mov	r0, r5
 8009354:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009358:	f8cc 3008 	str.w	r3, [ip, #8]
 800935c:	f000 f8ae 	bl	80094bc <__malloc_unlock>
 8009360:	4620      	mov	r0, r4
 8009362:	b003      	add	sp, #12
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	4664      	mov	r4, ip
 800936a:	e70e      	b.n	800918a <_malloc_r+0x192>
 800936c:	f858 0908 	ldr.w	r0, [r8], #-8
 8009370:	4540      	cmp	r0, r8
 8009372:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009376:	f43f af12 	beq.w	800919e <_malloc_r+0x1a6>
 800937a:	e717      	b.n	80091ac <_malloc_r+0x1b4>
 800937c:	3304      	adds	r3, #4
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	4210      	tst	r0, r2
 8009382:	d0fb      	beq.n	800937c <_malloc_r+0x384>
 8009384:	e6fb      	b.n	800917e <_malloc_r+0x186>
 8009386:	4673      	mov	r3, lr
 8009388:	e7fa      	b.n	8009380 <_malloc_r+0x388>
 800938a:	6810      	ldr	r0, [r2, #0]
 800938c:	3001      	adds	r0, #1
 800938e:	bf1b      	ittet	ne
 8009390:	eba4 0b0b 	subne.w	fp, r4, fp
 8009394:	eb0b 020e 	addne.w	r2, fp, lr
 8009398:	6014      	streq	r4, [r2, #0]
 800939a:	601a      	strne	r2, [r3, #0]
 800939c:	f014 0b07 	ands.w	fp, r4, #7
 80093a0:	bf1a      	itte	ne
 80093a2:	f1cb 0008 	rsbne	r0, fp, #8
 80093a6:	1824      	addne	r4, r4, r0
 80093a8:	4658      	moveq	r0, fp
 80093aa:	1862      	adds	r2, r4, r1
 80093ac:	ea02 010c 	and.w	r1, r2, ip
 80093b0:	4480      	add	r8, r0
 80093b2:	eba8 0801 	sub.w	r8, r8, r1
 80093b6:	ea08 080c 	and.w	r8, r8, ip
 80093ba:	4641      	mov	r1, r8
 80093bc:	4628      	mov	r0, r5
 80093be:	9201      	str	r2, [sp, #4]
 80093c0:	f000 fd36 	bl	8009e30 <_sbrk_r>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	9a01      	ldr	r2, [sp, #4]
 80093c8:	4b28      	ldr	r3, [pc, #160]	; (800946c <_malloc_r+0x474>)
 80093ca:	d107      	bne.n	80093dc <_malloc_r+0x3e4>
 80093cc:	f1bb 0f00 	cmp.w	fp, #0
 80093d0:	d023      	beq.n	800941a <_malloc_r+0x422>
 80093d2:	f1ab 0008 	sub.w	r0, fp, #8
 80093d6:	4410      	add	r0, r2
 80093d8:	f04f 0800 	mov.w	r8, #0
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	60b4      	str	r4, [r6, #8]
 80093e0:	1b00      	subs	r0, r0, r4
 80093e2:	4440      	add	r0, r8
 80093e4:	4442      	add	r2, r8
 80093e6:	f040 0001 	orr.w	r0, r0, #1
 80093ea:	45b2      	cmp	sl, r6
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	6060      	str	r0, [r4, #4]
 80093f0:	f43f af28 	beq.w	8009244 <_malloc_r+0x24c>
 80093f4:	f1b9 0f0f 	cmp.w	r9, #15
 80093f8:	d812      	bhi.n	8009420 <_malloc_r+0x428>
 80093fa:	2301      	movs	r3, #1
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	68b3      	ldr	r3, [r6, #8]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f023 0303 	bic.w	r3, r3, #3
 8009406:	42bb      	cmp	r3, r7
 8009408:	eba3 0207 	sub.w	r2, r3, r7
 800940c:	d301      	bcc.n	8009412 <_malloc_r+0x41a>
 800940e:	2a0f      	cmp	r2, #15
 8009410:	dc22      	bgt.n	8009458 <_malloc_r+0x460>
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f852 	bl	80094bc <__malloc_unlock>
 8009418:	e5fa      	b.n	8009010 <_malloc_r+0x18>
 800941a:	4610      	mov	r0, r2
 800941c:	46d8      	mov	r8, fp
 800941e:	e7dd      	b.n	80093dc <_malloc_r+0x3e4>
 8009420:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009424:	f1a9 090c 	sub.w	r9, r9, #12
 8009428:	f029 0907 	bic.w	r9, r9, #7
 800942c:	f002 0201 	and.w	r2, r2, #1
 8009430:	ea42 0209 	orr.w	r2, r2, r9
 8009434:	f8ca 2004 	str.w	r2, [sl, #4]
 8009438:	2105      	movs	r1, #5
 800943a:	eb0a 0209 	add.w	r2, sl, r9
 800943e:	f1b9 0f0f 	cmp.w	r9, #15
 8009442:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009446:	f67f aefd 	bls.w	8009244 <_malloc_r+0x24c>
 800944a:	f10a 0108 	add.w	r1, sl, #8
 800944e:	4628      	mov	r0, r5
 8009450:	f7ff f994 	bl	800877c <_free_r>
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <_malloc_r+0x474>)
 8009456:	e6f5      	b.n	8009244 <_malloc_r+0x24c>
 8009458:	68b4      	ldr	r4, [r6, #8]
 800945a:	f047 0301 	orr.w	r3, r7, #1
 800945e:	4427      	add	r7, r4
 8009460:	f042 0201 	orr.w	r2, r2, #1
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	60b7      	str	r7, [r6, #8]
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	e5f6      	b.n	800905a <_malloc_r+0x62>
 800946c:	20000bb0 	.word	0x20000bb0

08009470 <__ascii_mbtowc>:
 8009470:	b082      	sub	sp, #8
 8009472:	b901      	cbnz	r1, 8009476 <__ascii_mbtowc+0x6>
 8009474:	a901      	add	r1, sp, #4
 8009476:	b142      	cbz	r2, 800948a <__ascii_mbtowc+0x1a>
 8009478:	b14b      	cbz	r3, 800948e <__ascii_mbtowc+0x1e>
 800947a:	7813      	ldrb	r3, [r2, #0]
 800947c:	600b      	str	r3, [r1, #0]
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	1e10      	subs	r0, r2, #0
 8009482:	bf18      	it	ne
 8009484:	2001      	movne	r0, #1
 8009486:	b002      	add	sp, #8
 8009488:	4770      	bx	lr
 800948a:	4610      	mov	r0, r2
 800948c:	e7fb      	b.n	8009486 <__ascii_mbtowc+0x16>
 800948e:	f06f 0001 	mvn.w	r0, #1
 8009492:	e7f8      	b.n	8009486 <__ascii_mbtowc+0x16>

08009494 <memcpy>:
 8009494:	440a      	add	r2, r1
 8009496:	4291      	cmp	r1, r2
 8009498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800949c:	d100      	bne.n	80094a0 <memcpy+0xc>
 800949e:	4770      	bx	lr
 80094a0:	b510      	push	{r4, lr}
 80094a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094aa:	4291      	cmp	r1, r2
 80094ac:	d1f9      	bne.n	80094a2 <memcpy+0xe>
 80094ae:	bd10      	pop	{r4, pc}

080094b0 <__malloc_lock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_lock+0x8>)
 80094b2:	f7ff bd9f 	b.w	8008ff4 <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	20000bad 	.word	0x20000bad

080094bc <__malloc_unlock>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__malloc_unlock+0x8>)
 80094be:	f7ff bd9a 	b.w	8008ff6 <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	20000bad 	.word	0x20000bad

080094c8 <_Balloc>:
 80094c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	4605      	mov	r5, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	b17b      	cbz	r3, 80094f2 <_Balloc+0x2a>
 80094d2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80094d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80094d8:	b9a0      	cbnz	r0, 8009504 <_Balloc+0x3c>
 80094da:	2101      	movs	r1, #1
 80094dc:	fa01 f604 	lsl.w	r6, r1, r4
 80094e0:	1d72      	adds	r2, r6, #5
 80094e2:	0092      	lsls	r2, r2, #2
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 fdcf 	bl	800a088 <_calloc_r>
 80094ea:	b148      	cbz	r0, 8009500 <_Balloc+0x38>
 80094ec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80094f0:	e00b      	b.n	800950a <_Balloc+0x42>
 80094f2:	2221      	movs	r2, #33	; 0x21
 80094f4:	2104      	movs	r1, #4
 80094f6:	f000 fdc7 	bl	800a088 <_calloc_r>
 80094fa:	64e8      	str	r0, [r5, #76]	; 0x4c
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1e8      	bne.n	80094d2 <_Balloc+0xa>
 8009500:	2000      	movs	r0, #0
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	6802      	ldr	r2, [r0, #0]
 8009506:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800950a:	2300      	movs	r3, #0
 800950c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009510:	e7f7      	b.n	8009502 <_Balloc+0x3a>

08009512 <_Bfree>:
 8009512:	b131      	cbz	r1, 8009522 <_Bfree+0x10>
 8009514:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009516:	684a      	ldr	r2, [r1, #4]
 8009518:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800951c:	6008      	str	r0, [r1, #0]
 800951e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009522:	4770      	bx	lr

08009524 <__multadd>:
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	690d      	ldr	r5, [r1, #16]
 800952a:	4607      	mov	r7, r0
 800952c:	460c      	mov	r4, r1
 800952e:	461e      	mov	r6, r3
 8009530:	f101 0c14 	add.w	ip, r1, #20
 8009534:	2000      	movs	r0, #0
 8009536:	f8dc 3000 	ldr.w	r3, [ip]
 800953a:	b299      	uxth	r1, r3
 800953c:	fb02 6101 	mla	r1, r2, r1, r6
 8009540:	0c1e      	lsrs	r6, r3, #16
 8009542:	0c0b      	lsrs	r3, r1, #16
 8009544:	fb02 3306 	mla	r3, r2, r6, r3
 8009548:	b289      	uxth	r1, r1
 800954a:	3001      	adds	r0, #1
 800954c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009550:	4285      	cmp	r5, r0
 8009552:	f84c 1b04 	str.w	r1, [ip], #4
 8009556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800955a:	dcec      	bgt.n	8009536 <__multadd+0x12>
 800955c:	b30e      	cbz	r6, 80095a2 <__multadd+0x7e>
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	42ab      	cmp	r3, r5
 8009562:	dc19      	bgt.n	8009598 <__multadd+0x74>
 8009564:	6861      	ldr	r1, [r4, #4]
 8009566:	4638      	mov	r0, r7
 8009568:	3101      	adds	r1, #1
 800956a:	f7ff ffad 	bl	80094c8 <_Balloc>
 800956e:	4680      	mov	r8, r0
 8009570:	b928      	cbnz	r0, 800957e <__multadd+0x5a>
 8009572:	4602      	mov	r2, r0
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <__multadd+0x84>)
 8009576:	480d      	ldr	r0, [pc, #52]	; (80095ac <__multadd+0x88>)
 8009578:	21b5      	movs	r1, #181	; 0xb5
 800957a:	f000 fd67 	bl	800a04c <__assert_func>
 800957e:	6922      	ldr	r2, [r4, #16]
 8009580:	3202      	adds	r2, #2
 8009582:	f104 010c 	add.w	r1, r4, #12
 8009586:	0092      	lsls	r2, r2, #2
 8009588:	300c      	adds	r0, #12
 800958a:	f7ff ff83 	bl	8009494 <memcpy>
 800958e:	4621      	mov	r1, r4
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ffbe 	bl	8009512 <_Bfree>
 8009596:	4644      	mov	r4, r8
 8009598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800959c:	3501      	adds	r5, #1
 800959e:	615e      	str	r6, [r3, #20]
 80095a0:	6125      	str	r5, [r4, #16]
 80095a2:	4620      	mov	r0, r4
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	0800bdca 	.word	0x0800bdca
 80095ac:	0800beb0 	.word	0x0800beb0

080095b0 <__s2b>:
 80095b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b4:	460c      	mov	r4, r1
 80095b6:	4615      	mov	r5, r2
 80095b8:	461f      	mov	r7, r3
 80095ba:	2209      	movs	r2, #9
 80095bc:	3308      	adds	r3, #8
 80095be:	4606      	mov	r6, r0
 80095c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095c4:	2100      	movs	r1, #0
 80095c6:	2201      	movs	r2, #1
 80095c8:	429a      	cmp	r2, r3
 80095ca:	db09      	blt.n	80095e0 <__s2b+0x30>
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff ff7b 	bl	80094c8 <_Balloc>
 80095d2:	b940      	cbnz	r0, 80095e6 <__s2b+0x36>
 80095d4:	4602      	mov	r2, r0
 80095d6:	4b19      	ldr	r3, [pc, #100]	; (800963c <__s2b+0x8c>)
 80095d8:	4819      	ldr	r0, [pc, #100]	; (8009640 <__s2b+0x90>)
 80095da:	21ce      	movs	r1, #206	; 0xce
 80095dc:	f000 fd36 	bl	800a04c <__assert_func>
 80095e0:	0052      	lsls	r2, r2, #1
 80095e2:	3101      	adds	r1, #1
 80095e4:	e7f0      	b.n	80095c8 <__s2b+0x18>
 80095e6:	9b08      	ldr	r3, [sp, #32]
 80095e8:	6143      	str	r3, [r0, #20]
 80095ea:	2d09      	cmp	r5, #9
 80095ec:	f04f 0301 	mov.w	r3, #1
 80095f0:	6103      	str	r3, [r0, #16]
 80095f2:	dd16      	ble.n	8009622 <__s2b+0x72>
 80095f4:	f104 0909 	add.w	r9, r4, #9
 80095f8:	46c8      	mov	r8, r9
 80095fa:	442c      	add	r4, r5
 80095fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009600:	4601      	mov	r1, r0
 8009602:	3b30      	subs	r3, #48	; 0x30
 8009604:	220a      	movs	r2, #10
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ff8c 	bl	8009524 <__multadd>
 800960c:	45a0      	cmp	r8, r4
 800960e:	d1f5      	bne.n	80095fc <__s2b+0x4c>
 8009610:	f1a5 0408 	sub.w	r4, r5, #8
 8009614:	444c      	add	r4, r9
 8009616:	1b2d      	subs	r5, r5, r4
 8009618:	1963      	adds	r3, r4, r5
 800961a:	42bb      	cmp	r3, r7
 800961c:	db04      	blt.n	8009628 <__s2b+0x78>
 800961e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009622:	340a      	adds	r4, #10
 8009624:	2509      	movs	r5, #9
 8009626:	e7f6      	b.n	8009616 <__s2b+0x66>
 8009628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800962c:	4601      	mov	r1, r0
 800962e:	3b30      	subs	r3, #48	; 0x30
 8009630:	220a      	movs	r2, #10
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ff76 	bl	8009524 <__multadd>
 8009638:	e7ee      	b.n	8009618 <__s2b+0x68>
 800963a:	bf00      	nop
 800963c:	0800bdca 	.word	0x0800bdca
 8009640:	0800beb0 	.word	0x0800beb0

08009644 <__hi0bits>:
 8009644:	0c03      	lsrs	r3, r0, #16
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	b9d3      	cbnz	r3, 8009680 <__hi0bits+0x3c>
 800964a:	0400      	lsls	r0, r0, #16
 800964c:	2310      	movs	r3, #16
 800964e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009652:	bf04      	itt	eq
 8009654:	0200      	lsleq	r0, r0, #8
 8009656:	3308      	addeq	r3, #8
 8009658:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800965c:	bf04      	itt	eq
 800965e:	0100      	lsleq	r0, r0, #4
 8009660:	3304      	addeq	r3, #4
 8009662:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009666:	bf04      	itt	eq
 8009668:	0080      	lsleq	r0, r0, #2
 800966a:	3302      	addeq	r3, #2
 800966c:	2800      	cmp	r0, #0
 800966e:	db05      	blt.n	800967c <__hi0bits+0x38>
 8009670:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009674:	f103 0301 	add.w	r3, r3, #1
 8009678:	bf08      	it	eq
 800967a:	2320      	moveq	r3, #32
 800967c:	4618      	mov	r0, r3
 800967e:	4770      	bx	lr
 8009680:	2300      	movs	r3, #0
 8009682:	e7e4      	b.n	800964e <__hi0bits+0xa>

08009684 <__lo0bits>:
 8009684:	6803      	ldr	r3, [r0, #0]
 8009686:	f013 0207 	ands.w	r2, r3, #7
 800968a:	4601      	mov	r1, r0
 800968c:	d00b      	beq.n	80096a6 <__lo0bits+0x22>
 800968e:	07da      	lsls	r2, r3, #31
 8009690:	d423      	bmi.n	80096da <__lo0bits+0x56>
 8009692:	0798      	lsls	r0, r3, #30
 8009694:	bf49      	itett	mi
 8009696:	085b      	lsrmi	r3, r3, #1
 8009698:	089b      	lsrpl	r3, r3, #2
 800969a:	2001      	movmi	r0, #1
 800969c:	600b      	strmi	r3, [r1, #0]
 800969e:	bf5c      	itt	pl
 80096a0:	600b      	strpl	r3, [r1, #0]
 80096a2:	2002      	movpl	r0, #2
 80096a4:	4770      	bx	lr
 80096a6:	b298      	uxth	r0, r3
 80096a8:	b9a8      	cbnz	r0, 80096d6 <__lo0bits+0x52>
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	2010      	movs	r0, #16
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	b90a      	cbnz	r2, 80096b6 <__lo0bits+0x32>
 80096b2:	3008      	adds	r0, #8
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	071a      	lsls	r2, r3, #28
 80096b8:	bf04      	itt	eq
 80096ba:	091b      	lsreq	r3, r3, #4
 80096bc:	3004      	addeq	r0, #4
 80096be:	079a      	lsls	r2, r3, #30
 80096c0:	bf04      	itt	eq
 80096c2:	089b      	lsreq	r3, r3, #2
 80096c4:	3002      	addeq	r0, #2
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d403      	bmi.n	80096d2 <__lo0bits+0x4e>
 80096ca:	085b      	lsrs	r3, r3, #1
 80096cc:	f100 0001 	add.w	r0, r0, #1
 80096d0:	d005      	beq.n	80096de <__lo0bits+0x5a>
 80096d2:	600b      	str	r3, [r1, #0]
 80096d4:	4770      	bx	lr
 80096d6:	4610      	mov	r0, r2
 80096d8:	e7e9      	b.n	80096ae <__lo0bits+0x2a>
 80096da:	2000      	movs	r0, #0
 80096dc:	4770      	bx	lr
 80096de:	2020      	movs	r0, #32
 80096e0:	4770      	bx	lr
	...

080096e4 <__i2b>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	460c      	mov	r4, r1
 80096e8:	2101      	movs	r1, #1
 80096ea:	f7ff feed 	bl	80094c8 <_Balloc>
 80096ee:	4602      	mov	r2, r0
 80096f0:	b928      	cbnz	r0, 80096fe <__i2b+0x1a>
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <__i2b+0x24>)
 80096f4:	4805      	ldr	r0, [pc, #20]	; (800970c <__i2b+0x28>)
 80096f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096fa:	f000 fca7 	bl	800a04c <__assert_func>
 80096fe:	2301      	movs	r3, #1
 8009700:	6144      	str	r4, [r0, #20]
 8009702:	6103      	str	r3, [r0, #16]
 8009704:	bd10      	pop	{r4, pc}
 8009706:	bf00      	nop
 8009708:	0800bdca 	.word	0x0800bdca
 800970c:	0800beb0 	.word	0x0800beb0

08009710 <__multiply>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	4691      	mov	r9, r2
 8009716:	690a      	ldr	r2, [r1, #16]
 8009718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800971c:	429a      	cmp	r2, r3
 800971e:	bfb8      	it	lt
 8009720:	460b      	movlt	r3, r1
 8009722:	460c      	mov	r4, r1
 8009724:	bfbc      	itt	lt
 8009726:	464c      	movlt	r4, r9
 8009728:	4699      	movlt	r9, r3
 800972a:	6927      	ldr	r7, [r4, #16]
 800972c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	6861      	ldr	r1, [r4, #4]
 8009734:	eb07 060a 	add.w	r6, r7, sl
 8009738:	42b3      	cmp	r3, r6
 800973a:	b085      	sub	sp, #20
 800973c:	bfb8      	it	lt
 800973e:	3101      	addlt	r1, #1
 8009740:	f7ff fec2 	bl	80094c8 <_Balloc>
 8009744:	b930      	cbnz	r0, 8009754 <__multiply+0x44>
 8009746:	4602      	mov	r2, r0
 8009748:	4b44      	ldr	r3, [pc, #272]	; (800985c <__multiply+0x14c>)
 800974a:	4845      	ldr	r0, [pc, #276]	; (8009860 <__multiply+0x150>)
 800974c:	f240 115d 	movw	r1, #349	; 0x15d
 8009750:	f000 fc7c 	bl	800a04c <__assert_func>
 8009754:	f100 0514 	add.w	r5, r0, #20
 8009758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800975c:	462b      	mov	r3, r5
 800975e:	2200      	movs	r2, #0
 8009760:	4543      	cmp	r3, r8
 8009762:	d321      	bcc.n	80097a8 <__multiply+0x98>
 8009764:	f104 0314 	add.w	r3, r4, #20
 8009768:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800976c:	f109 0314 	add.w	r3, r9, #20
 8009770:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009774:	9202      	str	r2, [sp, #8]
 8009776:	1b3a      	subs	r2, r7, r4
 8009778:	3a15      	subs	r2, #21
 800977a:	f022 0203 	bic.w	r2, r2, #3
 800977e:	3204      	adds	r2, #4
 8009780:	f104 0115 	add.w	r1, r4, #21
 8009784:	428f      	cmp	r7, r1
 8009786:	bf38      	it	cc
 8009788:	2204      	movcc	r2, #4
 800978a:	9201      	str	r2, [sp, #4]
 800978c:	9a02      	ldr	r2, [sp, #8]
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	429a      	cmp	r2, r3
 8009792:	d80c      	bhi.n	80097ae <__multiply+0x9e>
 8009794:	2e00      	cmp	r6, #0
 8009796:	dd03      	ble.n	80097a0 <__multiply+0x90>
 8009798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800979c:	2b00      	cmp	r3, #0
 800979e:	d05a      	beq.n	8009856 <__multiply+0x146>
 80097a0:	6106      	str	r6, [r0, #16]
 80097a2:	b005      	add	sp, #20
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	f843 2b04 	str.w	r2, [r3], #4
 80097ac:	e7d8      	b.n	8009760 <__multiply+0x50>
 80097ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80097b2:	f1ba 0f00 	cmp.w	sl, #0
 80097b6:	d024      	beq.n	8009802 <__multiply+0xf2>
 80097b8:	f104 0e14 	add.w	lr, r4, #20
 80097bc:	46a9      	mov	r9, r5
 80097be:	f04f 0c00 	mov.w	ip, #0
 80097c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097c6:	f8d9 1000 	ldr.w	r1, [r9]
 80097ca:	fa1f fb82 	uxth.w	fp, r2
 80097ce:	b289      	uxth	r1, r1
 80097d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80097d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097d8:	f8d9 2000 	ldr.w	r2, [r9]
 80097dc:	4461      	add	r1, ip
 80097de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80097e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097ea:	b289      	uxth	r1, r1
 80097ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097f0:	4577      	cmp	r7, lr
 80097f2:	f849 1b04 	str.w	r1, [r9], #4
 80097f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097fa:	d8e2      	bhi.n	80097c2 <__multiply+0xb2>
 80097fc:	9a01      	ldr	r2, [sp, #4]
 80097fe:	f845 c002 	str.w	ip, [r5, r2]
 8009802:	9a03      	ldr	r2, [sp, #12]
 8009804:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009808:	3304      	adds	r3, #4
 800980a:	f1b9 0f00 	cmp.w	r9, #0
 800980e:	d020      	beq.n	8009852 <__multiply+0x142>
 8009810:	6829      	ldr	r1, [r5, #0]
 8009812:	f104 0c14 	add.w	ip, r4, #20
 8009816:	46ae      	mov	lr, r5
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	f8bc b000 	ldrh.w	fp, [ip]
 8009820:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009824:	fb09 220b 	mla	r2, r9, fp, r2
 8009828:	4492      	add	sl, r2
 800982a:	b289      	uxth	r1, r1
 800982c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009830:	f84e 1b04 	str.w	r1, [lr], #4
 8009834:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009838:	f8be 1000 	ldrh.w	r1, [lr]
 800983c:	0c12      	lsrs	r2, r2, #16
 800983e:	fb09 1102 	mla	r1, r9, r2, r1
 8009842:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009846:	4567      	cmp	r7, ip
 8009848:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800984c:	d8e6      	bhi.n	800981c <__multiply+0x10c>
 800984e:	9a01      	ldr	r2, [sp, #4]
 8009850:	50a9      	str	r1, [r5, r2]
 8009852:	3504      	adds	r5, #4
 8009854:	e79a      	b.n	800978c <__multiply+0x7c>
 8009856:	3e01      	subs	r6, #1
 8009858:	e79c      	b.n	8009794 <__multiply+0x84>
 800985a:	bf00      	nop
 800985c:	0800bdca 	.word	0x0800bdca
 8009860:	0800beb0 	.word	0x0800beb0

08009864 <__pow5mult>:
 8009864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009868:	4615      	mov	r5, r2
 800986a:	f012 0203 	ands.w	r2, r2, #3
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	d007      	beq.n	8009884 <__pow5mult+0x20>
 8009874:	4c1a      	ldr	r4, [pc, #104]	; (80098e0 <__pow5mult+0x7c>)
 8009876:	3a01      	subs	r2, #1
 8009878:	2300      	movs	r3, #0
 800987a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800987e:	f7ff fe51 	bl	8009524 <__multadd>
 8009882:	4607      	mov	r7, r0
 8009884:	10ad      	asrs	r5, r5, #2
 8009886:	d027      	beq.n	80098d8 <__pow5mult+0x74>
 8009888:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800988a:	b944      	cbnz	r4, 800989e <__pow5mult+0x3a>
 800988c:	f240 2171 	movw	r1, #625	; 0x271
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff ff27 	bl	80096e4 <__i2b>
 8009896:	2300      	movs	r3, #0
 8009898:	64b0      	str	r0, [r6, #72]	; 0x48
 800989a:	4604      	mov	r4, r0
 800989c:	6003      	str	r3, [r0, #0]
 800989e:	f04f 0900 	mov.w	r9, #0
 80098a2:	07eb      	lsls	r3, r5, #31
 80098a4:	d50a      	bpl.n	80098bc <__pow5mult+0x58>
 80098a6:	4639      	mov	r1, r7
 80098a8:	4622      	mov	r2, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff30 	bl	8009710 <__multiply>
 80098b0:	4639      	mov	r1, r7
 80098b2:	4680      	mov	r8, r0
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fe2c 	bl	8009512 <_Bfree>
 80098ba:	4647      	mov	r7, r8
 80098bc:	106d      	asrs	r5, r5, #1
 80098be:	d00b      	beq.n	80098d8 <__pow5mult+0x74>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	b938      	cbnz	r0, 80098d4 <__pow5mult+0x70>
 80098c4:	4622      	mov	r2, r4
 80098c6:	4621      	mov	r1, r4
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff ff21 	bl	8009710 <__multiply>
 80098ce:	6020      	str	r0, [r4, #0]
 80098d0:	f8c0 9000 	str.w	r9, [r0]
 80098d4:	4604      	mov	r4, r0
 80098d6:	e7e4      	b.n	80098a2 <__pow5mult+0x3e>
 80098d8:	4638      	mov	r0, r7
 80098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098de:	bf00      	nop
 80098e0:	0800c000 	.word	0x0800c000

080098e4 <__lshift>:
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	460c      	mov	r4, r1
 80098ea:	6849      	ldr	r1, [r1, #4]
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	4607      	mov	r7, r0
 80098f6:	4691      	mov	r9, r2
 80098f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098fc:	f108 0601 	add.w	r6, r8, #1
 8009900:	42b3      	cmp	r3, r6
 8009902:	db0b      	blt.n	800991c <__lshift+0x38>
 8009904:	4638      	mov	r0, r7
 8009906:	f7ff fddf 	bl	80094c8 <_Balloc>
 800990a:	4605      	mov	r5, r0
 800990c:	b948      	cbnz	r0, 8009922 <__lshift+0x3e>
 800990e:	4602      	mov	r2, r0
 8009910:	4b2a      	ldr	r3, [pc, #168]	; (80099bc <__lshift+0xd8>)
 8009912:	482b      	ldr	r0, [pc, #172]	; (80099c0 <__lshift+0xdc>)
 8009914:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009918:	f000 fb98 	bl	800a04c <__assert_func>
 800991c:	3101      	adds	r1, #1
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	e7ee      	b.n	8009900 <__lshift+0x1c>
 8009922:	2300      	movs	r3, #0
 8009924:	f100 0114 	add.w	r1, r0, #20
 8009928:	f100 0210 	add.w	r2, r0, #16
 800992c:	4618      	mov	r0, r3
 800992e:	4553      	cmp	r3, sl
 8009930:	db37      	blt.n	80099a2 <__lshift+0xbe>
 8009932:	6920      	ldr	r0, [r4, #16]
 8009934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009938:	f104 0314 	add.w	r3, r4, #20
 800993c:	f019 091f 	ands.w	r9, r9, #31
 8009940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009948:	d02f      	beq.n	80099aa <__lshift+0xc6>
 800994a:	f1c9 0e20 	rsb	lr, r9, #32
 800994e:	468a      	mov	sl, r1
 8009950:	f04f 0c00 	mov.w	ip, #0
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	fa02 f209 	lsl.w	r2, r2, r9
 800995a:	ea42 020c 	orr.w	r2, r2, ip
 800995e:	f84a 2b04 	str.w	r2, [sl], #4
 8009962:	f853 2b04 	ldr.w	r2, [r3], #4
 8009966:	4298      	cmp	r0, r3
 8009968:	fa22 fc0e 	lsr.w	ip, r2, lr
 800996c:	d8f2      	bhi.n	8009954 <__lshift+0x70>
 800996e:	1b03      	subs	r3, r0, r4
 8009970:	3b15      	subs	r3, #21
 8009972:	f023 0303 	bic.w	r3, r3, #3
 8009976:	3304      	adds	r3, #4
 8009978:	f104 0215 	add.w	r2, r4, #21
 800997c:	4290      	cmp	r0, r2
 800997e:	bf38      	it	cc
 8009980:	2304      	movcc	r3, #4
 8009982:	f841 c003 	str.w	ip, [r1, r3]
 8009986:	f1bc 0f00 	cmp.w	ip, #0
 800998a:	d001      	beq.n	8009990 <__lshift+0xac>
 800998c:	f108 0602 	add.w	r6, r8, #2
 8009990:	3e01      	subs	r6, #1
 8009992:	4638      	mov	r0, r7
 8009994:	612e      	str	r6, [r5, #16]
 8009996:	4621      	mov	r1, r4
 8009998:	f7ff fdbb 	bl	8009512 <_Bfree>
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099a6:	3301      	adds	r3, #1
 80099a8:	e7c1      	b.n	800992e <__lshift+0x4a>
 80099aa:	3904      	subs	r1, #4
 80099ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80099b4:	4298      	cmp	r0, r3
 80099b6:	d8f9      	bhi.n	80099ac <__lshift+0xc8>
 80099b8:	e7ea      	b.n	8009990 <__lshift+0xac>
 80099ba:	bf00      	nop
 80099bc:	0800bdca 	.word	0x0800bdca
 80099c0:	0800beb0 	.word	0x0800beb0

080099c4 <__mcmp>:
 80099c4:	b530      	push	{r4, r5, lr}
 80099c6:	6902      	ldr	r2, [r0, #16]
 80099c8:	690c      	ldr	r4, [r1, #16]
 80099ca:	1b12      	subs	r2, r2, r4
 80099cc:	d10e      	bne.n	80099ec <__mcmp+0x28>
 80099ce:	f100 0314 	add.w	r3, r0, #20
 80099d2:	3114      	adds	r1, #20
 80099d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099e4:	42a5      	cmp	r5, r4
 80099e6:	d003      	beq.n	80099f0 <__mcmp+0x2c>
 80099e8:	d305      	bcc.n	80099f6 <__mcmp+0x32>
 80099ea:	2201      	movs	r2, #1
 80099ec:	4610      	mov	r0, r2
 80099ee:	bd30      	pop	{r4, r5, pc}
 80099f0:	4283      	cmp	r3, r0
 80099f2:	d3f3      	bcc.n	80099dc <__mcmp+0x18>
 80099f4:	e7fa      	b.n	80099ec <__mcmp+0x28>
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099fa:	e7f7      	b.n	80099ec <__mcmp+0x28>

080099fc <__mdiff>:
 80099fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	4606      	mov	r6, r0
 8009a04:	4611      	mov	r1, r2
 8009a06:	4620      	mov	r0, r4
 8009a08:	4690      	mov	r8, r2
 8009a0a:	f7ff ffdb 	bl	80099c4 <__mcmp>
 8009a0e:	1e05      	subs	r5, r0, #0
 8009a10:	d110      	bne.n	8009a34 <__mdiff+0x38>
 8009a12:	4629      	mov	r1, r5
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fd57 	bl	80094c8 <_Balloc>
 8009a1a:	b930      	cbnz	r0, 8009a2a <__mdiff+0x2e>
 8009a1c:	4b3a      	ldr	r3, [pc, #232]	; (8009b08 <__mdiff+0x10c>)
 8009a1e:	4602      	mov	r2, r0
 8009a20:	f240 2132 	movw	r1, #562	; 0x232
 8009a24:	4839      	ldr	r0, [pc, #228]	; (8009b0c <__mdiff+0x110>)
 8009a26:	f000 fb11 	bl	800a04c <__assert_func>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a34:	bfa4      	itt	ge
 8009a36:	4643      	movge	r3, r8
 8009a38:	46a0      	movge	r8, r4
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a40:	bfa6      	itte	ge
 8009a42:	461c      	movge	r4, r3
 8009a44:	2500      	movge	r5, #0
 8009a46:	2501      	movlt	r5, #1
 8009a48:	f7ff fd3e 	bl	80094c8 <_Balloc>
 8009a4c:	b920      	cbnz	r0, 8009a58 <__mdiff+0x5c>
 8009a4e:	4b2e      	ldr	r3, [pc, #184]	; (8009b08 <__mdiff+0x10c>)
 8009a50:	4602      	mov	r2, r0
 8009a52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a56:	e7e5      	b.n	8009a24 <__mdiff+0x28>
 8009a58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a5c:	6926      	ldr	r6, [r4, #16]
 8009a5e:	60c5      	str	r5, [r0, #12]
 8009a60:	f104 0914 	add.w	r9, r4, #20
 8009a64:	f108 0514 	add.w	r5, r8, #20
 8009a68:	f100 0e14 	add.w	lr, r0, #20
 8009a6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a74:	f108 0210 	add.w	r2, r8, #16
 8009a78:	46f2      	mov	sl, lr
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a84:	fa1f f883 	uxth.w	r8, r3
 8009a88:	fa11 f18b 	uxtah	r1, r1, fp
 8009a8c:	0c1b      	lsrs	r3, r3, #16
 8009a8e:	eba1 0808 	sub.w	r8, r1, r8
 8009a92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a9a:	fa1f f888 	uxth.w	r8, r8
 8009a9e:	1419      	asrs	r1, r3, #16
 8009aa0:	454e      	cmp	r6, r9
 8009aa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aa6:	f84a 3b04 	str.w	r3, [sl], #4
 8009aaa:	d8e7      	bhi.n	8009a7c <__mdiff+0x80>
 8009aac:	1b33      	subs	r3, r6, r4
 8009aae:	3b15      	subs	r3, #21
 8009ab0:	f023 0303 	bic.w	r3, r3, #3
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	3415      	adds	r4, #21
 8009ab8:	42a6      	cmp	r6, r4
 8009aba:	bf38      	it	cc
 8009abc:	2304      	movcc	r3, #4
 8009abe:	441d      	add	r5, r3
 8009ac0:	4473      	add	r3, lr
 8009ac2:	469e      	mov	lr, r3
 8009ac4:	462e      	mov	r6, r5
 8009ac6:	4566      	cmp	r6, ip
 8009ac8:	d30e      	bcc.n	8009ae8 <__mdiff+0xec>
 8009aca:	f10c 0203 	add.w	r2, ip, #3
 8009ace:	1b52      	subs	r2, r2, r5
 8009ad0:	f022 0203 	bic.w	r2, r2, #3
 8009ad4:	3d03      	subs	r5, #3
 8009ad6:	45ac      	cmp	ip, r5
 8009ad8:	bf38      	it	cc
 8009ada:	2200      	movcc	r2, #0
 8009adc:	441a      	add	r2, r3
 8009ade:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ae2:	b17b      	cbz	r3, 8009b04 <__mdiff+0x108>
 8009ae4:	6107      	str	r7, [r0, #16]
 8009ae6:	e7a3      	b.n	8009a30 <__mdiff+0x34>
 8009ae8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009aec:	fa11 f288 	uxtah	r2, r1, r8
 8009af0:	1414      	asrs	r4, r2, #16
 8009af2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009af6:	b292      	uxth	r2, r2
 8009af8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009afc:	f84e 2b04 	str.w	r2, [lr], #4
 8009b00:	1421      	asrs	r1, r4, #16
 8009b02:	e7e0      	b.n	8009ac6 <__mdiff+0xca>
 8009b04:	3f01      	subs	r7, #1
 8009b06:	e7ea      	b.n	8009ade <__mdiff+0xe2>
 8009b08:	0800bdca 	.word	0x0800bdca
 8009b0c:	0800beb0 	.word	0x0800beb0

08009b10 <__ulp>:
 8009b10:	b082      	sub	sp, #8
 8009b12:	ed8d 0b00 	vstr	d0, [sp]
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	4912      	ldr	r1, [pc, #72]	; (8009b64 <__ulp+0x54>)
 8009b1a:	4019      	ands	r1, r3
 8009b1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b20:	2900      	cmp	r1, #0
 8009b22:	dd05      	ble.n	8009b30 <__ulp+0x20>
 8009b24:	2200      	movs	r2, #0
 8009b26:	460b      	mov	r3, r1
 8009b28:	ec43 2b10 	vmov	d0, r2, r3
 8009b2c:	b002      	add	sp, #8
 8009b2e:	4770      	bx	lr
 8009b30:	4249      	negs	r1, r1
 8009b32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	f04f 0300 	mov.w	r3, #0
 8009b42:	da04      	bge.n	8009b4e <__ulp+0x3e>
 8009b44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b48:	fa41 f300 	asr.w	r3, r1, r0
 8009b4c:	e7ec      	b.n	8009b28 <__ulp+0x18>
 8009b4e:	f1a0 0114 	sub.w	r1, r0, #20
 8009b52:	291e      	cmp	r1, #30
 8009b54:	bfda      	itte	le
 8009b56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b5e:	2101      	movgt	r1, #1
 8009b60:	460a      	mov	r2, r1
 8009b62:	e7e1      	b.n	8009b28 <__ulp+0x18>
 8009b64:	7ff00000 	.word	0x7ff00000

08009b68 <__b2d>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	6905      	ldr	r5, [r0, #16]
 8009b6c:	f100 0714 	add.w	r7, r0, #20
 8009b70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b74:	1f2e      	subs	r6, r5, #4
 8009b76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7ff fd62 	bl	8009644 <__hi0bits>
 8009b80:	f1c0 0320 	rsb	r3, r0, #32
 8009b84:	280a      	cmp	r0, #10
 8009b86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c04 <__b2d+0x9c>
 8009b8a:	600b      	str	r3, [r1, #0]
 8009b8c:	dc14      	bgt.n	8009bb8 <__b2d+0x50>
 8009b8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b92:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b96:	42b7      	cmp	r7, r6
 8009b98:	ea41 030c 	orr.w	r3, r1, ip
 8009b9c:	bf34      	ite	cc
 8009b9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ba2:	2100      	movcs	r1, #0
 8009ba4:	3015      	adds	r0, #21
 8009ba6:	fa04 f000 	lsl.w	r0, r4, r0
 8009baa:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bae:	ea40 0201 	orr.w	r2, r0, r1
 8009bb2:	ec43 2b10 	vmov	d0, r2, r3
 8009bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb8:	42b7      	cmp	r7, r6
 8009bba:	bf3a      	itte	cc
 8009bbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bc4:	2100      	movcs	r1, #0
 8009bc6:	380b      	subs	r0, #11
 8009bc8:	d017      	beq.n	8009bfa <__b2d+0x92>
 8009bca:	f1c0 0c20 	rsb	ip, r0, #32
 8009bce:	fa04 f500 	lsl.w	r5, r4, r0
 8009bd2:	42be      	cmp	r6, r7
 8009bd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8009bd8:	ea45 0504 	orr.w	r5, r5, r4
 8009bdc:	bf8c      	ite	hi
 8009bde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009be2:	2400      	movls	r4, #0
 8009be4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009be8:	fa01 f000 	lsl.w	r0, r1, r0
 8009bec:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bf4:	ea40 0204 	orr.w	r2, r0, r4
 8009bf8:	e7db      	b.n	8009bb2 <__b2d+0x4a>
 8009bfa:	ea44 030c 	orr.w	r3, r4, ip
 8009bfe:	460a      	mov	r2, r1
 8009c00:	e7d7      	b.n	8009bb2 <__b2d+0x4a>
 8009c02:	bf00      	nop
 8009c04:	3ff00000 	.word	0x3ff00000

08009c08 <__d2b>:
 8009c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	4689      	mov	r9, r1
 8009c0e:	2101      	movs	r1, #1
 8009c10:	ec57 6b10 	vmov	r6, r7, d0
 8009c14:	4690      	mov	r8, r2
 8009c16:	f7ff fc57 	bl	80094c8 <_Balloc>
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	b930      	cbnz	r0, 8009c2c <__d2b+0x24>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b25      	ldr	r3, [pc, #148]	; (8009cb8 <__d2b+0xb0>)
 8009c22:	4826      	ldr	r0, [pc, #152]	; (8009cbc <__d2b+0xb4>)
 8009c24:	f240 310a 	movw	r1, #778	; 0x30a
 8009c28:	f000 fa10 	bl	800a04c <__assert_func>
 8009c2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c34:	bb35      	cbnz	r5, 8009c84 <__d2b+0x7c>
 8009c36:	2e00      	cmp	r6, #0
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	d028      	beq.n	8009c8e <__d2b+0x86>
 8009c3c:	4668      	mov	r0, sp
 8009c3e:	9600      	str	r6, [sp, #0]
 8009c40:	f7ff fd20 	bl	8009684 <__lo0bits>
 8009c44:	9900      	ldr	r1, [sp, #0]
 8009c46:	b300      	cbz	r0, 8009c8a <__d2b+0x82>
 8009c48:	9a01      	ldr	r2, [sp, #4]
 8009c4a:	f1c0 0320 	rsb	r3, r0, #32
 8009c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c52:	430b      	orrs	r3, r1
 8009c54:	40c2      	lsrs	r2, r0
 8009c56:	6163      	str	r3, [r4, #20]
 8009c58:	9201      	str	r2, [sp, #4]
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	61a3      	str	r3, [r4, #24]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bf14      	ite	ne
 8009c62:	2202      	movne	r2, #2
 8009c64:	2201      	moveq	r2, #1
 8009c66:	6122      	str	r2, [r4, #16]
 8009c68:	b1d5      	cbz	r5, 8009ca0 <__d2b+0x98>
 8009c6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c6e:	4405      	add	r5, r0
 8009c70:	f8c9 5000 	str.w	r5, [r9]
 8009c74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c78:	f8c8 0000 	str.w	r0, [r8]
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	b003      	add	sp, #12
 8009c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c88:	e7d5      	b.n	8009c36 <__d2b+0x2e>
 8009c8a:	6161      	str	r1, [r4, #20]
 8009c8c:	e7e5      	b.n	8009c5a <__d2b+0x52>
 8009c8e:	a801      	add	r0, sp, #4
 8009c90:	f7ff fcf8 	bl	8009684 <__lo0bits>
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	6163      	str	r3, [r4, #20]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	6122      	str	r2, [r4, #16]
 8009c9c:	3020      	adds	r0, #32
 8009c9e:	e7e3      	b.n	8009c68 <__d2b+0x60>
 8009ca0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ca8:	f8c9 0000 	str.w	r0, [r9]
 8009cac:	6918      	ldr	r0, [r3, #16]
 8009cae:	f7ff fcc9 	bl	8009644 <__hi0bits>
 8009cb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cb6:	e7df      	b.n	8009c78 <__d2b+0x70>
 8009cb8:	0800bdca 	.word	0x0800bdca
 8009cbc:	0800beb0 	.word	0x0800beb0

08009cc0 <__ratio>:
 8009cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	4688      	mov	r8, r1
 8009cc6:	4669      	mov	r1, sp
 8009cc8:	4681      	mov	r9, r0
 8009cca:	f7ff ff4d 	bl	8009b68 <__b2d>
 8009cce:	a901      	add	r1, sp, #4
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	ec55 4b10 	vmov	r4, r5, d0
 8009cd6:	f7ff ff47 	bl	8009b68 <__b2d>
 8009cda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ce2:	eba3 0c02 	sub.w	ip, r3, r2
 8009ce6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cea:	1a9b      	subs	r3, r3, r2
 8009cec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cf0:	ec51 0b10 	vmov	r0, r1, d0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfd6      	itet	le
 8009cf8:	460a      	movle	r2, r1
 8009cfa:	462a      	movgt	r2, r5
 8009cfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d00:	468b      	mov	fp, r1
 8009d02:	462f      	mov	r7, r5
 8009d04:	bfd4      	ite	le
 8009d06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d0e:	4620      	mov	r0, r4
 8009d10:	ee10 2a10 	vmov	r2, s0
 8009d14:	465b      	mov	r3, fp
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fda8 	bl	800086c <__aeabi_ddiv>
 8009d1c:	ec41 0b10 	vmov	d0, r0, r1
 8009d20:	b003      	add	sp, #12
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d26 <__copybits>:
 8009d26:	3901      	subs	r1, #1
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	1149      	asrs	r1, r1, #5
 8009d2c:	6914      	ldr	r4, [r2, #16]
 8009d2e:	3101      	adds	r1, #1
 8009d30:	f102 0314 	add.w	r3, r2, #20
 8009d34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d3c:	1f05      	subs	r5, r0, #4
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	d30c      	bcc.n	8009d5c <__copybits+0x36>
 8009d42:	1aa3      	subs	r3, r4, r2
 8009d44:	3b11      	subs	r3, #17
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	3211      	adds	r2, #17
 8009d4c:	42a2      	cmp	r2, r4
 8009d4e:	bf88      	it	hi
 8009d50:	2300      	movhi	r3, #0
 8009d52:	4418      	add	r0, r3
 8009d54:	2300      	movs	r3, #0
 8009d56:	4288      	cmp	r0, r1
 8009d58:	d305      	bcc.n	8009d66 <__copybits+0x40>
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d60:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d64:	e7eb      	b.n	8009d3e <__copybits+0x18>
 8009d66:	f840 3b04 	str.w	r3, [r0], #4
 8009d6a:	e7f4      	b.n	8009d56 <__copybits+0x30>

08009d6c <__any_on>:
 8009d6c:	f100 0214 	add.w	r2, r0, #20
 8009d70:	6900      	ldr	r0, [r0, #16]
 8009d72:	114b      	asrs	r3, r1, #5
 8009d74:	4298      	cmp	r0, r3
 8009d76:	b510      	push	{r4, lr}
 8009d78:	db11      	blt.n	8009d9e <__any_on+0x32>
 8009d7a:	dd0a      	ble.n	8009d92 <__any_on+0x26>
 8009d7c:	f011 011f 	ands.w	r1, r1, #31
 8009d80:	d007      	beq.n	8009d92 <__any_on+0x26>
 8009d82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d86:	fa24 f001 	lsr.w	r0, r4, r1
 8009d8a:	fa00 f101 	lsl.w	r1, r0, r1
 8009d8e:	428c      	cmp	r4, r1
 8009d90:	d10b      	bne.n	8009daa <__any_on+0x3e>
 8009d92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d803      	bhi.n	8009da2 <__any_on+0x36>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	4603      	mov	r3, r0
 8009da0:	e7f7      	b.n	8009d92 <__any_on+0x26>
 8009da2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d0f5      	beq.n	8009d96 <__any_on+0x2a>
 8009daa:	2001      	movs	r0, #1
 8009dac:	e7f6      	b.n	8009d9c <__any_on+0x30>
	...

08009db0 <frexp>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	2100      	movs	r1, #0
 8009db4:	ec55 4b10 	vmov	r4, r5, d0
 8009db8:	6001      	str	r1, [r0, #0]
 8009dba:	4916      	ldr	r1, [pc, #88]	; (8009e14 <frexp+0x64>)
 8009dbc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009dc0:	428a      	cmp	r2, r1
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	462b      	mov	r3, r5
 8009dc6:	dc22      	bgt.n	8009e0e <frexp+0x5e>
 8009dc8:	ee10 1a10 	vmov	r1, s0
 8009dcc:	4311      	orrs	r1, r2
 8009dce:	d01e      	beq.n	8009e0e <frexp+0x5e>
 8009dd0:	4911      	ldr	r1, [pc, #68]	; (8009e18 <frexp+0x68>)
 8009dd2:	4029      	ands	r1, r5
 8009dd4:	b969      	cbnz	r1, 8009df2 <frexp+0x42>
 8009dd6:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <frexp+0x6c>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	ee10 0a10 	vmov	r0, s0
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fc1a 	bl	8000618 <__aeabi_dmul>
 8009de4:	460b      	mov	r3, r1
 8009de6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009dea:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8009dee:	4604      	mov	r4, r0
 8009df0:	6031      	str	r1, [r6, #0]
 8009df2:	6831      	ldr	r1, [r6, #0]
 8009df4:	1512      	asrs	r2, r2, #20
 8009df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dfa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8009dfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e02:	440a      	add	r2, r1
 8009e04:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8009e08:	6032      	str	r2, [r6, #0]
 8009e0a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009e0e:	ec45 4b10 	vmov	d0, r4, r5
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	7fefffff 	.word	0x7fefffff
 8009e18:	7ff00000 	.word	0x7ff00000
 8009e1c:	43500000 	.word	0x43500000

08009e20 <nan>:
 8009e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e28 <nan+0x8>
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	7ff80000 	.word	0x7ff80000

08009e30 <_sbrk_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_sbrk_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f7 fece 	bl	8001bdc <_sbrk>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_sbrk_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_sbrk_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000be4 	.word	0x20000be4

08009e50 <strncmp>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	b17a      	cbz	r2, 8009e74 <strncmp+0x24>
 8009e54:	4603      	mov	r3, r0
 8009e56:	3901      	subs	r1, #1
 8009e58:	1884      	adds	r4, r0, r2
 8009e5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e62:	4290      	cmp	r0, r2
 8009e64:	d101      	bne.n	8009e6a <strncmp+0x1a>
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	d101      	bne.n	8009e6e <strncmp+0x1e>
 8009e6a:	1a80      	subs	r0, r0, r2
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d1f3      	bne.n	8009e5a <strncmp+0xa>
 8009e72:	e7fa      	b.n	8009e6a <strncmp+0x1a>
 8009e74:	4610      	mov	r0, r2
 8009e76:	e7f9      	b.n	8009e6c <strncmp+0x1c>

08009e78 <strncpy>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	3901      	subs	r1, #1
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	b132      	cbz	r2, 8009e8e <strncpy+0x16>
 8009e80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e84:	f803 4b01 	strb.w	r4, [r3], #1
 8009e88:	3a01      	subs	r2, #1
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	d1f7      	bne.n	8009e7e <strncpy+0x6>
 8009e8e:	441a      	add	r2, r3
 8009e90:	2100      	movs	r1, #0
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d100      	bne.n	8009e98 <strncpy+0x20>
 8009e96:	bd10      	pop	{r4, pc}
 8009e98:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9c:	e7f9      	b.n	8009e92 <strncpy+0x1a>

08009e9e <__ssprint_r>:
 8009e9e:	6893      	ldr	r3, [r2, #8]
 8009ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	4617      	mov	r7, r2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d061      	beq.n	8009f72 <__ssprint_r+0xd4>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8d2 a000 	ldr.w	sl, [r2]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	469b      	mov	fp, r3
 8009eb8:	f1bb 0f00 	cmp.w	fp, #0
 8009ebc:	d02b      	beq.n	8009f16 <__ssprint_r+0x78>
 8009ebe:	68a6      	ldr	r6, [r4, #8]
 8009ec0:	455e      	cmp	r6, fp
 8009ec2:	d844      	bhi.n	8009f4e <__ssprint_r+0xb0>
 8009ec4:	89a2      	ldrh	r2, [r4, #12]
 8009ec6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009eca:	d03e      	beq.n	8009f4a <__ssprint_r+0xac>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	6921      	ldr	r1, [r4, #16]
 8009ed0:	6965      	ldr	r5, [r4, #20]
 8009ed2:	eba0 0901 	sub.w	r9, r0, r1
 8009ed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ede:	f109 0001 	add.w	r0, r9, #1
 8009ee2:	106d      	asrs	r5, r5, #1
 8009ee4:	4458      	add	r0, fp
 8009ee6:	4285      	cmp	r5, r0
 8009ee8:	bf38      	it	cc
 8009eea:	4605      	movcc	r5, r0
 8009eec:	0553      	lsls	r3, r2, #21
 8009eee:	d545      	bpl.n	8009f7c <__ssprint_r+0xde>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f7ff f880 	bl	8008ff8 <_malloc_r>
 8009ef8:	4606      	mov	r6, r0
 8009efa:	b9a0      	cbnz	r0, 8009f26 <__ssprint_r+0x88>
 8009efc:	230c      	movs	r3, #12
 8009efe:	f8c8 3000 	str.w	r3, [r8]
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f14:	e02f      	b.n	8009f76 <__ssprint_r+0xd8>
 8009f16:	f8da 3000 	ldr.w	r3, [sl]
 8009f1a:	f8da b004 	ldr.w	fp, [sl, #4]
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	f10a 0a08 	add.w	sl, sl, #8
 8009f24:	e7c8      	b.n	8009eb8 <__ssprint_r+0x1a>
 8009f26:	464a      	mov	r2, r9
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	f7ff fab3 	bl	8009494 <memcpy>
 8009f2e:	89a2      	ldrh	r2, [r4, #12]
 8009f30:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f38:	81a2      	strh	r2, [r4, #12]
 8009f3a:	6126      	str	r6, [r4, #16]
 8009f3c:	6165      	str	r5, [r4, #20]
 8009f3e:	444e      	add	r6, r9
 8009f40:	eba5 0509 	sub.w	r5, r5, r9
 8009f44:	6026      	str	r6, [r4, #0]
 8009f46:	60a5      	str	r5, [r4, #8]
 8009f48:	465e      	mov	r6, fp
 8009f4a:	455e      	cmp	r6, fp
 8009f4c:	d900      	bls.n	8009f50 <__ssprint_r+0xb2>
 8009f4e:	465e      	mov	r6, fp
 8009f50:	4632      	mov	r2, r6
 8009f52:	9901      	ldr	r1, [sp, #4]
 8009f54:	6820      	ldr	r0, [r4, #0]
 8009f56:	f000 f8df 	bl	800a118 <memmove>
 8009f5a:	68a2      	ldr	r2, [r4, #8]
 8009f5c:	1b92      	subs	r2, r2, r6
 8009f5e:	60a2      	str	r2, [r4, #8]
 8009f60:	6822      	ldr	r2, [r4, #0]
 8009f62:	4432      	add	r2, r6
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	eba2 030b 	sub.w	r3, r2, fp
 8009f6c:	60bb      	str	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1d1      	bne.n	8009f16 <__ssprint_r+0x78>
 8009f72:	2000      	movs	r0, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	b003      	add	sp, #12
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f000 f8e4 	bl	800a14c <_realloc_r>
 8009f84:	4606      	mov	r6, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d1d7      	bne.n	8009f3a <__ssprint_r+0x9c>
 8009f8a:	6921      	ldr	r1, [r4, #16]
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	f7fe fbf5 	bl	800877c <_free_r>
 8009f92:	e7b3      	b.n	8009efc <__ssprint_r+0x5e>

08009f94 <sysconf>:
 8009f94:	2808      	cmp	r0, #8
 8009f96:	b508      	push	{r3, lr}
 8009f98:	d006      	beq.n	8009fa8 <sysconf+0x14>
 8009f9a:	f7fb fbdf 	bl	800575c <__errno>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa6:	bd08      	pop	{r3, pc}
 8009fa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009fac:	e7fb      	b.n	8009fa6 <sysconf+0x12>

08009fae <__ascii_wctomb>:
 8009fae:	b149      	cbz	r1, 8009fc4 <__ascii_wctomb+0x16>
 8009fb0:	2aff      	cmp	r2, #255	; 0xff
 8009fb2:	bf85      	ittet	hi
 8009fb4:	238a      	movhi	r3, #138	; 0x8a
 8009fb6:	6003      	strhi	r3, [r0, #0]
 8009fb8:	700a      	strbls	r2, [r1, #0]
 8009fba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fbe:	bf98      	it	ls
 8009fc0:	2001      	movls	r0, #1
 8009fc2:	4770      	bx	lr
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	4770      	bx	lr

08009fc8 <__register_exitproc>:
 8009fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fcc:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a048 <__register_exitproc+0x80>
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	f8da 0000 	ldr.w	r0, [sl]
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	460f      	mov	r7, r1
 8009fda:	4691      	mov	r9, r2
 8009fdc:	f7ff f80a 	bl	8008ff4 <__retarget_lock_acquire_recursive>
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <__register_exitproc+0x7c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8009fe8:	b91c      	cbnz	r4, 8009ff2 <__register_exitproc+0x2a>
 8009fea:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009fee:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009ff2:	6865      	ldr	r5, [r4, #4]
 8009ff4:	f8da 0000 	ldr.w	r0, [sl]
 8009ff8:	2d1f      	cmp	r5, #31
 8009ffa:	dd05      	ble.n	800a008 <__register_exitproc+0x40>
 8009ffc:	f7fe fffb 	bl	8008ff6 <__retarget_lock_release_recursive>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	b19e      	cbz	r6, 800a032 <__register_exitproc+0x6a>
 800a00a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a00e:	2201      	movs	r2, #1
 800a010:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a014:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800a018:	40aa      	lsls	r2, r5
 800a01a:	4313      	orrs	r3, r2
 800a01c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800a020:	2e02      	cmp	r6, #2
 800a022:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a026:	bf02      	ittt	eq
 800a028:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800a02c:	4313      	orreq	r3, r2
 800a02e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800a032:	1c6b      	adds	r3, r5, #1
 800a034:	3502      	adds	r5, #2
 800a036:	6063      	str	r3, [r4, #4]
 800a038:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a03c:	f7fe ffdb 	bl	8008ff6 <__retarget_lock_release_recursive>
 800a040:	2000      	movs	r0, #0
 800a042:	e7df      	b.n	800a004 <__register_exitproc+0x3c>
 800a044:	0800bc10 	.word	0x0800bc10
 800a048:	20000440 	.word	0x20000440

0800a04c <__assert_func>:
 800a04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a04e:	4614      	mov	r4, r2
 800a050:	461a      	mov	r2, r3
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <__assert_func+0x2c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4605      	mov	r5, r0
 800a058:	68d8      	ldr	r0, [r3, #12]
 800a05a:	b14c      	cbz	r4, 800a070 <__assert_func+0x24>
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <__assert_func+0x30>)
 800a05e:	9100      	str	r1, [sp, #0]
 800a060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a064:	4906      	ldr	r1, [pc, #24]	; (800a080 <__assert_func+0x34>)
 800a066:	462b      	mov	r3, r5
 800a068:	f000 f844 	bl	800a0f4 <fiprintf>
 800a06c:	f000 ff72 	bl	800af54 <abort>
 800a070:	4b04      	ldr	r3, [pc, #16]	; (800a084 <__assert_func+0x38>)
 800a072:	461c      	mov	r4, r3
 800a074:	e7f3      	b.n	800a05e <__assert_func+0x12>
 800a076:	bf00      	nop
 800a078:	20000014 	.word	0x20000014
 800a07c:	0800c00c 	.word	0x0800c00c
 800a080:	0800c019 	.word	0x0800c019
 800a084:	0800c047 	.word	0x0800c047

0800a088 <_calloc_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	fba1 1502 	umull	r1, r5, r1, r2
 800a08e:	b92d      	cbnz	r5, 800a09c <_calloc_r+0x14>
 800a090:	f7fe ffb2 	bl	8008ff8 <_malloc_r>
 800a094:	4604      	mov	r4, r0
 800a096:	b938      	cbnz	r0, 800a0a8 <_calloc_r+0x20>
 800a098:	4620      	mov	r0, r4
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	f7fb fb5e 	bl	800575c <__errno>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	6003      	str	r3, [r0, #0]
 800a0a4:	2400      	movs	r4, #0
 800a0a6:	e7f7      	b.n	800a098 <_calloc_r+0x10>
 800a0a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a0ac:	f022 0203 	bic.w	r2, r2, #3
 800a0b0:	3a04      	subs	r2, #4
 800a0b2:	2a24      	cmp	r2, #36	; 0x24
 800a0b4:	d819      	bhi.n	800a0ea <_calloc_r+0x62>
 800a0b6:	2a13      	cmp	r2, #19
 800a0b8:	d915      	bls.n	800a0e6 <_calloc_r+0x5e>
 800a0ba:	2a1b      	cmp	r2, #27
 800a0bc:	e9c0 5500 	strd	r5, r5, [r0]
 800a0c0:	d806      	bhi.n	800a0d0 <_calloc_r+0x48>
 800a0c2:	f100 0308 	add.w	r3, r0, #8
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	e9c3 2200 	strd	r2, r2, [r3]
 800a0cc:	609a      	str	r2, [r3, #8]
 800a0ce:	e7e3      	b.n	800a098 <_calloc_r+0x10>
 800a0d0:	2a24      	cmp	r2, #36	; 0x24
 800a0d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800a0d6:	bf11      	iteee	ne
 800a0d8:	f100 0310 	addne.w	r3, r0, #16
 800a0dc:	6105      	streq	r5, [r0, #16]
 800a0de:	f100 0318 	addeq.w	r3, r0, #24
 800a0e2:	6145      	streq	r5, [r0, #20]
 800a0e4:	e7ef      	b.n	800a0c6 <_calloc_r+0x3e>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	e7ed      	b.n	800a0c6 <_calloc_r+0x3e>
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7fb fb60 	bl	80057b0 <memset>
 800a0f0:	e7d2      	b.n	800a098 <_calloc_r+0x10>
	...

0800a0f4 <fiprintf>:
 800a0f4:	b40e      	push	{r1, r2, r3}
 800a0f6:	b503      	push	{r0, r1, lr}
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	ab03      	add	r3, sp, #12
 800a0fc:	4805      	ldr	r0, [pc, #20]	; (800a114 <fiprintf+0x20>)
 800a0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	f000 f9f7 	bl	800a4f8 <_vfiprintf_r>
 800a10a:	b002      	add	sp, #8
 800a10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a110:	b003      	add	sp, #12
 800a112:	4770      	bx	lr
 800a114:	20000014 	.word	0x20000014

0800a118 <memmove>:
 800a118:	4288      	cmp	r0, r1
 800a11a:	b510      	push	{r4, lr}
 800a11c:	eb01 0402 	add.w	r4, r1, r2
 800a120:	d902      	bls.n	800a128 <memmove+0x10>
 800a122:	4284      	cmp	r4, r0
 800a124:	4623      	mov	r3, r4
 800a126:	d807      	bhi.n	800a138 <memmove+0x20>
 800a128:	1e43      	subs	r3, r0, #1
 800a12a:	42a1      	cmp	r1, r4
 800a12c:	d008      	beq.n	800a140 <memmove+0x28>
 800a12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a132:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a136:	e7f8      	b.n	800a12a <memmove+0x12>
 800a138:	4402      	add	r2, r0
 800a13a:	4601      	mov	r1, r0
 800a13c:	428a      	cmp	r2, r1
 800a13e:	d100      	bne.n	800a142 <memmove+0x2a>
 800a140:	bd10      	pop	{r4, pc}
 800a142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a14a:	e7f7      	b.n	800a13c <memmove+0x24>

0800a14c <_realloc_r>:
 800a14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	4681      	mov	r9, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b929      	cbnz	r1, 800a162 <_realloc_r+0x16>
 800a156:	4611      	mov	r1, r2
 800a158:	b003      	add	sp, #12
 800a15a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15e:	f7fe bf4b 	b.w	8008ff8 <_malloc_r>
 800a162:	9201      	str	r2, [sp, #4]
 800a164:	f7ff f9a4 	bl	80094b0 <__malloc_lock>
 800a168:	9a01      	ldr	r2, [sp, #4]
 800a16a:	f102 080b 	add.w	r8, r2, #11
 800a16e:	f1b8 0f16 	cmp.w	r8, #22
 800a172:	d90b      	bls.n	800a18c <_realloc_r+0x40>
 800a174:	f038 0807 	bics.w	r8, r8, #7
 800a178:	d50a      	bpl.n	800a190 <_realloc_r+0x44>
 800a17a:	230c      	movs	r3, #12
 800a17c:	f8c9 3000 	str.w	r3, [r9]
 800a180:	f04f 0b00 	mov.w	fp, #0
 800a184:	4658      	mov	r0, fp
 800a186:	b003      	add	sp, #12
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	f04f 0810 	mov.w	r8, #16
 800a190:	4590      	cmp	r8, r2
 800a192:	d3f2      	bcc.n	800a17a <_realloc_r+0x2e>
 800a194:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a198:	f025 0603 	bic.w	r6, r5, #3
 800a19c:	45b0      	cmp	r8, r6
 800a19e:	f1a4 0a08 	sub.w	sl, r4, #8
 800a1a2:	f340 816e 	ble.w	800a482 <_realloc_r+0x336>
 800a1a6:	499b      	ldr	r1, [pc, #620]	; (800a414 <_realloc_r+0x2c8>)
 800a1a8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a1ac:	eb0a 0306 	add.w	r3, sl, r6
 800a1b0:	459c      	cmp	ip, r3
 800a1b2:	6859      	ldr	r1, [r3, #4]
 800a1b4:	d005      	beq.n	800a1c2 <_realloc_r+0x76>
 800a1b6:	f021 0001 	bic.w	r0, r1, #1
 800a1ba:	4418      	add	r0, r3
 800a1bc:	6840      	ldr	r0, [r0, #4]
 800a1be:	07c7      	lsls	r7, r0, #31
 800a1c0:	d427      	bmi.n	800a212 <_realloc_r+0xc6>
 800a1c2:	f021 0103 	bic.w	r1, r1, #3
 800a1c6:	459c      	cmp	ip, r3
 800a1c8:	eb06 0701 	add.w	r7, r6, r1
 800a1cc:	d119      	bne.n	800a202 <_realloc_r+0xb6>
 800a1ce:	f108 0010 	add.w	r0, r8, #16
 800a1d2:	42b8      	cmp	r0, r7
 800a1d4:	dc1f      	bgt.n	800a216 <_realloc_r+0xca>
 800a1d6:	eb0a 0308 	add.w	r3, sl, r8
 800a1da:	4a8e      	ldr	r2, [pc, #568]	; (800a414 <_realloc_r+0x2c8>)
 800a1dc:	eba7 0708 	sub.w	r7, r7, r8
 800a1e0:	f047 0701 	orr.w	r7, r7, #1
 800a1e4:	6093      	str	r3, [r2, #8]
 800a1e6:	605f      	str	r7, [r3, #4]
 800a1e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	ea43 0308 	orr.w	r3, r3, r8
 800a1f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1f8:	4648      	mov	r0, r9
 800a1fa:	f7ff f95f 	bl	80094bc <__malloc_unlock>
 800a1fe:	46a3      	mov	fp, r4
 800a200:	e7c0      	b.n	800a184 <_realloc_r+0x38>
 800a202:	45b8      	cmp	r8, r7
 800a204:	dc07      	bgt.n	800a216 <_realloc_r+0xca>
 800a206:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a20a:	60da      	str	r2, [r3, #12]
 800a20c:	6093      	str	r3, [r2, #8]
 800a20e:	4655      	mov	r5, sl
 800a210:	e07f      	b.n	800a312 <_realloc_r+0x1c6>
 800a212:	2100      	movs	r1, #0
 800a214:	460b      	mov	r3, r1
 800a216:	07e8      	lsls	r0, r5, #31
 800a218:	f100 80e5 	bmi.w	800a3e6 <_realloc_r+0x29a>
 800a21c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a220:	ebaa 0505 	sub.w	r5, sl, r5
 800a224:	6868      	ldr	r0, [r5, #4]
 800a226:	f020 0003 	bic.w	r0, r0, #3
 800a22a:	eb00 0b06 	add.w	fp, r0, r6
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 80a5 	beq.w	800a37e <_realloc_r+0x232>
 800a234:	459c      	cmp	ip, r3
 800a236:	eb01 070b 	add.w	r7, r1, fp
 800a23a:	d14a      	bne.n	800a2d2 <_realloc_r+0x186>
 800a23c:	f108 0310 	add.w	r3, r8, #16
 800a240:	42bb      	cmp	r3, r7
 800a242:	f300 809c 	bgt.w	800a37e <_realloc_r+0x232>
 800a246:	46ab      	mov	fp, r5
 800a248:	68eb      	ldr	r3, [r5, #12]
 800a24a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a24e:	60d3      	str	r3, [r2, #12]
 800a250:	609a      	str	r2, [r3, #8]
 800a252:	1f32      	subs	r2, r6, #4
 800a254:	2a24      	cmp	r2, #36	; 0x24
 800a256:	d837      	bhi.n	800a2c8 <_realloc_r+0x17c>
 800a258:	2a13      	cmp	r2, #19
 800a25a:	d933      	bls.n	800a2c4 <_realloc_r+0x178>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	60ab      	str	r3, [r5, #8]
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	60eb      	str	r3, [r5, #12]
 800a264:	2a1b      	cmp	r2, #27
 800a266:	d81b      	bhi.n	800a2a0 <_realloc_r+0x154>
 800a268:	3408      	adds	r4, #8
 800a26a:	f105 0310 	add.w	r3, r5, #16
 800a26e:	6822      	ldr	r2, [r4, #0]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	68a2      	ldr	r2, [r4, #8]
 800a278:	609a      	str	r2, [r3, #8]
 800a27a:	eb05 0308 	add.w	r3, r5, r8
 800a27e:	4a65      	ldr	r2, [pc, #404]	; (800a414 <_realloc_r+0x2c8>)
 800a280:	eba7 0708 	sub.w	r7, r7, r8
 800a284:	f047 0701 	orr.w	r7, r7, #1
 800a288:	6093      	str	r3, [r2, #8]
 800a28a:	605f      	str	r7, [r3, #4]
 800a28c:	686b      	ldr	r3, [r5, #4]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	ea43 0308 	orr.w	r3, r3, r8
 800a296:	606b      	str	r3, [r5, #4]
 800a298:	4648      	mov	r0, r9
 800a29a:	f7ff f90f 	bl	80094bc <__malloc_unlock>
 800a29e:	e771      	b.n	800a184 <_realloc_r+0x38>
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	612b      	str	r3, [r5, #16]
 800a2a4:	68e3      	ldr	r3, [r4, #12]
 800a2a6:	616b      	str	r3, [r5, #20]
 800a2a8:	2a24      	cmp	r2, #36	; 0x24
 800a2aa:	bf01      	itttt	eq
 800a2ac:	6923      	ldreq	r3, [r4, #16]
 800a2ae:	61ab      	streq	r3, [r5, #24]
 800a2b0:	6962      	ldreq	r2, [r4, #20]
 800a2b2:	61ea      	streq	r2, [r5, #28]
 800a2b4:	bf19      	ittee	ne
 800a2b6:	3410      	addne	r4, #16
 800a2b8:	f105 0318 	addne.w	r3, r5, #24
 800a2bc:	f105 0320 	addeq.w	r3, r5, #32
 800a2c0:	3418      	addeq	r4, #24
 800a2c2:	e7d4      	b.n	800a26e <_realloc_r+0x122>
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	e7d2      	b.n	800a26e <_realloc_r+0x122>
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4658      	mov	r0, fp
 800a2cc:	f7ff ff24 	bl	800a118 <memmove>
 800a2d0:	e7d3      	b.n	800a27a <_realloc_r+0x12e>
 800a2d2:	45b8      	cmp	r8, r7
 800a2d4:	dc53      	bgt.n	800a37e <_realloc_r+0x232>
 800a2d6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a2da:	4628      	mov	r0, r5
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	6093      	str	r3, [r2, #8]
 800a2e0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a2e4:	68eb      	ldr	r3, [r5, #12]
 800a2e6:	60d3      	str	r3, [r2, #12]
 800a2e8:	609a      	str	r2, [r3, #8]
 800a2ea:	1f32      	subs	r2, r6, #4
 800a2ec:	2a24      	cmp	r2, #36	; 0x24
 800a2ee:	d842      	bhi.n	800a376 <_realloc_r+0x22a>
 800a2f0:	2a13      	cmp	r2, #19
 800a2f2:	d908      	bls.n	800a306 <_realloc_r+0x1ba>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	60ab      	str	r3, [r5, #8]
 800a2f8:	6863      	ldr	r3, [r4, #4]
 800a2fa:	60eb      	str	r3, [r5, #12]
 800a2fc:	2a1b      	cmp	r2, #27
 800a2fe:	d828      	bhi.n	800a352 <_realloc_r+0x206>
 800a300:	3408      	adds	r4, #8
 800a302:	f105 0010 	add.w	r0, r5, #16
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	6043      	str	r3, [r0, #4]
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	6083      	str	r3, [r0, #8]
 800a312:	686b      	ldr	r3, [r5, #4]
 800a314:	eba7 0008 	sub.w	r0, r7, r8
 800a318:	280f      	cmp	r0, #15
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	eb05 0207 	add.w	r2, r5, r7
 800a322:	f240 80b0 	bls.w	800a486 <_realloc_r+0x33a>
 800a326:	eb05 0108 	add.w	r1, r5, r8
 800a32a:	ea48 0303 	orr.w	r3, r8, r3
 800a32e:	f040 0001 	orr.w	r0, r0, #1
 800a332:	606b      	str	r3, [r5, #4]
 800a334:	6048      	str	r0, [r1, #4]
 800a336:	6853      	ldr	r3, [r2, #4]
 800a338:	f043 0301 	orr.w	r3, r3, #1
 800a33c:	6053      	str	r3, [r2, #4]
 800a33e:	3108      	adds	r1, #8
 800a340:	4648      	mov	r0, r9
 800a342:	f7fe fa1b 	bl	800877c <_free_r>
 800a346:	4648      	mov	r0, r9
 800a348:	f7ff f8b8 	bl	80094bc <__malloc_unlock>
 800a34c:	f105 0b08 	add.w	fp, r5, #8
 800a350:	e718      	b.n	800a184 <_realloc_r+0x38>
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	612b      	str	r3, [r5, #16]
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	616b      	str	r3, [r5, #20]
 800a35a:	2a24      	cmp	r2, #36	; 0x24
 800a35c:	bf01      	itttt	eq
 800a35e:	6923      	ldreq	r3, [r4, #16]
 800a360:	61ab      	streq	r3, [r5, #24]
 800a362:	6963      	ldreq	r3, [r4, #20]
 800a364:	61eb      	streq	r3, [r5, #28]
 800a366:	bf19      	ittee	ne
 800a368:	3410      	addne	r4, #16
 800a36a:	f105 0018 	addne.w	r0, r5, #24
 800a36e:	f105 0020 	addeq.w	r0, r5, #32
 800a372:	3418      	addeq	r4, #24
 800a374:	e7c7      	b.n	800a306 <_realloc_r+0x1ba>
 800a376:	4621      	mov	r1, r4
 800a378:	f7ff fece 	bl	800a118 <memmove>
 800a37c:	e7c9      	b.n	800a312 <_realloc_r+0x1c6>
 800a37e:	45d8      	cmp	r8, fp
 800a380:	dc31      	bgt.n	800a3e6 <_realloc_r+0x29a>
 800a382:	4628      	mov	r0, r5
 800a384:	68eb      	ldr	r3, [r5, #12]
 800a386:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a38a:	60d3      	str	r3, [r2, #12]
 800a38c:	609a      	str	r2, [r3, #8]
 800a38e:	1f32      	subs	r2, r6, #4
 800a390:	2a24      	cmp	r2, #36	; 0x24
 800a392:	d824      	bhi.n	800a3de <_realloc_r+0x292>
 800a394:	2a13      	cmp	r2, #19
 800a396:	d908      	bls.n	800a3aa <_realloc_r+0x25e>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	60ab      	str	r3, [r5, #8]
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	60eb      	str	r3, [r5, #12]
 800a3a0:	2a1b      	cmp	r2, #27
 800a3a2:	d80a      	bhi.n	800a3ba <_realloc_r+0x26e>
 800a3a4:	3408      	adds	r4, #8
 800a3a6:	f105 0010 	add.w	r0, r5, #16
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	6003      	str	r3, [r0, #0]
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	6043      	str	r3, [r0, #4]
 800a3b2:	68a3      	ldr	r3, [r4, #8]
 800a3b4:	6083      	str	r3, [r0, #8]
 800a3b6:	465f      	mov	r7, fp
 800a3b8:	e7ab      	b.n	800a312 <_realloc_r+0x1c6>
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	612b      	str	r3, [r5, #16]
 800a3be:	68e3      	ldr	r3, [r4, #12]
 800a3c0:	616b      	str	r3, [r5, #20]
 800a3c2:	2a24      	cmp	r2, #36	; 0x24
 800a3c4:	bf01      	itttt	eq
 800a3c6:	6923      	ldreq	r3, [r4, #16]
 800a3c8:	61ab      	streq	r3, [r5, #24]
 800a3ca:	6963      	ldreq	r3, [r4, #20]
 800a3cc:	61eb      	streq	r3, [r5, #28]
 800a3ce:	bf19      	ittee	ne
 800a3d0:	3410      	addne	r4, #16
 800a3d2:	f105 0018 	addne.w	r0, r5, #24
 800a3d6:	f105 0020 	addeq.w	r0, r5, #32
 800a3da:	3418      	addeq	r4, #24
 800a3dc:	e7e5      	b.n	800a3aa <_realloc_r+0x25e>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	f7ff fe9a 	bl	800a118 <memmove>
 800a3e4:	e7e7      	b.n	800a3b6 <_realloc_r+0x26a>
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4648      	mov	r0, r9
 800a3ea:	f7fe fe05 	bl	8008ff8 <_malloc_r>
 800a3ee:	4683      	mov	fp, r0
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f43f af51 	beq.w	800a298 <_realloc_r+0x14c>
 800a3f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a3fa:	f023 0301 	bic.w	r3, r3, #1
 800a3fe:	4453      	add	r3, sl
 800a400:	f1a0 0208 	sub.w	r2, r0, #8
 800a404:	4293      	cmp	r3, r2
 800a406:	d107      	bne.n	800a418 <_realloc_r+0x2cc>
 800a408:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a40c:	f027 0703 	bic.w	r7, r7, #3
 800a410:	4437      	add	r7, r6
 800a412:	e6fc      	b.n	800a20e <_realloc_r+0xc2>
 800a414:	200005b4 	.word	0x200005b4
 800a418:	1f32      	subs	r2, r6, #4
 800a41a:	2a24      	cmp	r2, #36	; 0x24
 800a41c:	d82d      	bhi.n	800a47a <_realloc_r+0x32e>
 800a41e:	2a13      	cmp	r2, #19
 800a420:	d928      	bls.n	800a474 <_realloc_r+0x328>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	6863      	ldr	r3, [r4, #4]
 800a428:	6043      	str	r3, [r0, #4]
 800a42a:	2a1b      	cmp	r2, #27
 800a42c:	d80e      	bhi.n	800a44c <_realloc_r+0x300>
 800a42e:	f104 0208 	add.w	r2, r4, #8
 800a432:	f100 0308 	add.w	r3, r0, #8
 800a436:	6811      	ldr	r1, [r2, #0]
 800a438:	6019      	str	r1, [r3, #0]
 800a43a:	6851      	ldr	r1, [r2, #4]
 800a43c:	6059      	str	r1, [r3, #4]
 800a43e:	6892      	ldr	r2, [r2, #8]
 800a440:	609a      	str	r2, [r3, #8]
 800a442:	4621      	mov	r1, r4
 800a444:	4648      	mov	r0, r9
 800a446:	f7fe f999 	bl	800877c <_free_r>
 800a44a:	e725      	b.n	800a298 <_realloc_r+0x14c>
 800a44c:	68a3      	ldr	r3, [r4, #8]
 800a44e:	6083      	str	r3, [r0, #8]
 800a450:	68e3      	ldr	r3, [r4, #12]
 800a452:	60c3      	str	r3, [r0, #12]
 800a454:	2a24      	cmp	r2, #36	; 0x24
 800a456:	bf01      	itttt	eq
 800a458:	6923      	ldreq	r3, [r4, #16]
 800a45a:	6103      	streq	r3, [r0, #16]
 800a45c:	6961      	ldreq	r1, [r4, #20]
 800a45e:	6141      	streq	r1, [r0, #20]
 800a460:	bf19      	ittee	ne
 800a462:	f104 0210 	addne.w	r2, r4, #16
 800a466:	f100 0310 	addne.w	r3, r0, #16
 800a46a:	f104 0218 	addeq.w	r2, r4, #24
 800a46e:	f100 0318 	addeq.w	r3, r0, #24
 800a472:	e7e0      	b.n	800a436 <_realloc_r+0x2ea>
 800a474:	4603      	mov	r3, r0
 800a476:	4622      	mov	r2, r4
 800a478:	e7dd      	b.n	800a436 <_realloc_r+0x2ea>
 800a47a:	4621      	mov	r1, r4
 800a47c:	f7ff fe4c 	bl	800a118 <memmove>
 800a480:	e7df      	b.n	800a442 <_realloc_r+0x2f6>
 800a482:	4637      	mov	r7, r6
 800a484:	e6c3      	b.n	800a20e <_realloc_r+0xc2>
 800a486:	431f      	orrs	r7, r3
 800a488:	606f      	str	r7, [r5, #4]
 800a48a:	6853      	ldr	r3, [r2, #4]
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	6053      	str	r3, [r2, #4]
 800a492:	e758      	b.n	800a346 <_realloc_r+0x1fa>

0800a494 <__sprint_r>:
 800a494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	6893      	ldr	r3, [r2, #8]
 800a49a:	4680      	mov	r8, r0
 800a49c:	460f      	mov	r7, r1
 800a49e:	4614      	mov	r4, r2
 800a4a0:	b91b      	cbnz	r3, 800a4aa <__sprint_r+0x16>
 800a4a2:	6053      	str	r3, [r2, #4]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4aa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a4ac:	049d      	lsls	r5, r3, #18
 800a4ae:	d520      	bpl.n	800a4f2 <__sprint_r+0x5e>
 800a4b0:	6815      	ldr	r5, [r2, #0]
 800a4b2:	3508      	adds	r5, #8
 800a4b4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800a4b8:	f04f 0900 	mov.w	r9, #0
 800a4bc:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800a4c0:	45ca      	cmp	sl, r9
 800a4c2:	dc0b      	bgt.n	800a4dc <__sprint_r+0x48>
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	f026 0003 	bic.w	r0, r6, #3
 800a4ca:	1a18      	subs	r0, r3, r0
 800a4cc:	60a0      	str	r0, [r4, #8]
 800a4ce:	3508      	adds	r5, #8
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1ef      	bne.n	800a4b4 <__sprint_r+0x20>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a4da:	e7e4      	b.n	800a4a6 <__sprint_r+0x12>
 800a4dc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800a4e0:	463a      	mov	r2, r7
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	f000 fea1 	bl	800b22a <_fputwc_r>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d0f3      	beq.n	800a4d4 <__sprint_r+0x40>
 800a4ec:	f109 0901 	add.w	r9, r9, #1
 800a4f0:	e7e6      	b.n	800a4c0 <__sprint_r+0x2c>
 800a4f2:	f000 fec5 	bl	800b280 <__sfvwrite_r>
 800a4f6:	e7ed      	b.n	800a4d4 <__sprint_r+0x40>

0800a4f8 <_vfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	ed2d 8b02 	vpush	{d8}
 800a500:	b0b9      	sub	sp, #228	; 0xe4
 800a502:	460f      	mov	r7, r1
 800a504:	9201      	str	r2, [sp, #4]
 800a506:	461d      	mov	r5, r3
 800a508:	461c      	mov	r4, r3
 800a50a:	4681      	mov	r9, r0
 800a50c:	b118      	cbz	r0, 800a516 <_vfiprintf_r+0x1e>
 800a50e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a510:	b90b      	cbnz	r3, 800a516 <_vfiprintf_r+0x1e>
 800a512:	f000 fe21 	bl	800b158 <__sinit>
 800a516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a518:	07d8      	lsls	r0, r3, #31
 800a51a:	d405      	bmi.n	800a528 <_vfiprintf_r+0x30>
 800a51c:	89bb      	ldrh	r3, [r7, #12]
 800a51e:	0599      	lsls	r1, r3, #22
 800a520:	d402      	bmi.n	800a528 <_vfiprintf_r+0x30>
 800a522:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a524:	f7fe fd66 	bl	8008ff4 <__retarget_lock_acquire_recursive>
 800a528:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a52c:	049a      	lsls	r2, r3, #18
 800a52e:	d406      	bmi.n	800a53e <_vfiprintf_r+0x46>
 800a530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a534:	81bb      	strh	r3, [r7, #12]
 800a536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a53c:	667b      	str	r3, [r7, #100]	; 0x64
 800a53e:	89bb      	ldrh	r3, [r7, #12]
 800a540:	071e      	lsls	r6, r3, #28
 800a542:	d501      	bpl.n	800a548 <_vfiprintf_r+0x50>
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	b9bb      	cbnz	r3, 800a578 <_vfiprintf_r+0x80>
 800a548:	4639      	mov	r1, r7
 800a54a:	4648      	mov	r0, r9
 800a54c:	f000 fcaa 	bl	800aea4 <__swsetup_r>
 800a550:	b190      	cbz	r0, 800a578 <_vfiprintf_r+0x80>
 800a552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a554:	07d8      	lsls	r0, r3, #31
 800a556:	d508      	bpl.n	800a56a <_vfiprintf_r+0x72>
 800a558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	9802      	ldr	r0, [sp, #8]
 800a560:	b039      	add	sp, #228	; 0xe4
 800a562:	ecbd 8b02 	vpop	{d8}
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	89bb      	ldrh	r3, [r7, #12]
 800a56c:	0599      	lsls	r1, r3, #22
 800a56e:	d4f3      	bmi.n	800a558 <_vfiprintf_r+0x60>
 800a570:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a572:	f7fe fd40 	bl	8008ff6 <__retarget_lock_release_recursive>
 800a576:	e7ef      	b.n	800a558 <_vfiprintf_r+0x60>
 800a578:	89bb      	ldrh	r3, [r7, #12]
 800a57a:	f003 021a 	and.w	r2, r3, #26
 800a57e:	2a0a      	cmp	r2, #10
 800a580:	d116      	bne.n	800a5b0 <_vfiprintf_r+0xb8>
 800a582:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a586:	2a00      	cmp	r2, #0
 800a588:	db12      	blt.n	800a5b0 <_vfiprintf_r+0xb8>
 800a58a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a58c:	07d2      	lsls	r2, r2, #31
 800a58e:	d404      	bmi.n	800a59a <_vfiprintf_r+0xa2>
 800a590:	059e      	lsls	r6, r3, #22
 800a592:	d402      	bmi.n	800a59a <_vfiprintf_r+0xa2>
 800a594:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a596:	f7fe fd2e 	bl	8008ff6 <__retarget_lock_release_recursive>
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	462b      	mov	r3, r5
 800a59e:	4639      	mov	r1, r7
 800a5a0:	4648      	mov	r0, r9
 800a5a2:	b039      	add	sp, #228	; 0xe4
 800a5a4:	ecbd 8b02 	vpop	{d8}
 800a5a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	f000 bc3a 	b.w	800ae24 <__sbprintf>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800a5b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a5ba:	ae0f      	add	r6, sp, #60	; 0x3c
 800a5bc:	ee08 3a10 	vmov	s16, r3
 800a5c0:	960c      	str	r6, [sp, #48]	; 0x30
 800a5c2:	9307      	str	r3, [sp, #28]
 800a5c4:	9302      	str	r3, [sp, #8]
 800a5c6:	9b01      	ldr	r3, [sp, #4]
 800a5c8:	461d      	mov	r5, r3
 800a5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ce:	b10a      	cbz	r2, 800a5d4 <_vfiprintf_r+0xdc>
 800a5d0:	2a25      	cmp	r2, #37	; 0x25
 800a5d2:	d1f9      	bne.n	800a5c8 <_vfiprintf_r+0xd0>
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	ebb5 0803 	subs.w	r8, r5, r3
 800a5da:	d00d      	beq.n	800a5f8 <_vfiprintf_r+0x100>
 800a5dc:	e9c6 3800 	strd	r3, r8, [r6]
 800a5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e2:	4443      	add	r3, r8
 800a5e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	2b07      	cmp	r3, #7
 800a5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800a5ee:	dc75      	bgt.n	800a6dc <_vfiprintf_r+0x1e4>
 800a5f0:	3608      	adds	r6, #8
 800a5f2:	9b02      	ldr	r3, [sp, #8]
 800a5f4:	4443      	add	r3, r8
 800a5f6:	9302      	str	r3, [sp, #8]
 800a5f8:	782b      	ldrb	r3, [r5, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 83d6 	beq.w	800adac <_vfiprintf_r+0x8b4>
 800a600:	2300      	movs	r3, #0
 800a602:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a606:	1c6a      	adds	r2, r5, #1
 800a608:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a60c:	9100      	str	r1, [sp, #0]
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	469a      	mov	sl, r3
 800a612:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	f1a3 0220 	sub.w	r2, r3, #32
 800a61c:	2a5a      	cmp	r2, #90	; 0x5a
 800a61e:	f200 831f 	bhi.w	800ac60 <_vfiprintf_r+0x768>
 800a622:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a626:	009b      	.short	0x009b
 800a628:	031d031d 	.word	0x031d031d
 800a62c:	031d00a3 	.word	0x031d00a3
 800a630:	031d031d 	.word	0x031d031d
 800a634:	031d0082 	.word	0x031d0082
 800a638:	00a6031d 	.word	0x00a6031d
 800a63c:	031d00b0 	.word	0x031d00b0
 800a640:	00b200ad 	.word	0x00b200ad
 800a644:	00cd031d 	.word	0x00cd031d
 800a648:	00d000d0 	.word	0x00d000d0
 800a64c:	00d000d0 	.word	0x00d000d0
 800a650:	00d000d0 	.word	0x00d000d0
 800a654:	00d000d0 	.word	0x00d000d0
 800a658:	031d00d0 	.word	0x031d00d0
 800a65c:	031d031d 	.word	0x031d031d
 800a660:	031d031d 	.word	0x031d031d
 800a664:	031d031d 	.word	0x031d031d
 800a668:	031d031d 	.word	0x031d031d
 800a66c:	010800fa 	.word	0x010800fa
 800a670:	031d031d 	.word	0x031d031d
 800a674:	031d031d 	.word	0x031d031d
 800a678:	031d031d 	.word	0x031d031d
 800a67c:	031d031d 	.word	0x031d031d
 800a680:	031d031d 	.word	0x031d031d
 800a684:	031d0158 	.word	0x031d0158
 800a688:	031d031d 	.word	0x031d031d
 800a68c:	031d01a1 	.word	0x031d01a1
 800a690:	031d027e 	.word	0x031d027e
 800a694:	029e031d 	.word	0x029e031d
 800a698:	031d031d 	.word	0x031d031d
 800a69c:	031d031d 	.word	0x031d031d
 800a6a0:	031d031d 	.word	0x031d031d
 800a6a4:	031d031d 	.word	0x031d031d
 800a6a8:	031d031d 	.word	0x031d031d
 800a6ac:	010a00fa 	.word	0x010a00fa
 800a6b0:	031d031d 	.word	0x031d031d
 800a6b4:	00e0031d 	.word	0x00e0031d
 800a6b8:	00f4010a 	.word	0x00f4010a
 800a6bc:	00ed031d 	.word	0x00ed031d
 800a6c0:	0136031d 	.word	0x0136031d
 800a6c4:	018f015a 	.word	0x018f015a
 800a6c8:	031d00f4 	.word	0x031d00f4
 800a6cc:	009901a1 	.word	0x009901a1
 800a6d0:	031d0280 	.word	0x031d0280
 800a6d4:	0065031d 	.word	0x0065031d
 800a6d8:	0099031d 	.word	0x0099031d
 800a6dc:	aa0c      	add	r2, sp, #48	; 0x30
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f7ff fed7 	bl	800a494 <__sprint_r>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f040 833f 	bne.w	800ad6a <_vfiprintf_r+0x872>
 800a6ec:	ae0f      	add	r6, sp, #60	; 0x3c
 800a6ee:	e780      	b.n	800a5f2 <_vfiprintf_r+0xfa>
 800a6f0:	4a9c      	ldr	r2, [pc, #624]	; (800a964 <_vfiprintf_r+0x46c>)
 800a6f2:	9205      	str	r2, [sp, #20]
 800a6f4:	f01a 0220 	ands.w	r2, sl, #32
 800a6f8:	f000 8235 	beq.w	800ab66 <_vfiprintf_r+0x66e>
 800a6fc:	3407      	adds	r4, #7
 800a6fe:	f024 0207 	bic.w	r2, r4, #7
 800a702:	4693      	mov	fp, r2
 800a704:	6855      	ldr	r5, [r2, #4]
 800a706:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a70a:	f01a 0f01 	tst.w	sl, #1
 800a70e:	d009      	beq.n	800a724 <_vfiprintf_r+0x22c>
 800a710:	ea54 0205 	orrs.w	r2, r4, r5
 800a714:	bf1f      	itttt	ne
 800a716:	2230      	movne	r2, #48	; 0x30
 800a718:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800a71c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800a720:	f04a 0a02 	orrne.w	sl, sl, #2
 800a724:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a728:	e11a      	b.n	800a960 <_vfiprintf_r+0x468>
 800a72a:	4648      	mov	r0, r9
 800a72c:	f7fe fc5c 	bl	8008fe8 <_localeconv_r>
 800a730:	6843      	ldr	r3, [r0, #4]
 800a732:	4618      	mov	r0, r3
 800a734:	ee08 3a10 	vmov	s16, r3
 800a738:	f7f5 fd54 	bl	80001e4 <strlen>
 800a73c:	9007      	str	r0, [sp, #28]
 800a73e:	4648      	mov	r0, r9
 800a740:	f7fe fc52 	bl	8008fe8 <_localeconv_r>
 800a744:	6883      	ldr	r3, [r0, #8]
 800a746:	9306      	str	r3, [sp, #24]
 800a748:	9b07      	ldr	r3, [sp, #28]
 800a74a:	b12b      	cbz	r3, 800a758 <_vfiprintf_r+0x260>
 800a74c:	9b06      	ldr	r3, [sp, #24]
 800a74e:	b11b      	cbz	r3, 800a758 <_vfiprintf_r+0x260>
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	b10b      	cbz	r3, 800a758 <_vfiprintf_r+0x260>
 800a754:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800a758:	9a01      	ldr	r2, [sp, #4]
 800a75a:	e75a      	b.n	800a612 <_vfiprintf_r+0x11a>
 800a75c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1f9      	bne.n	800a758 <_vfiprintf_r+0x260>
 800a764:	2320      	movs	r3, #32
 800a766:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a76a:	e7f5      	b.n	800a758 <_vfiprintf_r+0x260>
 800a76c:	f04a 0a01 	orr.w	sl, sl, #1
 800a770:	e7f2      	b.n	800a758 <_vfiprintf_r+0x260>
 800a772:	f854 3b04 	ldr.w	r3, [r4], #4
 800a776:	9303      	str	r3, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	daed      	bge.n	800a758 <_vfiprintf_r+0x260>
 800a77c:	425b      	negs	r3, r3
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	f04a 0a04 	orr.w	sl, sl, #4
 800a784:	e7e8      	b.n	800a758 <_vfiprintf_r+0x260>
 800a786:	232b      	movs	r3, #43	; 0x2b
 800a788:	e7ed      	b.n	800a766 <_vfiprintf_r+0x26e>
 800a78a:	9a01      	ldr	r2, [sp, #4]
 800a78c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a790:	2b2a      	cmp	r3, #42	; 0x2a
 800a792:	d112      	bne.n	800a7ba <_vfiprintf_r+0x2c2>
 800a794:	f854 0b04 	ldr.w	r0, [r4], #4
 800a798:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800a79c:	e9cd 3200 	strd	r3, r2, [sp]
 800a7a0:	e7da      	b.n	800a758 <_vfiprintf_r+0x260>
 800a7a2:	9b00      	ldr	r3, [sp, #0]
 800a7a4:	200a      	movs	r0, #10
 800a7a6:	fb00 1303 	mla	r3, r0, r3, r1
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a7b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7b4:	2909      	cmp	r1, #9
 800a7b6:	d9f4      	bls.n	800a7a2 <_vfiprintf_r+0x2aa>
 800a7b8:	e72d      	b.n	800a616 <_vfiprintf_r+0x11e>
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	9100      	str	r1, [sp, #0]
 800a7be:	e7f7      	b.n	800a7b0 <_vfiprintf_r+0x2b8>
 800a7c0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a7c4:	e7c8      	b.n	800a758 <_vfiprintf_r+0x260>
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	9a01      	ldr	r2, [sp, #4]
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	9903      	ldr	r1, [sp, #12]
 800a7ce:	3b30      	subs	r3, #48	; 0x30
 800a7d0:	200a      	movs	r0, #10
 800a7d2:	fb00 3301 	mla	r3, r0, r1, r3
 800a7d6:	9303      	str	r3, [sp, #12]
 800a7d8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a7dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7e0:	2909      	cmp	r1, #9
 800a7e2:	d9f3      	bls.n	800a7cc <_vfiprintf_r+0x2d4>
 800a7e4:	e717      	b.n	800a616 <_vfiprintf_r+0x11e>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b68      	cmp	r3, #104	; 0x68
 800a7ec:	bf01      	itttt	eq
 800a7ee:	9b01      	ldreq	r3, [sp, #4]
 800a7f0:	3301      	addeq	r3, #1
 800a7f2:	9301      	streq	r3, [sp, #4]
 800a7f4:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800a7f8:	bf18      	it	ne
 800a7fa:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800a7fe:	e7ab      	b.n	800a758 <_vfiprintf_r+0x260>
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b6c      	cmp	r3, #108	; 0x6c
 800a806:	d105      	bne.n	800a814 <_vfiprintf_r+0x31c>
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	3301      	adds	r3, #1
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	f04a 0a20 	orr.w	sl, sl, #32
 800a812:	e7a1      	b.n	800a758 <_vfiprintf_r+0x260>
 800a814:	f04a 0a10 	orr.w	sl, sl, #16
 800a818:	e79e      	b.n	800a758 <_vfiprintf_r+0x260>
 800a81a:	46a3      	mov	fp, r4
 800a81c:	2100      	movs	r1, #0
 800a81e:	f85b 3b04 	ldr.w	r3, [fp], #4
 800a822:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a826:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800a82a:	2301      	movs	r3, #1
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	460d      	mov	r5, r1
 800a830:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800a834:	e0ad      	b.n	800a992 <_vfiprintf_r+0x49a>
 800a836:	f04a 0a10 	orr.w	sl, sl, #16
 800a83a:	f01a 0f20 	tst.w	sl, #32
 800a83e:	d011      	beq.n	800a864 <_vfiprintf_r+0x36c>
 800a840:	3407      	adds	r4, #7
 800a842:	f024 0307 	bic.w	r3, r4, #7
 800a846:	469b      	mov	fp, r3
 800a848:	685d      	ldr	r5, [r3, #4]
 800a84a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a84e:	2d00      	cmp	r5, #0
 800a850:	da06      	bge.n	800a860 <_vfiprintf_r+0x368>
 800a852:	4264      	negs	r4, r4
 800a854:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a858:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800a85c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a860:	2301      	movs	r3, #1
 800a862:	e04a      	b.n	800a8fa <_vfiprintf_r+0x402>
 800a864:	46a3      	mov	fp, r4
 800a866:	f01a 0f10 	tst.w	sl, #16
 800a86a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800a86e:	d002      	beq.n	800a876 <_vfiprintf_r+0x37e>
 800a870:	462c      	mov	r4, r5
 800a872:	17ed      	asrs	r5, r5, #31
 800a874:	e7eb      	b.n	800a84e <_vfiprintf_r+0x356>
 800a876:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a87a:	d003      	beq.n	800a884 <_vfiprintf_r+0x38c>
 800a87c:	b22c      	sxth	r4, r5
 800a87e:	f345 35c0 	sbfx	r5, r5, #15, #1
 800a882:	e7e4      	b.n	800a84e <_vfiprintf_r+0x356>
 800a884:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a888:	d0f2      	beq.n	800a870 <_vfiprintf_r+0x378>
 800a88a:	b26c      	sxtb	r4, r5
 800a88c:	f345 15c0 	sbfx	r5, r5, #7, #1
 800a890:	e7dd      	b.n	800a84e <_vfiprintf_r+0x356>
 800a892:	f01a 0f20 	tst.w	sl, #32
 800a896:	f104 0b04 	add.w	fp, r4, #4
 800a89a:	d007      	beq.n	800a8ac <_vfiprintf_r+0x3b4>
 800a89c:	9a02      	ldr	r2, [sp, #8]
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	9902      	ldr	r1, [sp, #8]
 800a8a2:	17d2      	asrs	r2, r2, #31
 800a8a4:	e9c3 1200 	strd	r1, r2, [r3]
 800a8a8:	465c      	mov	r4, fp
 800a8aa:	e68c      	b.n	800a5c6 <_vfiprintf_r+0xce>
 800a8ac:	f01a 0f10 	tst.w	sl, #16
 800a8b0:	d003      	beq.n	800a8ba <_vfiprintf_r+0x3c2>
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	9a02      	ldr	r2, [sp, #8]
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e7f6      	b.n	800a8a8 <_vfiprintf_r+0x3b0>
 800a8ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a8be:	d003      	beq.n	800a8c8 <_vfiprintf_r+0x3d0>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	9a02      	ldr	r2, [sp, #8]
 800a8c4:	801a      	strh	r2, [r3, #0]
 800a8c6:	e7ef      	b.n	800a8a8 <_vfiprintf_r+0x3b0>
 800a8c8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a8cc:	d0f1      	beq.n	800a8b2 <_vfiprintf_r+0x3ba>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	9a02      	ldr	r2, [sp, #8]
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	e7e8      	b.n	800a8a8 <_vfiprintf_r+0x3b0>
 800a8d6:	f04a 0a10 	orr.w	sl, sl, #16
 800a8da:	f01a 0320 	ands.w	r3, sl, #32
 800a8de:	d01f      	beq.n	800a920 <_vfiprintf_r+0x428>
 800a8e0:	3407      	adds	r4, #7
 800a8e2:	f024 0307 	bic.w	r3, r4, #7
 800a8e6:	469b      	mov	fp, r3
 800a8e8:	685d      	ldr	r5, [r3, #4]
 800a8ea:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a8ee:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800a8fa:	9a00      	ldr	r2, [sp, #0]
 800a8fc:	3201      	adds	r2, #1
 800a8fe:	f000 8262 	beq.w	800adc6 <_vfiprintf_r+0x8ce>
 800a902:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800a906:	9204      	str	r2, [sp, #16]
 800a908:	ea54 0205 	orrs.w	r2, r4, r5
 800a90c:	f040 8261 	bne.w	800add2 <_vfiprintf_r+0x8da>
 800a910:	9a00      	ldr	r2, [sp, #0]
 800a912:	2a00      	cmp	r2, #0
 800a914:	f000 8199 	beq.w	800ac4a <_vfiprintf_r+0x752>
 800a918:	2b01      	cmp	r3, #1
 800a91a:	f040 825d 	bne.w	800add8 <_vfiprintf_r+0x8e0>
 800a91e:	e139      	b.n	800ab94 <_vfiprintf_r+0x69c>
 800a920:	46a3      	mov	fp, r4
 800a922:	f01a 0510 	ands.w	r5, sl, #16
 800a926:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a92a:	d001      	beq.n	800a930 <_vfiprintf_r+0x438>
 800a92c:	461d      	mov	r5, r3
 800a92e:	e7de      	b.n	800a8ee <_vfiprintf_r+0x3f6>
 800a930:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800a934:	d001      	beq.n	800a93a <_vfiprintf_r+0x442>
 800a936:	b2a4      	uxth	r4, r4
 800a938:	e7d9      	b.n	800a8ee <_vfiprintf_r+0x3f6>
 800a93a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800a93e:	d0d6      	beq.n	800a8ee <_vfiprintf_r+0x3f6>
 800a940:	b2e4      	uxtb	r4, r4
 800a942:	e7f3      	b.n	800a92c <_vfiprintf_r+0x434>
 800a944:	2330      	movs	r3, #48	; 0x30
 800a946:	46a3      	mov	fp, r4
 800a948:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a94c:	2378      	movs	r3, #120	; 0x78
 800a94e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800a952:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a956:	4b03      	ldr	r3, [pc, #12]	; (800a964 <_vfiprintf_r+0x46c>)
 800a958:	9305      	str	r3, [sp, #20]
 800a95a:	2500      	movs	r5, #0
 800a95c:	f04a 0a02 	orr.w	sl, sl, #2
 800a960:	2302      	movs	r3, #2
 800a962:	e7c7      	b.n	800a8f4 <_vfiprintf_r+0x3fc>
 800a964:	0800bc78 	.word	0x0800bc78
 800a968:	9b00      	ldr	r3, [sp, #0]
 800a96a:	46a3      	mov	fp, r4
 800a96c:	2500      	movs	r5, #0
 800a96e:	1c5c      	adds	r4, r3, #1
 800a970:	f85b 8b04 	ldr.w	r8, [fp], #4
 800a974:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800a978:	f000 80ce 	beq.w	800ab18 <_vfiprintf_r+0x620>
 800a97c:	461a      	mov	r2, r3
 800a97e:	4629      	mov	r1, r5
 800a980:	4640      	mov	r0, r8
 800a982:	f7f5 fc3d 	bl	8000200 <memchr>
 800a986:	2800      	cmp	r0, #0
 800a988:	f000 8174 	beq.w	800ac74 <_vfiprintf_r+0x77c>
 800a98c:	eba0 0308 	sub.w	r3, r0, r8
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	9b00      	ldr	r3, [sp, #0]
 800a994:	42ab      	cmp	r3, r5
 800a996:	bfb8      	it	lt
 800a998:	462b      	movlt	r3, r5
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a9a0:	b113      	cbz	r3, 800a9a8 <_vfiprintf_r+0x4b0>
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	9304      	str	r3, [sp, #16]
 800a9a8:	f01a 0302 	ands.w	r3, sl, #2
 800a9ac:	9308      	str	r3, [sp, #32]
 800a9ae:	bf1e      	ittt	ne
 800a9b0:	9b04      	ldrne	r3, [sp, #16]
 800a9b2:	3302      	addne	r3, #2
 800a9b4:	9304      	strne	r3, [sp, #16]
 800a9b6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800a9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a9bc:	d11f      	bne.n	800a9fe <_vfiprintf_r+0x506>
 800a9be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a9c2:	1a9c      	subs	r4, r3, r2
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	dd1a      	ble.n	800a9fe <_vfiprintf_r+0x506>
 800a9c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a9cc:	48aa      	ldr	r0, [pc, #680]	; (800ac78 <_vfiprintf_r+0x780>)
 800a9ce:	6030      	str	r0, [r6, #0]
 800a9d0:	2c10      	cmp	r4, #16
 800a9d2:	f103 0301 	add.w	r3, r3, #1
 800a9d6:	f106 0108 	add.w	r1, r6, #8
 800a9da:	f300 8153 	bgt.w	800ac84 <_vfiprintf_r+0x78c>
 800a9de:	6074      	str	r4, [r6, #4]
 800a9e0:	2b07      	cmp	r3, #7
 800a9e2:	4414      	add	r4, r2
 800a9e4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800a9e8:	f340 815e 	ble.w	800aca8 <_vfiprintf_r+0x7b0>
 800a9ec:	aa0c      	add	r2, sp, #48	; 0x30
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	4648      	mov	r0, r9
 800a9f2:	f7ff fd4f 	bl	800a494 <__sprint_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f040 81b7 	bne.w	800ad6a <_vfiprintf_r+0x872>
 800a9fc:	ae0f      	add	r6, sp, #60	; 0x3c
 800a9fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800aa02:	b173      	cbz	r3, 800aa22 <_vfiprintf_r+0x52a>
 800aa04:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800aa08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa0a:	6032      	str	r2, [r6, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	6072      	str	r2, [r6, #4]
 800aa10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa12:	3301      	adds	r3, #1
 800aa14:	3201      	adds	r2, #1
 800aa16:	2b07      	cmp	r3, #7
 800aa18:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800aa1c:	f300 8146 	bgt.w	800acac <_vfiprintf_r+0x7b4>
 800aa20:	3608      	adds	r6, #8
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	b16b      	cbz	r3, 800aa42 <_vfiprintf_r+0x54a>
 800aa26:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa2a:	6032      	str	r2, [r6, #0]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	6072      	str	r2, [r6, #4]
 800aa30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa32:	3301      	adds	r3, #1
 800aa34:	3202      	adds	r2, #2
 800aa36:	2b07      	cmp	r3, #7
 800aa38:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800aa3c:	f300 813f 	bgt.w	800acbe <_vfiprintf_r+0x7c6>
 800aa40:	3608      	adds	r6, #8
 800aa42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa44:	2b80      	cmp	r3, #128	; 0x80
 800aa46:	d11f      	bne.n	800aa88 <_vfiprintf_r+0x590>
 800aa48:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800aa4c:	1a9c      	subs	r4, r3, r2
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	dd1a      	ble.n	800aa88 <_vfiprintf_r+0x590>
 800aa52:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800aa56:	4889      	ldr	r0, [pc, #548]	; (800ac7c <_vfiprintf_r+0x784>)
 800aa58:	6030      	str	r0, [r6, #0]
 800aa5a:	2c10      	cmp	r4, #16
 800aa5c:	f103 0301 	add.w	r3, r3, #1
 800aa60:	f106 0108 	add.w	r1, r6, #8
 800aa64:	f300 8134 	bgt.w	800acd0 <_vfiprintf_r+0x7d8>
 800aa68:	6074      	str	r4, [r6, #4]
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	4414      	add	r4, r2
 800aa6e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800aa72:	f340 813f 	ble.w	800acf4 <_vfiprintf_r+0x7fc>
 800aa76:	aa0c      	add	r2, sp, #48	; 0x30
 800aa78:	4639      	mov	r1, r7
 800aa7a:	4648      	mov	r0, r9
 800aa7c:	f7ff fd0a 	bl	800a494 <__sprint_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f040 8172 	bne.w	800ad6a <_vfiprintf_r+0x872>
 800aa86:	ae0f      	add	r6, sp, #60	; 0x3c
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	1aec      	subs	r4, r5, r3
 800aa8c:	2c00      	cmp	r4, #0
 800aa8e:	dd1a      	ble.n	800aac6 <_vfiprintf_r+0x5ce>
 800aa90:	4d7a      	ldr	r5, [pc, #488]	; (800ac7c <_vfiprintf_r+0x784>)
 800aa92:	6035      	str	r5, [r6, #0]
 800aa94:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800aa98:	2c10      	cmp	r4, #16
 800aa9a:	f103 0301 	add.w	r3, r3, #1
 800aa9e:	f106 0208 	add.w	r2, r6, #8
 800aaa2:	f300 8129 	bgt.w	800acf8 <_vfiprintf_r+0x800>
 800aaa6:	6074      	str	r4, [r6, #4]
 800aaa8:	2b07      	cmp	r3, #7
 800aaaa:	440c      	add	r4, r1
 800aaac:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800aab0:	f340 8133 	ble.w	800ad1a <_vfiprintf_r+0x822>
 800aab4:	aa0c      	add	r2, sp, #48	; 0x30
 800aab6:	4639      	mov	r1, r7
 800aab8:	4648      	mov	r0, r9
 800aaba:	f7ff fceb 	bl	800a494 <__sprint_r>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f040 8153 	bne.w	800ad6a <_vfiprintf_r+0x872>
 800aac4:	ae0f      	add	r6, sp, #60	; 0x3c
 800aac6:	9b00      	ldr	r3, [sp, #0]
 800aac8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aaca:	6073      	str	r3, [r6, #4]
 800aacc:	4418      	add	r0, r3
 800aace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad0:	f8c6 8000 	str.w	r8, [r6]
 800aad4:	3301      	adds	r3, #1
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	900e      	str	r0, [sp, #56]	; 0x38
 800aada:	930d      	str	r3, [sp, #52]	; 0x34
 800aadc:	f300 811f 	bgt.w	800ad1e <_vfiprintf_r+0x826>
 800aae0:	f106 0308 	add.w	r3, r6, #8
 800aae4:	f01a 0f04 	tst.w	sl, #4
 800aae8:	f040 8121 	bne.w	800ad2e <_vfiprintf_r+0x836>
 800aaec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aaf0:	9904      	ldr	r1, [sp, #16]
 800aaf2:	428a      	cmp	r2, r1
 800aaf4:	bfac      	ite	ge
 800aaf6:	189b      	addge	r3, r3, r2
 800aaf8:	185b      	addlt	r3, r3, r1
 800aafa:	9302      	str	r3, [sp, #8]
 800aafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aafe:	b13b      	cbz	r3, 800ab10 <_vfiprintf_r+0x618>
 800ab00:	aa0c      	add	r2, sp, #48	; 0x30
 800ab02:	4639      	mov	r1, r7
 800ab04:	4648      	mov	r0, r9
 800ab06:	f7ff fcc5 	bl	800a494 <__sprint_r>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f040 812d 	bne.w	800ad6a <_vfiprintf_r+0x872>
 800ab10:	2300      	movs	r3, #0
 800ab12:	930d      	str	r3, [sp, #52]	; 0x34
 800ab14:	ae0f      	add	r6, sp, #60	; 0x3c
 800ab16:	e6c7      	b.n	800a8a8 <_vfiprintf_r+0x3b0>
 800ab18:	4640      	mov	r0, r8
 800ab1a:	f7f5 fb63 	bl	80001e4 <strlen>
 800ab1e:	9000      	str	r0, [sp, #0]
 800ab20:	e737      	b.n	800a992 <_vfiprintf_r+0x49a>
 800ab22:	f04a 0a10 	orr.w	sl, sl, #16
 800ab26:	f01a 0320 	ands.w	r3, sl, #32
 800ab2a:	d008      	beq.n	800ab3e <_vfiprintf_r+0x646>
 800ab2c:	3407      	adds	r4, #7
 800ab2e:	f024 0307 	bic.w	r3, r4, #7
 800ab32:	469b      	mov	fp, r3
 800ab34:	685d      	ldr	r5, [r3, #4]
 800ab36:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e6da      	b.n	800a8f4 <_vfiprintf_r+0x3fc>
 800ab3e:	46a3      	mov	fp, r4
 800ab40:	f01a 0510 	ands.w	r5, sl, #16
 800ab44:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ab48:	d001      	beq.n	800ab4e <_vfiprintf_r+0x656>
 800ab4a:	461d      	mov	r5, r3
 800ab4c:	e7f5      	b.n	800ab3a <_vfiprintf_r+0x642>
 800ab4e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ab52:	d001      	beq.n	800ab58 <_vfiprintf_r+0x660>
 800ab54:	b2a4      	uxth	r4, r4
 800ab56:	e7f0      	b.n	800ab3a <_vfiprintf_r+0x642>
 800ab58:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ab5c:	d0ed      	beq.n	800ab3a <_vfiprintf_r+0x642>
 800ab5e:	b2e4      	uxtb	r4, r4
 800ab60:	e7f3      	b.n	800ab4a <_vfiprintf_r+0x652>
 800ab62:	4a47      	ldr	r2, [pc, #284]	; (800ac80 <_vfiprintf_r+0x788>)
 800ab64:	e5c5      	b.n	800a6f2 <_vfiprintf_r+0x1fa>
 800ab66:	46a3      	mov	fp, r4
 800ab68:	f01a 0510 	ands.w	r5, sl, #16
 800ab6c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ab70:	d001      	beq.n	800ab76 <_vfiprintf_r+0x67e>
 800ab72:	4615      	mov	r5, r2
 800ab74:	e5c9      	b.n	800a70a <_vfiprintf_r+0x212>
 800ab76:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800ab7a:	d001      	beq.n	800ab80 <_vfiprintf_r+0x688>
 800ab7c:	b2a4      	uxth	r4, r4
 800ab7e:	e5c4      	b.n	800a70a <_vfiprintf_r+0x212>
 800ab80:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ab84:	f43f adc1 	beq.w	800a70a <_vfiprintf_r+0x212>
 800ab88:	b2e4      	uxtb	r4, r4
 800ab8a:	e7f2      	b.n	800ab72 <_vfiprintf_r+0x67a>
 800ab8c:	2c0a      	cmp	r4, #10
 800ab8e:	f175 0300 	sbcs.w	r3, r5, #0
 800ab92:	d205      	bcs.n	800aba0 <_vfiprintf_r+0x6a8>
 800ab94:	3430      	adds	r4, #48	; 0x30
 800ab96:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800ab9a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800ab9e:	e137      	b.n	800ae10 <_vfiprintf_r+0x918>
 800aba0:	ab38      	add	r3, sp, #224	; 0xe0
 800aba2:	9308      	str	r3, [sp, #32]
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abaa:	f04f 0a00 	mov.w	sl, #0
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	220a      	movs	r2, #10
 800abb4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800abb8:	4620      	mov	r0, r4
 800abba:	2300      	movs	r3, #0
 800abbc:	4629      	mov	r1, r5
 800abbe:	f7f6 f873 	bl	8000ca8 <__aeabi_uldivmod>
 800abc2:	9b08      	ldr	r3, [sp, #32]
 800abc4:	3230      	adds	r2, #48	; 0x30
 800abc6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800abca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abcc:	f10a 0a01 	add.w	sl, sl, #1
 800abd0:	b1db      	cbz	r3, 800ac0a <_vfiprintf_r+0x712>
 800abd2:	9b06      	ldr	r3, [sp, #24]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4553      	cmp	r3, sl
 800abd8:	d117      	bne.n	800ac0a <_vfiprintf_r+0x712>
 800abda:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800abde:	d014      	beq.n	800ac0a <_vfiprintf_r+0x712>
 800abe0:	2c0a      	cmp	r4, #10
 800abe2:	f175 0300 	sbcs.w	r3, r5, #0
 800abe6:	d310      	bcc.n	800ac0a <_vfiprintf_r+0x712>
 800abe8:	9b07      	ldr	r3, [sp, #28]
 800abea:	eba8 0803 	sub.w	r8, r8, r3
 800abee:	461a      	mov	r2, r3
 800abf0:	ee18 1a10 	vmov	r1, s16
 800abf4:	4640      	mov	r0, r8
 800abf6:	f7ff f93f 	bl	8009e78 <strncpy>
 800abfa:	9b06      	ldr	r3, [sp, #24]
 800abfc:	785b      	ldrb	r3, [r3, #1]
 800abfe:	b1a3      	cbz	r3, 800ac2a <_vfiprintf_r+0x732>
 800ac00:	9b06      	ldr	r3, [sp, #24]
 800ac02:	3301      	adds	r3, #1
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	f04f 0a00 	mov.w	sl, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4629      	mov	r1, r5
 800ac12:	f7f6 f849 	bl	8000ca8 <__aeabi_uldivmod>
 800ac16:	2c0a      	cmp	r4, #10
 800ac18:	f175 0300 	sbcs.w	r3, r5, #0
 800ac1c:	f0c0 80f8 	bcc.w	800ae10 <_vfiprintf_r+0x918>
 800ac20:	4604      	mov	r4, r0
 800ac22:	460d      	mov	r5, r1
 800ac24:	f8cd 8020 	str.w	r8, [sp, #32]
 800ac28:	e7c2      	b.n	800abb0 <_vfiprintf_r+0x6b8>
 800ac2a:	469a      	mov	sl, r3
 800ac2c:	e7ed      	b.n	800ac0a <_vfiprintf_r+0x712>
 800ac2e:	f004 030f 	and.w	r3, r4, #15
 800ac32:	9a05      	ldr	r2, [sp, #20]
 800ac34:	0924      	lsrs	r4, r4, #4
 800ac36:	5cd3      	ldrb	r3, [r2, r3]
 800ac38:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ac3c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ac40:	092d      	lsrs	r5, r5, #4
 800ac42:	ea54 0305 	orrs.w	r3, r4, r5
 800ac46:	d1f2      	bne.n	800ac2e <_vfiprintf_r+0x736>
 800ac48:	e0e2      	b.n	800ae10 <_vfiprintf_r+0x918>
 800ac4a:	b933      	cbnz	r3, 800ac5a <_vfiprintf_r+0x762>
 800ac4c:	f01a 0f01 	tst.w	sl, #1
 800ac50:	d003      	beq.n	800ac5a <_vfiprintf_r+0x762>
 800ac52:	2330      	movs	r3, #48	; 0x30
 800ac54:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800ac58:	e79f      	b.n	800ab9a <_vfiprintf_r+0x6a2>
 800ac5a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ac5e:	e0d7      	b.n	800ae10 <_vfiprintf_r+0x918>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80a3 	beq.w	800adac <_vfiprintf_r+0x8b4>
 800ac66:	2100      	movs	r1, #0
 800ac68:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ac6c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800ac70:	46a3      	mov	fp, r4
 800ac72:	e5da      	b.n	800a82a <_vfiprintf_r+0x332>
 800ac74:	4605      	mov	r5, r0
 800ac76:	e68c      	b.n	800a992 <_vfiprintf_r+0x49a>
 800ac78:	0800c048 	.word	0x0800c048
 800ac7c:	0800c058 	.word	0x0800c058
 800ac80:	0800bc89 	.word	0x0800bc89
 800ac84:	2010      	movs	r0, #16
 800ac86:	4402      	add	r2, r0
 800ac88:	2b07      	cmp	r3, #7
 800ac8a:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ac8e:	6070      	str	r0, [r6, #4]
 800ac90:	dd07      	ble.n	800aca2 <_vfiprintf_r+0x7aa>
 800ac92:	aa0c      	add	r2, sp, #48	; 0x30
 800ac94:	4639      	mov	r1, r7
 800ac96:	4648      	mov	r0, r9
 800ac98:	f7ff fbfc 	bl	800a494 <__sprint_r>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d164      	bne.n	800ad6a <_vfiprintf_r+0x872>
 800aca0:	a90f      	add	r1, sp, #60	; 0x3c
 800aca2:	3c10      	subs	r4, #16
 800aca4:	460e      	mov	r6, r1
 800aca6:	e68f      	b.n	800a9c8 <_vfiprintf_r+0x4d0>
 800aca8:	460e      	mov	r6, r1
 800acaa:	e6a8      	b.n	800a9fe <_vfiprintf_r+0x506>
 800acac:	aa0c      	add	r2, sp, #48	; 0x30
 800acae:	4639      	mov	r1, r7
 800acb0:	4648      	mov	r0, r9
 800acb2:	f7ff fbef 	bl	800a494 <__sprint_r>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d157      	bne.n	800ad6a <_vfiprintf_r+0x872>
 800acba:	ae0f      	add	r6, sp, #60	; 0x3c
 800acbc:	e6b1      	b.n	800aa22 <_vfiprintf_r+0x52a>
 800acbe:	aa0c      	add	r2, sp, #48	; 0x30
 800acc0:	4639      	mov	r1, r7
 800acc2:	4648      	mov	r0, r9
 800acc4:	f7ff fbe6 	bl	800a494 <__sprint_r>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d14e      	bne.n	800ad6a <_vfiprintf_r+0x872>
 800accc:	ae0f      	add	r6, sp, #60	; 0x3c
 800acce:	e6b8      	b.n	800aa42 <_vfiprintf_r+0x54a>
 800acd0:	2010      	movs	r0, #16
 800acd2:	4402      	add	r2, r0
 800acd4:	2b07      	cmp	r3, #7
 800acd6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800acda:	6070      	str	r0, [r6, #4]
 800acdc:	dd07      	ble.n	800acee <_vfiprintf_r+0x7f6>
 800acde:	aa0c      	add	r2, sp, #48	; 0x30
 800ace0:	4639      	mov	r1, r7
 800ace2:	4648      	mov	r0, r9
 800ace4:	f7ff fbd6 	bl	800a494 <__sprint_r>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d13e      	bne.n	800ad6a <_vfiprintf_r+0x872>
 800acec:	a90f      	add	r1, sp, #60	; 0x3c
 800acee:	3c10      	subs	r4, #16
 800acf0:	460e      	mov	r6, r1
 800acf2:	e6ae      	b.n	800aa52 <_vfiprintf_r+0x55a>
 800acf4:	460e      	mov	r6, r1
 800acf6:	e6c7      	b.n	800aa88 <_vfiprintf_r+0x590>
 800acf8:	2010      	movs	r0, #16
 800acfa:	4401      	add	r1, r0
 800acfc:	2b07      	cmp	r3, #7
 800acfe:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ad02:	6070      	str	r0, [r6, #4]
 800ad04:	dd06      	ble.n	800ad14 <_vfiprintf_r+0x81c>
 800ad06:	aa0c      	add	r2, sp, #48	; 0x30
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4648      	mov	r0, r9
 800ad0c:	f7ff fbc2 	bl	800a494 <__sprint_r>
 800ad10:	bb58      	cbnz	r0, 800ad6a <_vfiprintf_r+0x872>
 800ad12:	aa0f      	add	r2, sp, #60	; 0x3c
 800ad14:	3c10      	subs	r4, #16
 800ad16:	4616      	mov	r6, r2
 800ad18:	e6bb      	b.n	800aa92 <_vfiprintf_r+0x59a>
 800ad1a:	4616      	mov	r6, r2
 800ad1c:	e6d3      	b.n	800aac6 <_vfiprintf_r+0x5ce>
 800ad1e:	aa0c      	add	r2, sp, #48	; 0x30
 800ad20:	4639      	mov	r1, r7
 800ad22:	4648      	mov	r0, r9
 800ad24:	f7ff fbb6 	bl	800a494 <__sprint_r>
 800ad28:	b9f8      	cbnz	r0, 800ad6a <_vfiprintf_r+0x872>
 800ad2a:	ab0f      	add	r3, sp, #60	; 0x3c
 800ad2c:	e6da      	b.n	800aae4 <_vfiprintf_r+0x5ec>
 800ad2e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ad32:	1a54      	subs	r4, r2, r1
 800ad34:	2c00      	cmp	r4, #0
 800ad36:	f77f aed9 	ble.w	800aaec <_vfiprintf_r+0x5f4>
 800ad3a:	4d39      	ldr	r5, [pc, #228]	; (800ae20 <_vfiprintf_r+0x928>)
 800ad3c:	2610      	movs	r6, #16
 800ad3e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ad42:	2c10      	cmp	r4, #16
 800ad44:	f102 0201 	add.w	r2, r2, #1
 800ad48:	601d      	str	r5, [r3, #0]
 800ad4a:	dc1d      	bgt.n	800ad88 <_vfiprintf_r+0x890>
 800ad4c:	605c      	str	r4, [r3, #4]
 800ad4e:	2a07      	cmp	r2, #7
 800ad50:	440c      	add	r4, r1
 800ad52:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800ad56:	f77f aec9 	ble.w	800aaec <_vfiprintf_r+0x5f4>
 800ad5a:	aa0c      	add	r2, sp, #48	; 0x30
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4648      	mov	r0, r9
 800ad60:	f7ff fb98 	bl	800a494 <__sprint_r>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f43f aec1 	beq.w	800aaec <_vfiprintf_r+0x5f4>
 800ad6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6c:	07d9      	lsls	r1, r3, #31
 800ad6e:	d405      	bmi.n	800ad7c <_vfiprintf_r+0x884>
 800ad70:	89bb      	ldrh	r3, [r7, #12]
 800ad72:	059a      	lsls	r2, r3, #22
 800ad74:	d402      	bmi.n	800ad7c <_vfiprintf_r+0x884>
 800ad76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ad78:	f7fe f93d 	bl	8008ff6 <__retarget_lock_release_recursive>
 800ad7c:	89bb      	ldrh	r3, [r7, #12]
 800ad7e:	065b      	lsls	r3, r3, #25
 800ad80:	f57f abed 	bpl.w	800a55e <_vfiprintf_r+0x66>
 800ad84:	f7ff bbe8 	b.w	800a558 <_vfiprintf_r+0x60>
 800ad88:	3110      	adds	r1, #16
 800ad8a:	2a07      	cmp	r2, #7
 800ad8c:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800ad90:	605e      	str	r6, [r3, #4]
 800ad92:	dc02      	bgt.n	800ad9a <_vfiprintf_r+0x8a2>
 800ad94:	3308      	adds	r3, #8
 800ad96:	3c10      	subs	r4, #16
 800ad98:	e7d1      	b.n	800ad3e <_vfiprintf_r+0x846>
 800ad9a:	aa0c      	add	r2, sp, #48	; 0x30
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	4648      	mov	r0, r9
 800ada0:	f7ff fb78 	bl	800a494 <__sprint_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1e0      	bne.n	800ad6a <_vfiprintf_r+0x872>
 800ada8:	ab0f      	add	r3, sp, #60	; 0x3c
 800adaa:	e7f4      	b.n	800ad96 <_vfiprintf_r+0x89e>
 800adac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adae:	b913      	cbnz	r3, 800adb6 <_vfiprintf_r+0x8be>
 800adb0:	2300      	movs	r3, #0
 800adb2:	930d      	str	r3, [sp, #52]	; 0x34
 800adb4:	e7d9      	b.n	800ad6a <_vfiprintf_r+0x872>
 800adb6:	aa0c      	add	r2, sp, #48	; 0x30
 800adb8:	4639      	mov	r1, r7
 800adba:	4648      	mov	r0, r9
 800adbc:	f7ff fb6a 	bl	800a494 <__sprint_r>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0f5      	beq.n	800adb0 <_vfiprintf_r+0x8b8>
 800adc4:	e7d1      	b.n	800ad6a <_vfiprintf_r+0x872>
 800adc6:	ea54 0205 	orrs.w	r2, r4, r5
 800adca:	f8cd a010 	str.w	sl, [sp, #16]
 800adce:	f43f ada3 	beq.w	800a918 <_vfiprintf_r+0x420>
 800add2:	2b01      	cmp	r3, #1
 800add4:	f43f aeda 	beq.w	800ab8c <_vfiprintf_r+0x694>
 800add8:	2b02      	cmp	r3, #2
 800adda:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800adde:	f43f af26 	beq.w	800ac2e <_vfiprintf_r+0x736>
 800ade2:	f004 0307 	and.w	r3, r4, #7
 800ade6:	08e4      	lsrs	r4, r4, #3
 800ade8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800adec:	08ed      	lsrs	r5, r5, #3
 800adee:	3330      	adds	r3, #48	; 0x30
 800adf0:	ea54 0105 	orrs.w	r1, r4, r5
 800adf4:	4642      	mov	r2, r8
 800adf6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800adfa:	d1f2      	bne.n	800ade2 <_vfiprintf_r+0x8ea>
 800adfc:	9904      	ldr	r1, [sp, #16]
 800adfe:	07c8      	lsls	r0, r1, #31
 800ae00:	d506      	bpl.n	800ae10 <_vfiprintf_r+0x918>
 800ae02:	2b30      	cmp	r3, #48	; 0x30
 800ae04:	d004      	beq.n	800ae10 <_vfiprintf_r+0x918>
 800ae06:	2330      	movs	r3, #48	; 0x30
 800ae08:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ae0c:	f1a2 0802 	sub.w	r8, r2, #2
 800ae10:	ab38      	add	r3, sp, #224	; 0xe0
 800ae12:	eba3 0308 	sub.w	r3, r3, r8
 800ae16:	9d00      	ldr	r5, [sp, #0]
 800ae18:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	e5b8      	b.n	800a992 <_vfiprintf_r+0x49a>
 800ae20:	0800c048 	.word	0x0800c048

0800ae24 <__sbprintf>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	8989      	ldrh	r1, [r1, #12]
 800ae2a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ae2e:	f021 0102 	bic.w	r1, r1, #2
 800ae32:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ae36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ae38:	911b      	str	r1, [sp, #108]	; 0x6c
 800ae3a:	89e1      	ldrh	r1, [r4, #14]
 800ae3c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ae40:	69e1      	ldr	r1, [r4, #28]
 800ae42:	9109      	str	r1, [sp, #36]	; 0x24
 800ae44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae46:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae48:	a91c      	add	r1, sp, #112	; 0x70
 800ae4a:	9102      	str	r1, [sp, #8]
 800ae4c:	9106      	str	r1, [sp, #24]
 800ae4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae52:	4606      	mov	r6, r0
 800ae54:	9104      	str	r1, [sp, #16]
 800ae56:	9107      	str	r1, [sp, #28]
 800ae58:	a818      	add	r0, sp, #96	; 0x60
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	e9cd 3200 	strd	r3, r2, [sp]
 800ae60:	9108      	str	r1, [sp, #32]
 800ae62:	f7fe f8c5 	bl	8008ff0 <__retarget_lock_init_recursive>
 800ae66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae6a:	a902      	add	r1, sp, #8
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff fb43 	bl	800a4f8 <_vfiprintf_r>
 800ae72:	1e05      	subs	r5, r0, #0
 800ae74:	db07      	blt.n	800ae86 <__sbprintf+0x62>
 800ae76:	a902      	add	r1, sp, #8
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f901 	bl	800b080 <_fflush_r>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	bf18      	it	ne
 800ae82:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800ae86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ae8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ae8c:	065b      	lsls	r3, r3, #25
 800ae8e:	bf42      	ittt	mi
 800ae90:	89a3      	ldrhmi	r3, [r4, #12]
 800ae92:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ae96:	81a3      	strhmi	r3, [r4, #12]
 800ae98:	f7fe f8ab 	bl	8008ff2 <__retarget_lock_close_recursive>
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800aea2:	bd70      	pop	{r4, r5, r6, pc}

0800aea4 <__swsetup_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4b2a      	ldr	r3, [pc, #168]	; (800af50 <__swsetup_r+0xac>)
 800aea8:	4605      	mov	r5, r0
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	460c      	mov	r4, r1
 800aeae:	b118      	cbz	r0, 800aeb8 <__swsetup_r+0x14>
 800aeb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aeb2:	b90b      	cbnz	r3, 800aeb8 <__swsetup_r+0x14>
 800aeb4:	f000 f950 	bl	800b158 <__sinit>
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aebe:	0718      	lsls	r0, r3, #28
 800aec0:	d422      	bmi.n	800af08 <__swsetup_r+0x64>
 800aec2:	06d9      	lsls	r1, r3, #27
 800aec4:	d407      	bmi.n	800aed6 <__swsetup_r+0x32>
 800aec6:	2309      	movs	r3, #9
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aed4:	e034      	b.n	800af40 <__swsetup_r+0x9c>
 800aed6:	0758      	lsls	r0, r3, #29
 800aed8:	d512      	bpl.n	800af00 <__swsetup_r+0x5c>
 800aeda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aedc:	b141      	cbz	r1, 800aef0 <__swsetup_r+0x4c>
 800aede:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800aee2:	4299      	cmp	r1, r3
 800aee4:	d002      	beq.n	800aeec <__swsetup_r+0x48>
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7fd fc48 	bl	800877c <_free_r>
 800aeec:	2300      	movs	r3, #0
 800aeee:	6323      	str	r3, [r4, #48]	; 0x30
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	2300      	movs	r3, #0
 800aefa:	6063      	str	r3, [r4, #4]
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f043 0308 	orr.w	r3, r3, #8
 800af06:	81a3      	strh	r3, [r4, #12]
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	b94b      	cbnz	r3, 800af20 <__swsetup_r+0x7c>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af16:	d003      	beq.n	800af20 <__swsetup_r+0x7c>
 800af18:	4621      	mov	r1, r4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 fb46 	bl	800b5ac <__smakebuf_r>
 800af20:	89a0      	ldrh	r0, [r4, #12]
 800af22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af26:	f010 0301 	ands.w	r3, r0, #1
 800af2a:	d00a      	beq.n	800af42 <__swsetup_r+0x9e>
 800af2c:	2300      	movs	r3, #0
 800af2e:	60a3      	str	r3, [r4, #8]
 800af30:	6963      	ldr	r3, [r4, #20]
 800af32:	425b      	negs	r3, r3
 800af34:	61a3      	str	r3, [r4, #24]
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	b943      	cbnz	r3, 800af4c <__swsetup_r+0xa8>
 800af3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af3e:	d1c4      	bne.n	800aeca <__swsetup_r+0x26>
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	0781      	lsls	r1, r0, #30
 800af44:	bf58      	it	pl
 800af46:	6963      	ldrpl	r3, [r4, #20]
 800af48:	60a3      	str	r3, [r4, #8]
 800af4a:	e7f4      	b.n	800af36 <__swsetup_r+0x92>
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7f7      	b.n	800af40 <__swsetup_r+0x9c>
 800af50:	20000014 	.word	0x20000014

0800af54 <abort>:
 800af54:	b508      	push	{r3, lr}
 800af56:	2006      	movs	r0, #6
 800af58:	f000 fb92 	bl	800b680 <raise>
 800af5c:	2001      	movs	r0, #1
 800af5e:	f7f6 fdc5 	bl	8001aec <_exit>
	...

0800af64 <__sflush_r>:
 800af64:	898b      	ldrh	r3, [r1, #12]
 800af66:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	4605      	mov	r5, r0
 800af70:	0718      	lsls	r0, r3, #28
 800af72:	460c      	mov	r4, r1
 800af74:	d45f      	bmi.n	800b036 <__sflush_r+0xd2>
 800af76:	684b      	ldr	r3, [r1, #4]
 800af78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	818a      	strh	r2, [r1, #12]
 800af80:	dc05      	bgt.n	800af8e <__sflush_r+0x2a>
 800af82:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800af84:	2b00      	cmp	r3, #0
 800af86:	dc02      	bgt.n	800af8e <__sflush_r+0x2a>
 800af88:	2000      	movs	r0, #0
 800af8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af90:	2e00      	cmp	r6, #0
 800af92:	d0f9      	beq.n	800af88 <__sflush_r+0x24>
 800af94:	2300      	movs	r3, #0
 800af96:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af9a:	682f      	ldr	r7, [r5, #0]
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	d036      	beq.n	800b00e <__sflush_r+0xaa>
 800afa0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	075a      	lsls	r2, r3, #29
 800afa6:	d505      	bpl.n	800afb4 <__sflush_r+0x50>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	1ac0      	subs	r0, r0, r3
 800afac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afae:	b10b      	cbz	r3, 800afb4 <__sflush_r+0x50>
 800afb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afb2:	1ac0      	subs	r0, r0, r3
 800afb4:	2300      	movs	r3, #0
 800afb6:	4602      	mov	r2, r0
 800afb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afba:	69e1      	ldr	r1, [r4, #28]
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b0      	blx	r6
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	d106      	bne.n	800afd4 <__sflush_r+0x70>
 800afc6:	6829      	ldr	r1, [r5, #0]
 800afc8:	291d      	cmp	r1, #29
 800afca:	d830      	bhi.n	800b02e <__sflush_r+0xca>
 800afcc:	4a2b      	ldr	r2, [pc, #172]	; (800b07c <__sflush_r+0x118>)
 800afce:	40ca      	lsrs	r2, r1
 800afd0:	07d6      	lsls	r6, r2, #31
 800afd2:	d52c      	bpl.n	800b02e <__sflush_r+0xca>
 800afd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afd8:	b21b      	sxth	r3, r3
 800afda:	2200      	movs	r2, #0
 800afdc:	6062      	str	r2, [r4, #4]
 800afde:	04d9      	lsls	r1, r3, #19
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	d504      	bpl.n	800aff2 <__sflush_r+0x8e>
 800afe8:	1c42      	adds	r2, r0, #1
 800afea:	d101      	bne.n	800aff0 <__sflush_r+0x8c>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b903      	cbnz	r3, 800aff2 <__sflush_r+0x8e>
 800aff0:	6520      	str	r0, [r4, #80]	; 0x50
 800aff2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aff4:	602f      	str	r7, [r5, #0]
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d0c6      	beq.n	800af88 <__sflush_r+0x24>
 800affa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800affe:	4299      	cmp	r1, r3
 800b000:	d002      	beq.n	800b008 <__sflush_r+0xa4>
 800b002:	4628      	mov	r0, r5
 800b004:	f7fd fbba 	bl	800877c <_free_r>
 800b008:	2000      	movs	r0, #0
 800b00a:	6320      	str	r0, [r4, #48]	; 0x30
 800b00c:	e7bd      	b.n	800af8a <__sflush_r+0x26>
 800b00e:	69e1      	ldr	r1, [r4, #28]
 800b010:	2301      	movs	r3, #1
 800b012:	4628      	mov	r0, r5
 800b014:	47b0      	blx	r6
 800b016:	1c41      	adds	r1, r0, #1
 800b018:	d1c3      	bne.n	800afa2 <__sflush_r+0x3e>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0c0      	beq.n	800afa2 <__sflush_r+0x3e>
 800b020:	2b1d      	cmp	r3, #29
 800b022:	d001      	beq.n	800b028 <__sflush_r+0xc4>
 800b024:	2b16      	cmp	r3, #22
 800b026:	d101      	bne.n	800b02c <__sflush_r+0xc8>
 800b028:	602f      	str	r7, [r5, #0]
 800b02a:	e7ad      	b.n	800af88 <__sflush_r+0x24>
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	e7a9      	b.n	800af8a <__sflush_r+0x26>
 800b036:	690f      	ldr	r7, [r1, #16]
 800b038:	2f00      	cmp	r7, #0
 800b03a:	d0a5      	beq.n	800af88 <__sflush_r+0x24>
 800b03c:	079b      	lsls	r3, r3, #30
 800b03e:	680e      	ldr	r6, [r1, #0]
 800b040:	bf08      	it	eq
 800b042:	694b      	ldreq	r3, [r1, #20]
 800b044:	600f      	str	r7, [r1, #0]
 800b046:	bf18      	it	ne
 800b048:	2300      	movne	r3, #0
 800b04a:	eba6 0807 	sub.w	r8, r6, r7
 800b04e:	608b      	str	r3, [r1, #8]
 800b050:	f1b8 0f00 	cmp.w	r8, #0
 800b054:	dd98      	ble.n	800af88 <__sflush_r+0x24>
 800b056:	69e1      	ldr	r1, [r4, #28]
 800b058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b05a:	4643      	mov	r3, r8
 800b05c:	463a      	mov	r2, r7
 800b05e:	4628      	mov	r0, r5
 800b060:	47b0      	blx	r6
 800b062:	2800      	cmp	r0, #0
 800b064:	dc06      	bgt.n	800b074 <__sflush_r+0x110>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b072:	e78a      	b.n	800af8a <__sflush_r+0x26>
 800b074:	4407      	add	r7, r0
 800b076:	eba8 0800 	sub.w	r8, r8, r0
 800b07a:	e7e9      	b.n	800b050 <__sflush_r+0xec>
 800b07c:	20400001 	.word	0x20400001

0800b080 <_fflush_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	460c      	mov	r4, r1
 800b084:	4605      	mov	r5, r0
 800b086:	b118      	cbz	r0, 800b090 <_fflush_r+0x10>
 800b088:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b08a:	b90b      	cbnz	r3, 800b090 <_fflush_r+0x10>
 800b08c:	f000 f864 	bl	800b158 <__sinit>
 800b090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b094:	b1bb      	cbz	r3, 800b0c6 <_fflush_r+0x46>
 800b096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b098:	07d0      	lsls	r0, r2, #31
 800b09a:	d404      	bmi.n	800b0a6 <_fflush_r+0x26>
 800b09c:	0599      	lsls	r1, r3, #22
 800b09e:	d402      	bmi.n	800b0a6 <_fflush_r+0x26>
 800b0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0a2:	f7fd ffa7 	bl	8008ff4 <__retarget_lock_acquire_recursive>
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	f7ff ff5b 	bl	800af64 <__sflush_r>
 800b0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0b0:	07da      	lsls	r2, r3, #31
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	d405      	bmi.n	800b0c2 <_fflush_r+0x42>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	059b      	lsls	r3, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_fflush_r+0x42>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0be:	f7fd ff9a 	bl	8008ff6 <__retarget_lock_release_recursive>
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	bd38      	pop	{r3, r4, r5, pc}
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	e7fb      	b.n	800b0c2 <_fflush_r+0x42>
	...

0800b0cc <std>:
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	b510      	push	{r4, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b0d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0da:	6083      	str	r3, [r0, #8]
 800b0dc:	8181      	strh	r1, [r0, #12]
 800b0de:	6643      	str	r3, [r0, #100]	; 0x64
 800b0e0:	81c2      	strh	r2, [r0, #14]
 800b0e2:	6183      	str	r3, [r0, #24]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	305c      	adds	r0, #92	; 0x5c
 800b0ea:	f7fa fb61 	bl	80057b0 <memset>
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <std+0x40>)
 800b0f0:	6223      	str	r3, [r4, #32]
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <std+0x44>)
 800b0f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0f6:	4b07      	ldr	r3, [pc, #28]	; (800b114 <std+0x48>)
 800b0f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0fa:	4b07      	ldr	r3, [pc, #28]	; (800b118 <std+0x4c>)
 800b0fc:	61e4      	str	r4, [r4, #28]
 800b0fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b100:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b108:	f7fd bf72 	b.w	8008ff0 <__retarget_lock_init_recursive>
 800b10c:	0800b6b9 	.word	0x0800b6b9
 800b110:	0800b6db 	.word	0x0800b6db
 800b114:	0800b713 	.word	0x0800b713
 800b118:	0800b737 	.word	0x0800b737

0800b11c <_cleanup_r>:
 800b11c:	4901      	ldr	r1, [pc, #4]	; (800b124 <_cleanup_r+0x8>)
 800b11e:	f000 b9f9 	b.w	800b514 <_fwalk_reent>
 800b122:	bf00      	nop
 800b124:	0800b841 	.word	0x0800b841

0800b128 <__sfp_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sfp_lock_acquire+0x8>)
 800b12a:	f7fd bf63 	b.w	8008ff4 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	20000bae 	.word	0x20000bae

0800b134 <__sfp_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	; (800b13c <__sfp_lock_release+0x8>)
 800b136:	f7fd bf5e 	b.w	8008ff6 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	20000bae 	.word	0x20000bae

0800b140 <__sinit_lock_acquire>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__sinit_lock_acquire+0x8>)
 800b142:	f7fd bf57 	b.w	8008ff4 <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	20000baf 	.word	0x20000baf

0800b14c <__sinit_lock_release>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__sinit_lock_release+0x8>)
 800b14e:	f7fd bf52 	b.w	8008ff6 <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	20000baf 	.word	0x20000baf

0800b158 <__sinit>:
 800b158:	b510      	push	{r4, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	f7ff fff0 	bl	800b140 <__sinit_lock_acquire>
 800b160:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b162:	b11a      	cbz	r2, 800b16c <__sinit+0x14>
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	f7ff bff0 	b.w	800b14c <__sinit_lock_release>
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <__sinit+0x4c>)
 800b16e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b170:	2303      	movs	r3, #3
 800b172:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800b176:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b17a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b17e:	6860      	ldr	r0, [r4, #4]
 800b180:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800b184:	2104      	movs	r1, #4
 800b186:	f7ff ffa1 	bl	800b0cc <std>
 800b18a:	68a0      	ldr	r0, [r4, #8]
 800b18c:	2201      	movs	r2, #1
 800b18e:	2109      	movs	r1, #9
 800b190:	f7ff ff9c 	bl	800b0cc <std>
 800b194:	68e0      	ldr	r0, [r4, #12]
 800b196:	2202      	movs	r2, #2
 800b198:	2112      	movs	r1, #18
 800b19a:	f7ff ff97 	bl	800b0cc <std>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b1a2:	e7df      	b.n	800b164 <__sinit+0xc>
 800b1a4:	0800b11d 	.word	0x0800b11d

0800b1a8 <__fputwc>:
 800b1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	460e      	mov	r6, r1
 800b1b0:	4615      	mov	r5, r2
 800b1b2:	f7fd ff13 	bl	8008fdc <__locale_mb_cur_max>
 800b1b6:	2801      	cmp	r0, #1
 800b1b8:	d11c      	bne.n	800b1f4 <__fputwc+0x4c>
 800b1ba:	1e73      	subs	r3, r6, #1
 800b1bc:	2bfe      	cmp	r3, #254	; 0xfe
 800b1be:	d819      	bhi.n	800b1f4 <__fputwc+0x4c>
 800b1c0:	f88d 6004 	strb.w	r6, [sp, #4]
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	2700      	movs	r7, #0
 800b1c8:	f10d 0904 	add.w	r9, sp, #4
 800b1cc:	42a7      	cmp	r7, r4
 800b1ce:	d020      	beq.n	800b212 <__fputwc+0x6a>
 800b1d0:	68ab      	ldr	r3, [r5, #8]
 800b1d2:	f817 1009 	ldrb.w	r1, [r7, r9]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	60ab      	str	r3, [r5, #8]
 800b1dc:	da04      	bge.n	800b1e8 <__fputwc+0x40>
 800b1de:	69aa      	ldr	r2, [r5, #24]
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	db1a      	blt.n	800b21a <__fputwc+0x72>
 800b1e4:	290a      	cmp	r1, #10
 800b1e6:	d018      	beq.n	800b21a <__fputwc+0x72>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	602a      	str	r2, [r5, #0]
 800b1ee:	7019      	strb	r1, [r3, #0]
 800b1f0:	3701      	adds	r7, #1
 800b1f2:	e7eb      	b.n	800b1cc <__fputwc+0x24>
 800b1f4:	a901      	add	r1, sp, #4
 800b1f6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	f000 fae7 	bl	800b7d0 <_wcrtomb_r>
 800b202:	1c41      	adds	r1, r0, #1
 800b204:	4604      	mov	r4, r0
 800b206:	d1de      	bne.n	800b1c6 <__fputwc+0x1e>
 800b208:	89ab      	ldrh	r3, [r5, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	81ab      	strh	r3, [r5, #12]
 800b210:	4606      	mov	r6, r0
 800b212:	4630      	mov	r0, r6
 800b214:	b003      	add	sp, #12
 800b216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b21a:	462a      	mov	r2, r5
 800b21c:	4640      	mov	r0, r8
 800b21e:	f000 fa8e 	bl	800b73e <__swbuf_r>
 800b222:	1c42      	adds	r2, r0, #1
 800b224:	d1e4      	bne.n	800b1f0 <__fputwc+0x48>
 800b226:	4606      	mov	r6, r0
 800b228:	e7f3      	b.n	800b212 <__fputwc+0x6a>

0800b22a <_fputwc_r>:
 800b22a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b22e:	4614      	mov	r4, r2
 800b230:	07da      	lsls	r2, r3, #31
 800b232:	4605      	mov	r5, r0
 800b234:	d407      	bmi.n	800b246 <_fputwc_r+0x1c>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d404      	bmi.n	800b246 <_fputwc_r+0x1c>
 800b23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b23e:	9101      	str	r1, [sp, #4]
 800b240:	f7fd fed8 	bl	8008ff4 <__retarget_lock_acquire_recursive>
 800b244:	9901      	ldr	r1, [sp, #4]
 800b246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24a:	0498      	lsls	r0, r3, #18
 800b24c:	d406      	bmi.n	800b25c <_fputwc_r+0x32>
 800b24e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b25a:	6663      	str	r3, [r4, #100]	; 0x64
 800b25c:	4622      	mov	r2, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f7ff ffa2 	bl	800b1a8 <__fputwc>
 800b264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b266:	07da      	lsls	r2, r3, #31
 800b268:	4605      	mov	r5, r0
 800b26a:	d405      	bmi.n	800b278 <_fputwc_r+0x4e>
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	059b      	lsls	r3, r3, #22
 800b270:	d402      	bmi.n	800b278 <_fputwc_r+0x4e>
 800b272:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b274:	f7fd febf 	bl	8008ff6 <__retarget_lock_release_recursive>
 800b278:	4628      	mov	r0, r5
 800b27a:	b003      	add	sp, #12
 800b27c:	bd30      	pop	{r4, r5, pc}
	...

0800b280 <__sfvwrite_r>:
 800b280:	6893      	ldr	r3, [r2, #8]
 800b282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b286:	4606      	mov	r6, r0
 800b288:	460c      	mov	r4, r1
 800b28a:	4690      	mov	r8, r2
 800b28c:	b91b      	cbnz	r3, 800b296 <__sfvwrite_r+0x16>
 800b28e:	2000      	movs	r0, #0
 800b290:	b003      	add	sp, #12
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	898b      	ldrh	r3, [r1, #12]
 800b298:	0718      	lsls	r0, r3, #28
 800b29a:	d550      	bpl.n	800b33e <__sfvwrite_r+0xbe>
 800b29c:	690b      	ldr	r3, [r1, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d04d      	beq.n	800b33e <__sfvwrite_r+0xbe>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f8d8 7000 	ldr.w	r7, [r8]
 800b2a8:	f013 0902 	ands.w	r9, r3, #2
 800b2ac:	d16c      	bne.n	800b388 <__sfvwrite_r+0x108>
 800b2ae:	f013 0301 	ands.w	r3, r3, #1
 800b2b2:	f000 809c 	beq.w	800b3ee <__sfvwrite_r+0x16e>
 800b2b6:	4648      	mov	r0, r9
 800b2b8:	46ca      	mov	sl, r9
 800b2ba:	46cb      	mov	fp, r9
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	f000 8103 	beq.w	800b4ca <__sfvwrite_r+0x24a>
 800b2c4:	b950      	cbnz	r0, 800b2dc <__sfvwrite_r+0x5c>
 800b2c6:	465a      	mov	r2, fp
 800b2c8:	210a      	movs	r1, #10
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	f7f4 ff98 	bl	8000200 <memchr>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	f000 80ff 	beq.w	800b4d4 <__sfvwrite_r+0x254>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	eba0 090a 	sub.w	r9, r0, sl
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	6921      	ldr	r1, [r4, #16]
 800b2e0:	6963      	ldr	r3, [r4, #20]
 800b2e2:	45d9      	cmp	r9, fp
 800b2e4:	464a      	mov	r2, r9
 800b2e6:	bf28      	it	cs
 800b2e8:	465a      	movcs	r2, fp
 800b2ea:	4288      	cmp	r0, r1
 800b2ec:	f240 80f5 	bls.w	800b4da <__sfvwrite_r+0x25a>
 800b2f0:	68a5      	ldr	r5, [r4, #8]
 800b2f2:	441d      	add	r5, r3
 800b2f4:	42aa      	cmp	r2, r5
 800b2f6:	f340 80f0 	ble.w	800b4da <__sfvwrite_r+0x25a>
 800b2fa:	4651      	mov	r1, sl
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	f7fe ff0b 	bl	800a118 <memmove>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	442b      	add	r3, r5
 800b306:	6023      	str	r3, [r4, #0]
 800b308:	4621      	mov	r1, r4
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7ff feb8 	bl	800b080 <_fflush_r>
 800b310:	2800      	cmp	r0, #0
 800b312:	d167      	bne.n	800b3e4 <__sfvwrite_r+0x164>
 800b314:	ebb9 0905 	subs.w	r9, r9, r5
 800b318:	f040 80f7 	bne.w	800b50a <__sfvwrite_r+0x28a>
 800b31c:	4621      	mov	r1, r4
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff feae 	bl	800b080 <_fflush_r>
 800b324:	2800      	cmp	r0, #0
 800b326:	d15d      	bne.n	800b3e4 <__sfvwrite_r+0x164>
 800b328:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b32c:	44aa      	add	sl, r5
 800b32e:	ebab 0b05 	sub.w	fp, fp, r5
 800b332:	1b55      	subs	r5, r2, r5
 800b334:	f8c8 5008 	str.w	r5, [r8, #8]
 800b338:	2d00      	cmp	r5, #0
 800b33a:	d1bf      	bne.n	800b2bc <__sfvwrite_r+0x3c>
 800b33c:	e7a7      	b.n	800b28e <__sfvwrite_r+0xe>
 800b33e:	4621      	mov	r1, r4
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fdaf 	bl	800aea4 <__swsetup_r>
 800b346:	2800      	cmp	r0, #0
 800b348:	d0ab      	beq.n	800b2a2 <__sfvwrite_r+0x22>
 800b34a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b34e:	e79f      	b.n	800b290 <__sfvwrite_r+0x10>
 800b350:	e9d7 b900 	ldrd	fp, r9, [r7]
 800b354:	3708      	adds	r7, #8
 800b356:	f1b9 0f00 	cmp.w	r9, #0
 800b35a:	d0f9      	beq.n	800b350 <__sfvwrite_r+0xd0>
 800b35c:	45d1      	cmp	r9, sl
 800b35e:	464b      	mov	r3, r9
 800b360:	69e1      	ldr	r1, [r4, #28]
 800b362:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b364:	bf28      	it	cs
 800b366:	4653      	movcs	r3, sl
 800b368:	465a      	mov	r2, fp
 800b36a:	4630      	mov	r0, r6
 800b36c:	47a8      	blx	r5
 800b36e:	2800      	cmp	r0, #0
 800b370:	dd38      	ble.n	800b3e4 <__sfvwrite_r+0x164>
 800b372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b376:	4483      	add	fp, r0
 800b378:	eba9 0900 	sub.w	r9, r9, r0
 800b37c:	1a18      	subs	r0, r3, r0
 800b37e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b382:	2800      	cmp	r0, #0
 800b384:	d1e7      	bne.n	800b356 <__sfvwrite_r+0xd6>
 800b386:	e782      	b.n	800b28e <__sfvwrite_r+0xe>
 800b388:	f04f 0b00 	mov.w	fp, #0
 800b38c:	f8df a180 	ldr.w	sl, [pc, #384]	; 800b510 <__sfvwrite_r+0x290>
 800b390:	46d9      	mov	r9, fp
 800b392:	e7e0      	b.n	800b356 <__sfvwrite_r+0xd6>
 800b394:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800b398:	3708      	adds	r7, #8
 800b39a:	f1ba 0f00 	cmp.w	sl, #0
 800b39e:	d0f9      	beq.n	800b394 <__sfvwrite_r+0x114>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	68a2      	ldr	r2, [r4, #8]
 800b3a6:	0599      	lsls	r1, r3, #22
 800b3a8:	d563      	bpl.n	800b472 <__sfvwrite_r+0x1f2>
 800b3aa:	4552      	cmp	r2, sl
 800b3ac:	d836      	bhi.n	800b41c <__sfvwrite_r+0x19c>
 800b3ae:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b3b2:	d033      	beq.n	800b41c <__sfvwrite_r+0x19c>
 800b3b4:	6921      	ldr	r1, [r4, #16]
 800b3b6:	6965      	ldr	r5, [r4, #20]
 800b3b8:	eba0 0b01 	sub.w	fp, r0, r1
 800b3bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3c4:	f10b 0201 	add.w	r2, fp, #1
 800b3c8:	106d      	asrs	r5, r5, #1
 800b3ca:	4452      	add	r2, sl
 800b3cc:	4295      	cmp	r5, r2
 800b3ce:	bf38      	it	cc
 800b3d0:	4615      	movcc	r5, r2
 800b3d2:	055b      	lsls	r3, r3, #21
 800b3d4:	d53d      	bpl.n	800b452 <__sfvwrite_r+0x1d2>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7fd fe0d 	bl	8008ff8 <_malloc_r>
 800b3de:	b948      	cbnz	r0, 800b3f4 <__sfvwrite_r+0x174>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	6033      	str	r3, [r6, #0]
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	e7ad      	b.n	800b34a <__sfvwrite_r+0xca>
 800b3ee:	4699      	mov	r9, r3
 800b3f0:	469a      	mov	sl, r3
 800b3f2:	e7d2      	b.n	800b39a <__sfvwrite_r+0x11a>
 800b3f4:	465a      	mov	r2, fp
 800b3f6:	6921      	ldr	r1, [r4, #16]
 800b3f8:	9001      	str	r0, [sp, #4]
 800b3fa:	f7fe f84b 	bl	8009494 <memcpy>
 800b3fe:	89a2      	ldrh	r2, [r4, #12]
 800b400:	9b01      	ldr	r3, [sp, #4]
 800b402:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b40a:	81a2      	strh	r2, [r4, #12]
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	6165      	str	r5, [r4, #20]
 800b410:	445b      	add	r3, fp
 800b412:	eba5 050b 	sub.w	r5, r5, fp
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	4652      	mov	r2, sl
 800b41a:	60a5      	str	r5, [r4, #8]
 800b41c:	4552      	cmp	r2, sl
 800b41e:	bf28      	it	cs
 800b420:	4652      	movcs	r2, sl
 800b422:	6820      	ldr	r0, [r4, #0]
 800b424:	9201      	str	r2, [sp, #4]
 800b426:	4649      	mov	r1, r9
 800b428:	f7fe fe76 	bl	800a118 <memmove>
 800b42c:	68a3      	ldr	r3, [r4, #8]
 800b42e:	9a01      	ldr	r2, [sp, #4]
 800b430:	1a9b      	subs	r3, r3, r2
 800b432:	60a3      	str	r3, [r4, #8]
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	441a      	add	r2, r3
 800b438:	4655      	mov	r5, sl
 800b43a:	6022      	str	r2, [r4, #0]
 800b43c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b440:	44a9      	add	r9, r5
 800b442:	ebaa 0a05 	sub.w	sl, sl, r5
 800b446:	1b45      	subs	r5, r0, r5
 800b448:	f8c8 5008 	str.w	r5, [r8, #8]
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	d1a4      	bne.n	800b39a <__sfvwrite_r+0x11a>
 800b450:	e71d      	b.n	800b28e <__sfvwrite_r+0xe>
 800b452:	462a      	mov	r2, r5
 800b454:	4630      	mov	r0, r6
 800b456:	f7fe fe79 	bl	800a14c <_realloc_r>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d1d5      	bne.n	800b40c <__sfvwrite_r+0x18c>
 800b460:	6921      	ldr	r1, [r4, #16]
 800b462:	4630      	mov	r0, r6
 800b464:	f7fd f98a 	bl	800877c <_free_r>
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b46e:	81a3      	strh	r3, [r4, #12]
 800b470:	e7b6      	b.n	800b3e0 <__sfvwrite_r+0x160>
 800b472:	6923      	ldr	r3, [r4, #16]
 800b474:	4283      	cmp	r3, r0
 800b476:	d302      	bcc.n	800b47e <__sfvwrite_r+0x1fe>
 800b478:	6961      	ldr	r1, [r4, #20]
 800b47a:	4551      	cmp	r1, sl
 800b47c:	d915      	bls.n	800b4aa <__sfvwrite_r+0x22a>
 800b47e:	4552      	cmp	r2, sl
 800b480:	bf28      	it	cs
 800b482:	4652      	movcs	r2, sl
 800b484:	4649      	mov	r1, r9
 800b486:	4615      	mov	r5, r2
 800b488:	f7fe fe46 	bl	800a118 <memmove>
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	6822      	ldr	r2, [r4, #0]
 800b490:	1b5b      	subs	r3, r3, r5
 800b492:	442a      	add	r2, r5
 800b494:	60a3      	str	r3, [r4, #8]
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1cf      	bne.n	800b43c <__sfvwrite_r+0x1bc>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff fdee 	bl	800b080 <_fflush_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0c9      	beq.n	800b43c <__sfvwrite_r+0x1bc>
 800b4a8:	e79c      	b.n	800b3e4 <__sfvwrite_r+0x164>
 800b4aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b4ae:	459a      	cmp	sl, r3
 800b4b0:	bf38      	it	cc
 800b4b2:	4653      	movcc	r3, sl
 800b4b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4b6:	fb93 f3f1 	sdiv	r3, r3, r1
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	434b      	muls	r3, r1
 800b4be:	4630      	mov	r0, r6
 800b4c0:	69e1      	ldr	r1, [r4, #28]
 800b4c2:	47a8      	blx	r5
 800b4c4:	1e05      	subs	r5, r0, #0
 800b4c6:	dcb9      	bgt.n	800b43c <__sfvwrite_r+0x1bc>
 800b4c8:	e78c      	b.n	800b3e4 <__sfvwrite_r+0x164>
 800b4ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	e6f3      	b.n	800b2bc <__sfvwrite_r+0x3c>
 800b4d4:	f10b 0901 	add.w	r9, fp, #1
 800b4d8:	e700      	b.n	800b2dc <__sfvwrite_r+0x5c>
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	dc08      	bgt.n	800b4f0 <__sfvwrite_r+0x270>
 800b4de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4e0:	69e1      	ldr	r1, [r4, #28]
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	47a8      	blx	r5
 800b4e8:	1e05      	subs	r5, r0, #0
 800b4ea:	f73f af13 	bgt.w	800b314 <__sfvwrite_r+0x94>
 800b4ee:	e779      	b.n	800b3e4 <__sfvwrite_r+0x164>
 800b4f0:	4651      	mov	r1, sl
 800b4f2:	9201      	str	r2, [sp, #4]
 800b4f4:	f7fe fe10 	bl	800a118 <memmove>
 800b4f8:	9a01      	ldr	r2, [sp, #4]
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	1a9b      	subs	r3, r3, r2
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	4413      	add	r3, r2
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	4615      	mov	r5, r2
 800b508:	e704      	b.n	800b314 <__sfvwrite_r+0x94>
 800b50a:	2001      	movs	r0, #1
 800b50c:	e70c      	b.n	800b328 <__sfvwrite_r+0xa8>
 800b50e:	bf00      	nop
 800b510:	7ffffc00 	.word	0x7ffffc00

0800b514 <_fwalk_reent>:
 800b514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b518:	4606      	mov	r6, r0
 800b51a:	4688      	mov	r8, r1
 800b51c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800b520:	2700      	movs	r7, #0
 800b522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b526:	f1b9 0901 	subs.w	r9, r9, #1
 800b52a:	d505      	bpl.n	800b538 <_fwalk_reent+0x24>
 800b52c:	6824      	ldr	r4, [r4, #0]
 800b52e:	2c00      	cmp	r4, #0
 800b530:	d1f7      	bne.n	800b522 <_fwalk_reent+0xe>
 800b532:	4638      	mov	r0, r7
 800b534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b538:	89ab      	ldrh	r3, [r5, #12]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d907      	bls.n	800b54e <_fwalk_reent+0x3a>
 800b53e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b542:	3301      	adds	r3, #1
 800b544:	d003      	beq.n	800b54e <_fwalk_reent+0x3a>
 800b546:	4629      	mov	r1, r5
 800b548:	4630      	mov	r0, r6
 800b54a:	47c0      	blx	r8
 800b54c:	4307      	orrs	r7, r0
 800b54e:	3568      	adds	r5, #104	; 0x68
 800b550:	e7e9      	b.n	800b526 <_fwalk_reent+0x12>

0800b552 <__swhatbuf_r>:
 800b552:	b570      	push	{r4, r5, r6, lr}
 800b554:	460e      	mov	r6, r1
 800b556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55a:	2900      	cmp	r1, #0
 800b55c:	b096      	sub	sp, #88	; 0x58
 800b55e:	4614      	mov	r4, r2
 800b560:	461d      	mov	r5, r3
 800b562:	da0a      	bge.n	800b57a <__swhatbuf_r+0x28>
 800b564:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800b568:	2300      	movs	r3, #0
 800b56a:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	d116      	bne.n	800b5a0 <__swhatbuf_r+0x4e>
 800b572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	e015      	b.n	800b5a6 <__swhatbuf_r+0x54>
 800b57a:	466a      	mov	r2, sp
 800b57c:	f000 f9b8 	bl	800b8f0 <_fstat_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	dbef      	blt.n	800b564 <__swhatbuf_r+0x12>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b58a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b58e:	425a      	negs	r2, r3
 800b590:	415a      	adcs	r2, r3
 800b592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	e002      	b.n	800b5a6 <__swhatbuf_r+0x54>
 800b5a0:	2240      	movs	r2, #64	; 0x40
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	b016      	add	sp, #88	; 0x58
 800b5a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5ac <__smakebuf_r>:
 800b5ac:	898b      	ldrh	r3, [r1, #12]
 800b5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5b0:	079d      	lsls	r5, r3, #30
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	d507      	bpl.n	800b5c8 <__smakebuf_r+0x1c>
 800b5b8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	6123      	str	r3, [r4, #16]
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	6163      	str	r3, [r4, #20]
 800b5c4:	b002      	add	sp, #8
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	ab01      	add	r3, sp, #4
 800b5ca:	466a      	mov	r2, sp
 800b5cc:	f7ff ffc1 	bl	800b552 <__swhatbuf_r>
 800b5d0:	9900      	ldr	r1, [sp, #0]
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7fd fd0f 	bl	8008ff8 <_malloc_r>
 800b5da:	b948      	cbnz	r0, 800b5f0 <__smakebuf_r+0x44>
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	059a      	lsls	r2, r3, #22
 800b5e2:	d4ef      	bmi.n	800b5c4 <__smakebuf_r+0x18>
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
 800b5e8:	f043 0302 	orr.w	r3, r3, #2
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	e7e3      	b.n	800b5b8 <__smakebuf_r+0xc>
 800b5f0:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <__smakebuf_r+0x7c>)
 800b5f2:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	6020      	str	r0, [r4, #0]
 800b5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	9b00      	ldr	r3, [sp, #0]
 800b600:	6163      	str	r3, [r4, #20]
 800b602:	9b01      	ldr	r3, [sp, #4]
 800b604:	6120      	str	r0, [r4, #16]
 800b606:	b15b      	cbz	r3, 800b620 <__smakebuf_r+0x74>
 800b608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 f981 	bl	800b914 <_isatty_r>
 800b612:	b128      	cbz	r0, 800b620 <__smakebuf_r+0x74>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	89a0      	ldrh	r0, [r4, #12]
 800b622:	4305      	orrs	r5, r0
 800b624:	81a5      	strh	r5, [r4, #12]
 800b626:	e7cd      	b.n	800b5c4 <__smakebuf_r+0x18>
 800b628:	0800b11d 	.word	0x0800b11d

0800b62c <_raise_r>:
 800b62c:	291f      	cmp	r1, #31
 800b62e:	b538      	push	{r3, r4, r5, lr}
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	d904      	bls.n	800b640 <_raise_r+0x14>
 800b636:	2316      	movs	r3, #22
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800b644:	b112      	cbz	r2, 800b64c <_raise_r+0x20>
 800b646:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b64a:	b94b      	cbnz	r3, 800b660 <_raise_r+0x34>
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 f831 	bl	800b6b4 <_getpid_r>
 800b652:	462a      	mov	r2, r5
 800b654:	4601      	mov	r1, r0
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b65c:	f000 b818 	b.w	800b690 <_kill_r>
 800b660:	2b01      	cmp	r3, #1
 800b662:	d00a      	beq.n	800b67a <_raise_r+0x4e>
 800b664:	1c59      	adds	r1, r3, #1
 800b666:	d103      	bne.n	800b670 <_raise_r+0x44>
 800b668:	2316      	movs	r3, #22
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	2001      	movs	r0, #1
 800b66e:	e7e6      	b.n	800b63e <_raise_r+0x12>
 800b670:	2400      	movs	r4, #0
 800b672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b676:	4628      	mov	r0, r5
 800b678:	4798      	blx	r3
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7df      	b.n	800b63e <_raise_r+0x12>
	...

0800b680 <raise>:
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <raise+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f7ff bfd1 	b.w	800b62c <_raise_r>
 800b68a:	bf00      	nop
 800b68c:	20000014 	.word	0x20000014

0800b690 <_kill_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	; (800b6b0 <_kill_r+0x20>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	4611      	mov	r1, r2
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	f7f6 fa15 	bl	8001acc <_kill>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d102      	bne.n	800b6ac <_kill_r+0x1c>
 800b6a6:	682b      	ldr	r3, [r5, #0]
 800b6a8:	b103      	cbz	r3, 800b6ac <_kill_r+0x1c>
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd38      	pop	{r3, r4, r5, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000be4 	.word	0x20000be4

0800b6b4 <_getpid_r>:
 800b6b4:	f7f6 ba02 	b.w	8001abc <_getpid>

0800b6b8 <__sread>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	f000 f94a 	bl	800b958 <_read_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	bfab      	itete	ge
 800b6c8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b6cc:	181b      	addge	r3, r3, r0
 800b6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6d2:	bfac      	ite	ge
 800b6d4:	6523      	strge	r3, [r4, #80]	; 0x50
 800b6d6:	81a3      	strhlt	r3, [r4, #12]
 800b6d8:	bd10      	pop	{r4, pc}

0800b6da <__swrite>:
 800b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	461f      	mov	r7, r3
 800b6e0:	898b      	ldrh	r3, [r1, #12]
 800b6e2:	05db      	lsls	r3, r3, #23
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	d505      	bpl.n	800b6f8 <__swrite+0x1e>
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f000 f91e 	bl	800b934 <_lseek_r>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	4632      	mov	r2, r6
 800b706:	463b      	mov	r3, r7
 800b708:	4628      	mov	r0, r5
 800b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	f000 b875 	b.w	800b7fc <_write_r>

0800b712 <__sseek>:
 800b712:	b510      	push	{r4, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 f90b 	bl	800b934 <_lseek_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	bf15      	itete	ne
 800b724:	6520      	strne	r0, [r4, #80]	; 0x50
 800b726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b72e:	81a3      	strheq	r3, [r4, #12]
 800b730:	bf18      	it	ne
 800b732:	81a3      	strhne	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__sclose>:
 800b736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73a:	f000 b871 	b.w	800b820 <_close_r>

0800b73e <__swbuf_r>:
 800b73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b740:	460e      	mov	r6, r1
 800b742:	4614      	mov	r4, r2
 800b744:	4605      	mov	r5, r0
 800b746:	b118      	cbz	r0, 800b750 <__swbuf_r+0x12>
 800b748:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b74a:	b90b      	cbnz	r3, 800b750 <__swbuf_r+0x12>
 800b74c:	f7ff fd04 	bl	800b158 <__sinit>
 800b750:	69a3      	ldr	r3, [r4, #24]
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	0719      	lsls	r1, r3, #28
 800b758:	d529      	bpl.n	800b7ae <__swbuf_r+0x70>
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	b33b      	cbz	r3, 800b7ae <__swbuf_r+0x70>
 800b75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b762:	b2f6      	uxtb	r6, r6
 800b764:	049a      	lsls	r2, r3, #18
 800b766:	4637      	mov	r7, r6
 800b768:	d52a      	bpl.n	800b7c0 <__swbuf_r+0x82>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	6920      	ldr	r0, [r4, #16]
 800b76e:	1a18      	subs	r0, r3, r0
 800b770:	6963      	ldr	r3, [r4, #20]
 800b772:	4283      	cmp	r3, r0
 800b774:	dc04      	bgt.n	800b780 <__swbuf_r+0x42>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f7ff fc81 	bl	800b080 <_fflush_r>
 800b77e:	b9e0      	cbnz	r0, 800b7ba <__swbuf_r+0x7c>
 800b780:	68a3      	ldr	r3, [r4, #8]
 800b782:	3b01      	subs	r3, #1
 800b784:	60a3      	str	r3, [r4, #8]
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	701e      	strb	r6, [r3, #0]
 800b78e:	6962      	ldr	r2, [r4, #20]
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	429a      	cmp	r2, r3
 800b794:	d004      	beq.n	800b7a0 <__swbuf_r+0x62>
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	07db      	lsls	r3, r3, #31
 800b79a:	d506      	bpl.n	800b7aa <__swbuf_r+0x6c>
 800b79c:	2e0a      	cmp	r6, #10
 800b79e:	d104      	bne.n	800b7aa <__swbuf_r+0x6c>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f7ff fc6c 	bl	800b080 <_fflush_r>
 800b7a8:	b938      	cbnz	r0, 800b7ba <__swbuf_r+0x7c>
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f7ff fb77 	bl	800aea4 <__swsetup_r>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d0d1      	beq.n	800b75e <__swbuf_r+0x20>
 800b7ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7be:	e7f4      	b.n	800b7aa <__swbuf_r+0x6c>
 800b7c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7cc:	6663      	str	r3, [r4, #100]	; 0x64
 800b7ce:	e7cc      	b.n	800b76a <__swbuf_r+0x2c>

0800b7d0 <_wcrtomb_r>:
 800b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d2:	4c09      	ldr	r4, [pc, #36]	; (800b7f8 <_wcrtomb_r+0x28>)
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800b7da:	4605      	mov	r5, r0
 800b7dc:	461e      	mov	r6, r3
 800b7de:	b909      	cbnz	r1, 800b7e4 <_wcrtomb_r+0x14>
 800b7e0:	460a      	mov	r2, r1
 800b7e2:	a901      	add	r1, sp, #4
 800b7e4:	47b8      	blx	r7
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	bf01      	itttt	eq
 800b7ea:	2300      	moveq	r3, #0
 800b7ec:	6033      	streq	r3, [r6, #0]
 800b7ee:	238a      	moveq	r3, #138	; 0x8a
 800b7f0:	602b      	streq	r3, [r5, #0]
 800b7f2:	b005      	add	sp, #20
 800b7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000448 	.word	0x20000448

0800b7fc <_write_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d07      	ldr	r5, [pc, #28]	; (800b81c <_write_r+0x20>)
 800b800:	4604      	mov	r4, r0
 800b802:	4608      	mov	r0, r1
 800b804:	4611      	mov	r1, r2
 800b806:	2200      	movs	r2, #0
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f7f6 f995 	bl	8001b3a <_write>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_write_r+0x1e>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_write_r+0x1e>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20000be4 	.word	0x20000be4

0800b820 <_close_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	; (800b83c <_close_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f6 f9a1 	bl	8001b72 <_close>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_close_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_close_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20000be4 	.word	0x20000be4

0800b840 <_fclose_r>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	4606      	mov	r6, r0
 800b844:	460c      	mov	r4, r1
 800b846:	b911      	cbnz	r1, 800b84e <_fclose_r+0xe>
 800b848:	2500      	movs	r5, #0
 800b84a:	4628      	mov	r0, r5
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	b118      	cbz	r0, 800b858 <_fclose_r+0x18>
 800b850:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b852:	b90b      	cbnz	r3, 800b858 <_fclose_r+0x18>
 800b854:	f7ff fc80 	bl	800b158 <__sinit>
 800b858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b85a:	07d8      	lsls	r0, r3, #31
 800b85c:	d405      	bmi.n	800b86a <_fclose_r+0x2a>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	0599      	lsls	r1, r3, #22
 800b862:	d402      	bmi.n	800b86a <_fclose_r+0x2a>
 800b864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b866:	f7fd fbc5 	bl	8008ff4 <__retarget_lock_acquire_recursive>
 800b86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b86e:	b93b      	cbnz	r3, 800b880 <_fclose_r+0x40>
 800b870:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b872:	f015 0501 	ands.w	r5, r5, #1
 800b876:	d1e7      	bne.n	800b848 <_fclose_r+0x8>
 800b878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b87a:	f7fd fbbc 	bl	8008ff6 <__retarget_lock_release_recursive>
 800b87e:	e7e4      	b.n	800b84a <_fclose_r+0xa>
 800b880:	4621      	mov	r1, r4
 800b882:	4630      	mov	r0, r6
 800b884:	f7ff fb6e 	bl	800af64 <__sflush_r>
 800b888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b88a:	4605      	mov	r5, r0
 800b88c:	b133      	cbz	r3, 800b89c <_fclose_r+0x5c>
 800b88e:	69e1      	ldr	r1, [r4, #28]
 800b890:	4630      	mov	r0, r6
 800b892:	4798      	blx	r3
 800b894:	2800      	cmp	r0, #0
 800b896:	bfb8      	it	lt
 800b898:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	061a      	lsls	r2, r3, #24
 800b8a0:	d503      	bpl.n	800b8aa <_fclose_r+0x6a>
 800b8a2:	6921      	ldr	r1, [r4, #16]
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7fc ff69 	bl	800877c <_free_r>
 800b8aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b8ac:	b141      	cbz	r1, 800b8c0 <_fclose_r+0x80>
 800b8ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	d002      	beq.n	800b8bc <_fclose_r+0x7c>
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fc ff60 	bl	800877c <_free_r>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	6323      	str	r3, [r4, #48]	; 0x30
 800b8c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b8c2:	b121      	cbz	r1, 800b8ce <_fclose_r+0x8e>
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7fc ff59 	bl	800877c <_free_r>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	6463      	str	r3, [r4, #68]	; 0x44
 800b8ce:	f7ff fc2b 	bl	800b128 <__sfp_lock_acquire>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d8:	07db      	lsls	r3, r3, #31
 800b8da:	d402      	bmi.n	800b8e2 <_fclose_r+0xa2>
 800b8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8de:	f7fd fb8a 	bl	8008ff6 <__retarget_lock_release_recursive>
 800b8e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e4:	f7fd fb85 	bl	8008ff2 <__retarget_lock_close_recursive>
 800b8e8:	f7ff fc24 	bl	800b134 <__sfp_lock_release>
 800b8ec:	e7ad      	b.n	800b84a <_fclose_r+0xa>
	...

0800b8f0 <_fstat_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d07      	ldr	r5, [pc, #28]	; (800b910 <_fstat_r+0x20>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	602b      	str	r3, [r5, #0]
 800b8fe:	f7f6 f944 	bl	8001b8a <_fstat>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d102      	bne.n	800b90c <_fstat_r+0x1c>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	b103      	cbz	r3, 800b90c <_fstat_r+0x1c>
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	bd38      	pop	{r3, r4, r5, pc}
 800b90e:	bf00      	nop
 800b910:	20000be4 	.word	0x20000be4

0800b914 <_isatty_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4d06      	ldr	r5, [pc, #24]	; (800b930 <_isatty_r+0x1c>)
 800b918:	2300      	movs	r3, #0
 800b91a:	4604      	mov	r4, r0
 800b91c:	4608      	mov	r0, r1
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	f7f6 f943 	bl	8001baa <_isatty>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d102      	bne.n	800b92e <_isatty_r+0x1a>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	b103      	cbz	r3, 800b92e <_isatty_r+0x1a>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}
 800b930:	20000be4 	.word	0x20000be4

0800b934 <_lseek_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d07      	ldr	r5, [pc, #28]	; (800b954 <_lseek_r+0x20>)
 800b938:	4604      	mov	r4, r0
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	f7f6 f93c 	bl	8001bc0 <_lseek>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d102      	bne.n	800b952 <_lseek_r+0x1e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	b103      	cbz	r3, 800b952 <_lseek_r+0x1e>
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	bd38      	pop	{r3, r4, r5, pc}
 800b954:	20000be4 	.word	0x20000be4

0800b958 <_read_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_read_r+0x20>)
 800b95c:	4604      	mov	r4, r0
 800b95e:	4608      	mov	r0, r1
 800b960:	4611      	mov	r1, r2
 800b962:	2200      	movs	r2, #0
 800b964:	602a      	str	r2, [r5, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	f7f6 f8ca 	bl	8001b00 <_read>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_read_r+0x1e>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_read_r+0x1e>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	20000be4 	.word	0x20000be4

0800b97c <_init>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr

0800b988 <_fini>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr
