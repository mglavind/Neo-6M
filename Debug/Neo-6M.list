
Neo-6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800b9c8  0800b9c8  0001b9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c098  0800c098  000209c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0a0  0800c0a0  000209c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c0a0  0800c0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c4  20000000  0800c0ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200009c4  0800ca70  000209c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  0800ca70  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e57d  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002279  00000000  00000000  0002ef71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00031ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca79  00000000  00000000  000326e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea1b  00000000  00000000  0004f161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c44  00000000  00000000  0005db7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001017c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043bc  00000000  00000000  00101810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009c4 	.word	0x200009c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9ac 	.word	0x0800b9ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	0800b9ac 	.word	0x0800b9ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b092      	sub	sp, #72	; 0x48
 800101c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	WakeUpCounter = SleepTimeSeconds / WakeupTimebase; 	// Wakeup counter is calculated now
 800101e:	4b9c      	ldr	r3, [pc, #624]	; (8001290 <main+0x278>)
 8001020:	edd3 6a00 	vldr	s13, [r3]
 8001024:	4b9b      	ldr	r3, [pc, #620]	; (8001294 <main+0x27c>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	4b9a      	ldr	r3, [pc, #616]	; (8001298 <main+0x280>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
	WakeUpCounterUint = (uint32_t)WakeUpCounter; // The Wakeup counter is converted to hex
 8001034:	4b98      	ldr	r3, [pc, #608]	; (8001298 <main+0x280>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 2a90 	vmov	r2, s15
 8001042:	4b96      	ldr	r3, [pc, #600]	; (800129c <main+0x284>)
 8001044:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 fe53 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f957 	bl	80012fc <SystemClock_Config>
  void ClearBuffer(void);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fa4b 	bl	80014e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001052:	f000 f9e9 	bl	8001428 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001056:	f000 fa17 	bl	8001488 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800105a:	f000 f9b5 	bl	80013c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  //
  //LoraInit();
  char *str = "test1 \r\n";
 800105e:	4b90      	ldr	r3, [pc, #576]	; (80012a0 <main+0x288>)
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001064:	f7ff f8be 	bl	80001e4 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001072:	488c      	ldr	r0, [pc, #560]	; (80012a4 <main+0x28c>)
 8001074:	f003 f8e0 	bl	8004238 <HAL_UART_Transmit>

  GPSData gpsData; // Laver et instance af vores struct
  gpsData.fix = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c


  str = "test2 \r\n";
 800107c:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <main+0x290>)
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001082:	f7ff f8af 	bl	80001e4 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001090:	4884      	ldr	r0, [pc, #528]	; (80012a4 <main+0x28c>)
 8001092:	f003 f8d1 	bl	8004238 <HAL_UART_Transmit>




// When waking up
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001096:	4b85      	ldr	r3, [pc, #532]	; (80012ac <main+0x294>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d126      	bne.n	80010f0 <main+0xd8>
    {
  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80010a2:	4b82      	ldr	r3, [pc, #520]	; (80012ac <main+0x294>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a81      	ldr	r2, [pc, #516]	; (80012ac <main+0x294>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6013      	str	r3, [r2, #0]

  	  /** display  the string **/
  	  char *str = "Wakeup from the STANDBY MODE\n\n";
 80010ae:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <main+0x298>)
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80010b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010b4:	f7ff f896 	bl	80001e4 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010c2:	4878      	ldr	r0, [pc, #480]	; (80012a4 <main+0x28c>)
 80010c4:	f003 f8b8 	bl	8004238 <HAL_UART_Transmit>

  	  /** Blink the LED **/
  	  for (int i=0; i<20; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010cc:	e00a      	b.n	80010e4 <main+0xcc>
  	  {
  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	4878      	ldr	r0, [pc, #480]	; (80012b4 <main+0x29c>)
 80010d4:	f001 f9a8 	bl	8002428 <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 80010d8:	20c8      	movs	r0, #200	; 0xc8
 80010da:	f000 fe6f 	bl	8001dbc <HAL_Delay>
  	  for (int i=0; i<20; i++)
 80010de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e0:	3301      	adds	r3, #1
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e6:	2b13      	cmp	r3, #19
 80010e8:	ddf1      	ble.n	80010ce <main+0xb6>

  	  /** Disable the WWAKEUP PIN **/
  	  //HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0

  	  /** Deactivate the RTC wakeup  **/
  	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80010ea:	4873      	ldr	r0, [pc, #460]	; (80012b8 <main+0x2a0>)
 80010ec:	f002 ffd0 	bl	8004090 <HAL_RTCEx_DeactivateWakeUpTimer>
    }



  str = "test3 \r\n";
 80010f0:	4b72      	ldr	r3, [pc, #456]	; (80012bc <main+0x2a4>)
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80010f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80010f6:	f7ff f875 	bl	80001e4 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001104:	4867      	ldr	r0, [pc, #412]	; (80012a4 <main+0x28c>)
 8001106:	f003 f897 	bl	8004238 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	486c      	ldr	r0, [pc, #432]	; (80012c0 <main+0x2a8>)
 8001110:	f001 f972 	bl	80023f8 <HAL_GPIO_WritePin>

  HAL_Delay(3000);
 8001114:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001118:	f000 fe50 	bl	8001dbc <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)". ", 2, 10);
 800111c:	230a      	movs	r3, #10
 800111e:	2202      	movs	r2, #2
 8001120:	4968      	ldr	r1, [pc, #416]	; (80012c4 <main+0x2ac>)
 8001122:	4860      	ldr	r0, [pc, #384]	; (80012a4 <main+0x28c>)
 8001124:	f003 f888 	bl	8004238 <HAL_UART_Transmit>

  ClearBuffer();
 8001128:	f000 fb4c 	bl	80017c4 <ClearBuffer>
  HAL_UART_Receive_IT(&huart1, RecievedData, 30);
 800112c:	221e      	movs	r2, #30
 800112e:	4966      	ldr	r1, [pc, #408]	; (80012c8 <main+0x2b0>)
 8001130:	4866      	ldr	r0, [pc, #408]	; (80012cc <main+0x2b4>)
 8001132:	f003 f9d4 	bl	80044de <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (DataReady){
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <main+0x2b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 808b 	beq.w	8001256 <main+0x23e>
			GPSData gpsData; // Laver et instance af vores struct
			parseNMEA(RecievedData, &gpsData);
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4860      	ldr	r0, [pc, #384]	; (80012c8 <main+0x2b0>)
 8001146:	f000 fa7f 	bl	8001648 <parseNMEA>
			// Access the parsed values
			// Altitude
			len = snprintf(buffer, sizeof(buffer), "Altitude: %.2f\r\n", gpsData.altitude);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa0b 	bl	8000568 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	e9cd 2300 	strd	r2, r3, [sp]
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <main+0x2bc>)
 800115c:	2132      	movs	r1, #50	; 0x32
 800115e:	485e      	ldr	r0, [pc, #376]	; (80012d8 <main+0x2c0>)
 8001160:	f004 fb46 	bl	80057f0 <snprintf>
 8001164:	4603      	mov	r3, r0
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <main+0x2c4>)
 8001168:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <main+0x2c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001174:	4958      	ldr	r1, [pc, #352]	; (80012d8 <main+0x2c0>)
 8001176:	484b      	ldr	r0, [pc, #300]	; (80012a4 <main+0x28c>)
 8001178:	f003 f85e 	bl	8004238 <HAL_UART_Transmit>

			// Latitude
			len = snprintf(buffer, sizeof(buffer), "Latitude: %.5f\r\n", gpsData.latitude);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9f2 	bl	8000568 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	e9cd 2300 	strd	r2, r3, [sp]
 800118c:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <main+0x2c8>)
 800118e:	2132      	movs	r1, #50	; 0x32
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <main+0x2c0>)
 8001192:	f004 fb2d 	bl	80057f0 <snprintf>
 8001196:	4603      	mov	r3, r0
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <main+0x2c4>)
 800119a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800119c:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <main+0x2c4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a6:	494c      	ldr	r1, [pc, #304]	; (80012d8 <main+0x2c0>)
 80011a8:	483e      	ldr	r0, [pc, #248]	; (80012a4 <main+0x28c>)
 80011aa:	f003 f845 	bl	8004238 <HAL_UART_Transmit>

			// Latitude Area
			len = snprintf(buffer, sizeof(buffer), "Latitude Area: %c\r\n", gpsData.latitudeArea);
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <main+0x2cc>)
 80011b2:	2132      	movs	r1, #50	; 0x32
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <main+0x2c0>)
 80011b6:	f004 fb1b 	bl	80057f0 <snprintf>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <main+0x2c4>)
 80011be:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <main+0x2c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ca:	4943      	ldr	r1, [pc, #268]	; (80012d8 <main+0x2c0>)
 80011cc:	4835      	ldr	r0, [pc, #212]	; (80012a4 <main+0x28c>)
 80011ce:	f003 f833 	bl	8004238 <HAL_UART_Transmit>

			// Longitude
			len = snprintf(buffer, sizeof(buffer), "Longitude: %.5f\r\n", gpsData.longitude);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9c7 	bl	8000568 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9cd 2300 	strd	r2, r3, [sp]
 80011e2:	4a41      	ldr	r2, [pc, #260]	; (80012e8 <main+0x2d0>)
 80011e4:	2132      	movs	r1, #50	; 0x32
 80011e6:	483c      	ldr	r0, [pc, #240]	; (80012d8 <main+0x2c0>)
 80011e8:	f004 fb02 	bl	80057f0 <snprintf>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a3b      	ldr	r2, [pc, #236]	; (80012dc <main+0x2c4>)
 80011f0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <main+0x2c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fc:	4936      	ldr	r1, [pc, #216]	; (80012d8 <main+0x2c0>)
 80011fe:	4829      	ldr	r0, [pc, #164]	; (80012a4 <main+0x28c>)
 8001200:	f003 f81a 	bl	8004238 <HAL_UART_Transmit>

			// Longitude Area
			len = snprintf(buffer, sizeof(buffer), "Longitude Area: %c\r\n", gpsData.longitudeArea);
 8001204:	7c3b      	ldrb	r3, [r7, #16]
 8001206:	4a39      	ldr	r2, [pc, #228]	; (80012ec <main+0x2d4>)
 8001208:	2132      	movs	r1, #50	; 0x32
 800120a:	4833      	ldr	r0, [pc, #204]	; (80012d8 <main+0x2c0>)
 800120c:	f004 faf0 	bl	80057f0 <snprintf>
 8001210:	4603      	mov	r3, r0
 8001212:	4a32      	ldr	r2, [pc, #200]	; (80012dc <main+0x2c4>)
 8001214:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <main+0x2c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001220:	492d      	ldr	r1, [pc, #180]	; (80012d8 <main+0x2c0>)
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <main+0x28c>)
 8001224:	f003 f808 	bl	8004238 <HAL_UART_Transmit>

			// Fix
			len = snprintf(buffer, sizeof(buffer), "Fix: %d\r\n", gpsData.fix);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <main+0x2d8>)
 800122c:	2132      	movs	r1, #50	; 0x32
 800122e:	482a      	ldr	r0, [pc, #168]	; (80012d8 <main+0x2c0>)
 8001230:	f004 fade 	bl	80057f0 <snprintf>
 8001234:	4603      	mov	r3, r0
 8001236:	4a29      	ldr	r2, [pc, #164]	; (80012dc <main+0x2c4>)
 8001238:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <main+0x2c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29a      	uxth	r2, r3
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001244:	4924      	ldr	r1, [pc, #144]	; (80012d8 <main+0x2c0>)
 8001246:	4817      	ldr	r0, [pc, #92]	; (80012a4 <main+0x28c>)
 8001248:	f002 fff6 	bl	8004238 <HAL_UART_Transmit>

			DataReady = 0;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <main+0x2b8>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
			ActivateInterrupt();
 8001252:	f000 f9cd 	bl	80015f0 <ActivateInterrupt>
	  }
	  if (gpsData.fix){
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	2b00      	cmp	r3, #0
 800125a:	d011      	beq.n	8001280 <main+0x268>
		  // if fix = 1, har vi en position, og vi kan sende vores position
		  // Power down af GPS?
		  char *str = "We got a fix! \r\n";
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <main+0x2dc>)
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
		  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001262:	f7fe ffbf 	bl	80001e4 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <main+0x28c>)
 8001272:	f002 ffe1 	bl	8004238 <HAL_UART_Transmit>
		  // Handle Lora, Sæt GoToSleep til 1, hvis success med Tx.
		  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <main+0x2a8>)
 800127c:	f001 f8bc 	bl	80023f8 <HAL_GPIO_WritePin>
	  }

	  if (GoToSleep) {
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <main+0x2e0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f43f af56 	beq.w	8001136 <main+0x11e>
		  EnterStandbyMode();
 800128a:	f000 fab9 	bl	8001800 <EnterStandbyMode>
	  if (DataReady){
 800128e:	e752      	b.n	8001136 <main+0x11e>
 8001290:	20000004 	.word	0x20000004
 8001294:	20000000 	.word	0x20000000
 8001298:	20000a30 	.word	0x20000a30
 800129c:	20000a34 	.word	0x20000a34
 80012a0:	0800b9c8 	.word	0x0800b9c8
 80012a4:	20000b20 	.word	0x20000b20
 80012a8:	0800b9d4 	.word	0x0800b9d4
 80012ac:	40007000 	.word	0x40007000
 80012b0:	0800b9e0 	.word	0x0800b9e0
 80012b4:	48000400 	.word	0x48000400
 80012b8:	20000a78 	.word	0x20000a78
 80012bc:	0800ba00 	.word	0x0800ba00
 80012c0:	48000800 	.word	0x48000800
 80012c4:	0800ba0c 	.word	0x0800ba0c
 80012c8:	200009e4 	.word	0x200009e4
 80012cc:	20000a98 	.word	0x20000a98
 80012d0:	20000a74 	.word	0x20000a74
 80012d4:	0800ba10 	.word	0x0800ba10
 80012d8:	20000a38 	.word	0x20000a38
 80012dc:	20000a6c 	.word	0x20000a6c
 80012e0:	0800ba24 	.word	0x0800ba24
 80012e4:	0800ba38 	.word	0x0800ba38
 80012e8:	0800ba4c 	.word	0x0800ba4c
 80012ec:	0800ba60 	.word	0x0800ba60
 80012f0:	0800ba78 	.word	0x0800ba78
 80012f4:	0800ba84 	.word	0x0800ba84
 80012f8:	20000a70 	.word	0x20000a70

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09c      	sub	sp, #112	; 0x70
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fa68 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fa5a 	bl	80057e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800132c:	f001 f8ba 	bl	80024a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <SystemClock_Config+0xc8>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <SystemClock_Config+0xc8>)
 8001336:	f023 0318 	bic.w	r3, r3, #24
 800133a:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800133c:	2306      	movs	r3, #6
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001354:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001358:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800135e:	4618      	mov	r0, r3
 8001360:	f001 f8c8 	bl	80024f4 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800136a:	f000 faa7 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f002 f8f0 	bl	8003570 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001396:	f000 fa91 	bl	80018bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800139a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800139e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80013a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fb15 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b8:	f000 fa80 	bl	80018bc <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3770      	adds	r7, #112	; 0x70
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000

080013c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_RTC_Init+0x58>)
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_RTC_Init+0x5c>)
 80013d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_RTC_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_RTC_Init+0x58>)
 80013da:	227f      	movs	r2, #127	; 0x7f
 80013dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_RTC_Init+0x58>)
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_RTC_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_RTC_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_RTC_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <MX_RTC_Init+0x58>)
 80013f8:	f002 fc82 	bl	8003d00 <HAL_RTC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001402:	f000 fa5b 	bl	80018bc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_RTC_Init+0x58>)
 800140c:	f002 fd7e 	bl	8003f0c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001416:	f000 fa51 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000a78 	.word	0x20000a78
 8001424:	40002800 	.word	0x40002800

08001428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_USART1_UART_Init+0x5c>)
 8001430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART1_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART1_UART_Init+0x58>)
 800146c:	f002 fe96 	bl	800419c <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 fa21 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000a98 	.word	0x20000a98
 8001484:	40013800 	.word	0x40013800

08001488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <MX_USART2_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 8001494:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART2_UART_Init+0x58>)
 80014cc:	f002 fe66 	bl	800419c <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 f9f1 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000b20 	.word	0x20000b20
 80014e4:	40004400 	.word	0x40004400

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_GPIO_Init+0xfc>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <MX_GPIO_Init+0xfc>)
 800151c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <MX_GPIO_Init+0xfc>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <MX_GPIO_Init+0xfc>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MX_GPIO_Init+0xfc>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0x100>)
 8001566:	f000 ff47 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_PWR_GPIO_Port, GPS_PWR_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	481f      	ldr	r0, [pc, #124]	; (80015ec <MX_GPIO_Init+0x104>)
 8001570:	f000 ff42 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin_Pin */
  GPIO_InitStruct.Pin = B1_Pin_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_Pin_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_GPIO_Init+0x104>)
 800158c:	f000 fdc2 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <MX_GPIO_Init+0x100>)
 80015aa:	f000 fdb3 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PWR_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_Pin;
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_PWR_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <MX_GPIO_Init+0x104>)
 80015c6:	f000 fda5 	bl	8002114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2028      	movs	r0, #40	; 0x28
 80015d0:	f000 fcf3 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d4:	2028      	movs	r0, #40	; 0x28
 80015d6:	f000 fd0c 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800

080015f0 <ActivateInterrupt>:

/* USER CODE BEGIN 4 */


void ActivateInterrupt() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	memset(RecievedData,0, 30);
 80015f4:	221e      	movs	r2, #30
 80015f6:	2100      	movs	r1, #0
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <ActivateInterrupt+0x40>)
 80015fa:	f004 f8f1 	bl	80057e0 <memset>
	HAL_UART_Receive_IT (&huart1, RecievedData, 30);		//re-starting interrupt
 80015fe:	221e      	movs	r2, #30
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <ActivateInterrupt+0x40>)
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <ActivateInterrupt+0x44>)
 8001604:	f002 ff6b 	bl	80044de <HAL_UART_Receive_IT>
	// Fix
	len = snprintf(buffer, sizeof(buffer), "interrupt activated \r\n");
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <ActivateInterrupt+0x48>)
 800160a:	2132      	movs	r1, #50	; 0x32
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <ActivateInterrupt+0x4c>)
 800160e:	f004 f8ef 	bl	80057f0 <snprintf>
 8001612:	4603      	mov	r3, r0
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <ActivateInterrupt+0x50>)
 8001616:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <ActivateInterrupt+0x50>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001622:	4906      	ldr	r1, [pc, #24]	; (800163c <ActivateInterrupt+0x4c>)
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <ActivateInterrupt+0x54>)
 8001626:	f002 fe07 	bl	8004238 <HAL_UART_Transmit>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200009e4 	.word	0x200009e4
 8001634:	20000a98 	.word	0x20000a98
 8001638:	0800ba98 	.word	0x0800ba98
 800163c:	20000a38 	.word	0x20000a38
 8001640:	20000a6c 	.word	0x20000a6c
 8001644:	20000b20 	.word	0x20000b20

08001648 <parseNMEA>:





void parseNMEA(char* msg, GPSData* data) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    char* token;
    token = strtok(msg, ",");
 8001652:	493d      	ldr	r1, [pc, #244]	; (8001748 <parseNMEA+0x100>)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f004 ff2d 	bl	80064b4 <strtok>
 800165a:	60f8      	str	r0, [r7, #12]
    int count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]

    if (strcmp(token, "$GPGGA")) {
 8001660:	493a      	ldr	r1, [pc, #232]	; (800174c <parseNMEA+0x104>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe fdb4 	bl	80001d0 <strcmp>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d057      	beq.n	800171e <parseNMEA+0xd6>
		while (token != NULL) {
 800166e:	e052      	b.n	8001716 <parseNMEA+0xce>
			count++;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
			switch (count) {
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b02      	subs	r3, #2
 800167a:	2b05      	cmp	r3, #5
 800167c:	d846      	bhi.n	800170c <parseNMEA+0xc4>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <parseNMEA+0x3c>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016b7 	.word	0x080016b7
 800168c:	080016d1 	.word	0x080016d1
 8001690:	080016db 	.word	0x080016db
 8001694:	080016f5 	.word	0x080016f5
 8001698:	080016ff 	.word	0x080016ff
				case 2:
					// Process altitude value
					data->altitude = atof(token);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f004 f86d 	bl	800577c <atof>
 80016a2:	ec53 2b10 	vmov	r2, r3, d0
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff faad 	bl	8000c08 <__aeabi_d2f>
 80016ae:	4602      	mov	r2, r0
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	601a      	str	r2, [r3, #0]
					break;
 80016b4:	e02a      	b.n	800170c <parseNMEA+0xc4>
				case 3:
					// Process latitude value
					data->latitude = atof(token);
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f004 f860 	bl	800577c <atof>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff faa0 	bl	8000c08 <__aeabi_d2f>
 80016c8:	4602      	mov	r2, r0
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]
					break;
 80016ce:	e01d      	b.n	800170c <parseNMEA+0xc4>
				case 4:
					// Process latitude area value
					data->latitudeArea = token[0];
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	721a      	strb	r2, [r3, #8]
					break;
 80016d8:	e018      	b.n	800170c <parseNMEA+0xc4>
				case 5:
					// Process longitude value
					data->longitude = atof(token);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f004 f84e 	bl	800577c <atof>
 80016e0:	ec53 2b10 	vmov	r2, r3, d0
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa8e 	bl	8000c08 <__aeabi_d2f>
 80016ec:	4602      	mov	r2, r0
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	60da      	str	r2, [r3, #12]
					break;
 80016f2:	e00b      	b.n	800170c <parseNMEA+0xc4>
				case 6:
					// Process longitude area value
					data->longitudeArea = token[0];
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	741a      	strb	r2, [r3, #16]
					break;
 80016fc:	e006      	b.n	800170c <parseNMEA+0xc4>
				case 7:
					// Process fix value
					data->fix = atoi(token);
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f004 f83f 	bl	8005782 <atoi>
 8001704:	4602      	mov	r2, r0
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	615a      	str	r2, [r3, #20]
					break;
 800170a:	bf00      	nop
				}
			token = strtok(NULL, ",");
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <parseNMEA+0x100>)
 800170e:	2000      	movs	r0, #0
 8001710:	f004 fed0 	bl	80064b4 <strtok>
 8001714:	60f8      	str	r0, [r7, #12]
		while (token != NULL) {
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1a9      	bne.n	8001670 <parseNMEA+0x28>
    else {
    	len = snprintf(buffer, sizeof(buffer), "unknown NMEA message \n");
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
    }

}
 800171c:	e010      	b.n	8001740 <parseNMEA+0xf8>
    	len = snprintf(buffer, sizeof(buffer), "unknown NMEA message \n");
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <parseNMEA+0x108>)
 8001720:	2132      	movs	r1, #50	; 0x32
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <parseNMEA+0x10c>)
 8001724:	f004 f864 	bl	80057f0 <snprintf>
 8001728:	4603      	mov	r3, r0
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <parseNMEA+0x110>)
 800172c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <parseNMEA+0x110>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29a      	uxth	r2, r3
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001738:	4906      	ldr	r1, [pc, #24]	; (8001754 <parseNMEA+0x10c>)
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <parseNMEA+0x114>)
 800173c:	f002 fd7c 	bl	8004238 <HAL_UART_Transmit>
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800bab0 	.word	0x0800bab0
 800174c:	0800bab4 	.word	0x0800bab4
 8001750:	0800babc 	.word	0x0800babc
 8001754:	20000a38 	.word	0x20000a38
 8001758:	20000a6c 	.word	0x20000a6c
 800175c:	20000b20 	.word	0x20000b20

08001760 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	// This has been soft defined in HAL, and can be redefined here.
	HAL_UART_Receive_IT(&huart1, RecievedData, 30);
 8001768:	221e      	movs	r2, #30
 800176a:	4910      	ldr	r1, [pc, #64]	; (80017ac <HAL_UART_RxCpltCallback+0x4c>)
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 800176e:	f002 feb6 	bl	80044de <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Interrupt received data: ", 25, 100);
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	2219      	movs	r2, #25
 8001776:	490f      	ldr	r1, [pc, #60]	; (80017b4 <HAL_UART_RxCpltCallback+0x54>)
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 800177a:	f002 fd5d 	bl	8004238 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, RecievedData,  strlen(RecievedData), 100);
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_UART_RxCpltCallback+0x4c>)
 8001780:	f7fe fd30 	bl	80001e4 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <HAL_UART_RxCpltCallback+0x4c>)
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 800178e:	f002 fd53 	bl	8004238 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n\r\n", 2, 100);
 8001792:	2364      	movs	r3, #100	; 0x64
 8001794:	2202      	movs	r2, #2
 8001796:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_UART_RxCpltCallback+0x5c>)
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 800179a:	f002 fd4d 	bl	8004238 <HAL_UART_Transmit>

	DataReady = 1;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
	}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200009e4 	.word	0x200009e4
 80017b0:	20000a98 	.word	0x20000a98
 80017b4:	0800bad4 	.word	0x0800bad4
 80017b8:	20000b20 	.word	0x20000b20
 80017bc:	0800baf0 	.word	0x0800baf0
 80017c0:	20000a74 	.word	0x20000a74

080017c4 <ClearBuffer>:

void ClearBuffer(void){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	// Clear RN2483 UART buffer before main code execution.
	// HAL_TIMEOUT is received when HAL_UART_Receive is  not done receiving.
	// huart->TxXferCount will then contain the value of bytes left to be received.
	// If size of received data is less than 1 byte (= no data), HAL_TIMEOUT will be returned
	ret = HAL_OK;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <ClearBuffer+0x30>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	while (ret != HAL_TIMEOUT) ret = HAL_UART_Receive(&huart1, c, 1, 100);	//RN2483 serial
 80017ce:	e009      	b.n	80017e4 <ClearBuffer+0x20>
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	2201      	movs	r2, #1
 80017d4:	4908      	ldr	r1, [pc, #32]	; (80017f8 <ClearBuffer+0x34>)
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <ClearBuffer+0x38>)
 80017d8:	f002 fdb8 	bl	800434c <HAL_UART_Receive>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <ClearBuffer+0x30>)
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <ClearBuffer+0x30>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d1f1      	bne.n	80017d0 <ClearBuffer+0xc>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200009e0 	.word	0x200009e0
 80017f8:	20000a2c 	.word	0x20000a2c
 80017fc:	20000a98 	.word	0x20000a98

08001800 <EnterStandbyMode>:



void EnterStandbyMode(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

    /** Now enter the standby mode **/
     /* Clear the WU FLAG */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <EnterStandbyMode+0xa0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <EnterStandbyMode+0xa0>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6013      	str	r3, [r2, #0]

     /* clear the RTC Wake UP (WU) flag */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <EnterStandbyMode+0xa4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <EnterStandbyMode+0xa4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001822:	60da      	str	r2, [r3, #12]

     /* Display the string */
    char *str = "About to enter the STANDBY MODE\n\n";
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <EnterStandbyMode+0xa8>)
 8001826:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f7fe fcdb 	bl	80001e4 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <EnterStandbyMode+0xac>)
 800183a:	f002 fcfd 	bl	8004238 <HAL_UART_Transmit>

     /* Blink the LED */
    for (int i=0; i<5; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e00b      	b.n	800185c <EnterStandbyMode+0x5c>
    {
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <EnterStandbyMode+0xb0>)
 800184a:	f000 fded 	bl	8002428 <HAL_GPIO_TogglePin>
  	  HAL_Delay(750);
 800184e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001852:	f000 fab3 	bl	8001dbc <HAL_Delay>
    for (int i=0; i<5; i++)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b04      	cmp	r3, #4
 8001860:	ddf0      	ble.n	8001844 <EnterStandbyMode+0x44>
    }

     /* Enable the WAKEUP PIN */
    //HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);

    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, WakeUpCounterUint, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <EnterStandbyMode+0xb4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <EnterStandbyMode+0xa4>)
 800186c:	f002 fb4e 	bl	8003f0c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <EnterStandbyMode+0x7a>
    {
      Error_Handler();
 8001876:	f000 f821 	bl	80018bc <Error_Handler>
    }

     /* one last string to be sure */
    char *str2 = "STANDBY MODE is ON\n\n";
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <EnterStandbyMode+0xb8>)
 800187c:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe fcb0 	bl	80001e4 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <EnterStandbyMode+0xac>)
 8001890:	f002 fcd2 	bl	8004238 <HAL_UART_Transmit>

     /* Finally enter the standby mode */
    HAL_PWR_EnterSTANDBYMode();
 8001894:	f000 fe16 	bl	80024c4 <HAL_PWR_EnterSTANDBYMode>

}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40007000 	.word	0x40007000
 80018a4:	20000a78 	.word	0x20000a78
 80018a8:	0800baf8 	.word	0x0800baf8
 80018ac:	20000b20 	.word	0x20000b20
 80018b0:	48000400 	.word	0x48000400
 80018b4:	20000a34 	.word	0x20000a34
 80018b8:	0800bb1c 	.word	0x0800bb1c

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x44>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x44>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x44>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fe:	2007      	movs	r0, #7
 8001900:	f000 fb50 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_RTC_MspInit+0x50>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d119      	bne.n	8001956 <HAL_RTC_MspInit+0x46>
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001930:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RTC_MspInit+0x54>)
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	461a      	mov	r2, r3
 8001942:	2301      	movs	r3, #1
 8001944:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2003      	movs	r0, #3
 800194c:	f000 fb35 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 fb4e 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40002800 	.word	0x40002800
 8001964:	10908100 	.word	0x10908100

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <HAL_UART_MspInit+0xec>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d132      	bne.n	80019f0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6193      	str	r3, [r2, #24]
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	6153      	str	r3, [r2, #20]
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019cc:	2307      	movs	r3, #7
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f000 fb9b 	bl	8002114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2025      	movs	r0, #37	; 0x25
 80019e4:	f000 fae9 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019e8:	2025      	movs	r0, #37	; 0x25
 80019ea:	f000 fb02 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ee:	e02d      	b.n	8001a4c <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_UART_MspInit+0xf4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d128      	bne.n	8001a4c <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_UART_MspInit+0xf0>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f000 fb64 	bl	8002114 <HAL_GPIO_Init>
}
 8001a4c:	bf00      	nop
 8001a4e:	3730      	adds	r7, #48	; 0x30
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40004400 	.word	0x40004400

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f966 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <RTC_WKUP_IRQHandler+0x10>)
 8001aba:	f002 fb41 	bl	8004140 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a78 	.word	0x20000a78

08001ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <USART1_IRQHandler+0x10>)
 8001ace:	f002 fd4b 	bl	8004568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000a98 	.word	0x20000a98

08001adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin_Pin);
 8001ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae4:	f000 fcba 	bl	800245c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_kill>:

int _kill(int pid, int sig)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b06:	f003 fe41 	bl	800578c <__errno>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2216      	movs	r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_exit>:

void _exit (int status)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffe7 	bl	8001afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2e:	e7fe      	b.n	8001b2e <_exit+0x12>

08001b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e00a      	b.n	8001b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b42:	f3af 8000 	nop.w
 8001b46:	4601      	mov	r1, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf0      	blt.n	8001b42 <_read+0x12>
  }

  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf1      	blt.n	8001b7c <_write+0x12>
  }
  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f003 fda6 	bl	800578c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20004000 	.word	0x20004000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000ba8 	.word	0x20000ba8
 8001c74:	20000bf0 	.word	0x20000bf0

08001c78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	; (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	; (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f003 fd65 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff f9a3 	bl	8001018 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cd4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	200009c4 	.word	0x200009c4
  ldr r2, =_sidata
 8001ce0:	0800c0ac 	.word	0x0800c0ac
  ldr r2, =_sbss
 8001ce4:	200009c4 	.word	0x200009c4
  ldr r4, =_ebss
 8001ce8:	20000bec 	.word	0x20000bec

08001cec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x28>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_Init+0x28>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f94f 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fddc 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f967 	bl	800200e <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d58:	f000 f92f 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000010 	.word	0x20000010
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	20000bac 	.word	0x20000bac

08001da4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000bac 	.word	0x20000bac

08001dbc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000010 	.word	0x20000010

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2204      	movs	r2, #4
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e020      	b.n	800208c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020e 	bic.w	r2, r2, #14
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2204      	movs	r2, #4
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e027      	b.n	800210a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020e 	bic.w	r2, r2, #14
 80020c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
    } 
  }
  return status;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	e14e      	b.n	80023c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8140 	beq.w	80023bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d005      	beq.n	8002154 <HAL_GPIO_Init+0x40>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d130      	bne.n	80021b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 0201 	and.w	r2, r3, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d017      	beq.n	80021f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d123      	bne.n	8002246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 809a 	beq.w	80023bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_GPIO_Init+0x2cc>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <HAL_GPIO_Init+0x2cc>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b52      	ldr	r3, [pc, #328]	; (80023e0 <HAL_GPIO_Init+0x2cc>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a0:	4a50      	ldr	r2, [pc, #320]	; (80023e4 <HAL_GPIO_Init+0x2d0>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1e0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_GPIO_Init+0x2d4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1dc>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_GPIO_Init+0x2d8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1d8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_GPIO_Init+0x2dc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1d4>
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022e8:	2305      	movs	r3, #5
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1e2>
 80022f4:	2300      	movs	r3, #0
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002306:	4937      	ldr	r1, [pc, #220]	; (80023e4 <HAL_GPIO_Init+0x2d0>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002338:	4a2e      	ldr	r2, [pc, #184]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_GPIO_Init+0x2e0>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f aea9 	bne.w	8002124 <HAL_GPIO_Init+0x10>
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	48000400 	.word	0x48000400
 80023ec:	48000800 	.word	0x48000800
 80023f0:	48000c00 	.word	0x48000c00
 80023f4:	40010400 	.word	0x40010400

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002414:	e002      	b.n	800241c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43d9      	mvns	r1, r3
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	400b      	ands	r3, r1
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f806 	bl	800248c <HAL_GPIO_EXTI_Callback>
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000

080024c4 <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80024ce:	f043 0302 	orr.w	r3, r3, #2
 80024d2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80024e0:	bf30      	wfi
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40007000 	.word	0x40007000
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002504:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f001 b823 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 817d 	beq.w	800282a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002530:	4bbc      	ldr	r3, [pc, #752]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00c      	beq.n	8002556 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800253c:	4bb9      	ldr	r3, [pc, #740]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d15c      	bne.n	8002602 <HAL_RCC_OscConfig+0x10e>
 8002548:	4bb6      	ldr	r3, [pc, #728]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d155      	bne.n	8002602 <HAL_RCC_OscConfig+0x10e>
 8002556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800256a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0x94>
 8002582:	4ba8      	ldr	r3, [pc, #672]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e015      	b.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 8002588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800259c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025b0:	4b9c      	ldr	r3, [pc, #624]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 811f 	beq.w	8002828 <HAL_RCC_OscConfig+0x334>
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8116 	bne.w	8002828 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f000 bfaf 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x12e>
 8002614:	4b83      	ldr	r3, [pc, #524]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a82      	ldr	r2, [pc, #520]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800261a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e036      	b.n	8002690 <HAL_RCC_OscConfig+0x19c>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x158>
 8002632:	4b7c      	ldr	r3, [pc, #496]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a78      	ldr	r2, [pc, #480]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e021      	b.n	8002690 <HAL_RCC_OscConfig+0x19c>
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x184>
 800265e:	4b71      	ldr	r3, [pc, #452]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a70      	ldr	r2, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6d      	ldr	r2, [pc, #436]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0x19c>
 8002678:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a69      	ldr	r2, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002690:	4b64      	ldr	r3, [pc, #400]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f023 020f 	bic.w	r2, r3, #15
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	495f      	ldr	r1, [pc, #380]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d059      	beq.n	800276e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff fb73 	bl	8001da4 <HAL_GetTick>
 80026be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff fb6e 	bl	8001da4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d902      	bls.n	80026da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	f000 bf43 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_OscConfig+0x218>
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e015      	b.n	8002738 <HAL_RCC_OscConfig+0x244>
 800270c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002710:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002724:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002728:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002740:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002744:	fa92 f2a2 	rbit	r2, r2
 8002748:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800274c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ab      	beq.n	80026c4 <HAL_RCC_OscConfig+0x1d0>
 800276c:	e05d      	b.n	800282a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7ff fb19 	bl	8001da4 <HAL_GetTick>
 8002772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fb14 	bl	8001da4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d902      	bls.n	800278e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	f000 bee9 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 800278e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002792:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2cc>
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e015      	b.n	80027ec <HAL_RCC_OscConfig+0x2f8>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_OscConfig+0x330>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027f8:	fa92 f2a2 	rbit	r2, r2
 80027fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002800:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f042 0220 	orr.w	r2, r2, #32
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f002 021f 	and.w	r2, r2, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ab      	bne.n	8002778 <HAL_RCC_OscConfig+0x284>
 8002820:	e003      	b.n	800282a <HAL_RCC_OscConfig+0x336>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 817d 	beq.w	8002b3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002840:	4ba6      	ldr	r3, [pc, #664]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800284c:	4ba3      	ldr	r3, [pc, #652]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d172      	bne.n	800293e <HAL_RCC_OscConfig+0x44a>
 8002858:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d16c      	bne.n	800293e <HAL_RCC_OscConfig+0x44a>
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002876:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0x3a0>
 800288e:	4b93      	ldr	r3, [pc, #588]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x3c8>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028c6:	fa92 f2a2 	rbit	r2, r2
 80028ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f042 0220 	orr.w	r2, r2, #32
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f002 021f 	and.w	r2, r2, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f202 	lsl.w	r2, r1, r2
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCC_OscConfig+0x410>
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f000 be2e 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b75      	ldr	r3, [pc, #468]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	21f8      	movs	r1, #248	; 0xf8
 800291a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002922:	fa91 f1a1 	rbit	r1, r1
 8002926:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800292a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800292e:	fab1 f181 	clz	r1, r1
 8002932:	b2c9      	uxtb	r1, r1
 8002934:	408b      	lsls	r3, r1
 8002936:	4969      	ldr	r1, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293c:	e0fd      	b.n	8002b3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8088 	beq.w	8002a60 <HAL_RCC_OscConfig+0x56c>
 8002950:	2301      	movs	r3, #1
 8002952:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002962:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	461a      	mov	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fa12 	bl	8001da4 <HAL_GetTick>
 8002980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff fa0d 	bl	8001da4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	f000 bde2 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d8>
 80029c6:	4b45      	ldr	r3, [pc, #276]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e013      	b.n	80029f4 <HAL_RCC_OscConfig+0x500>
 80029cc:	2302      	movs	r3, #2
 80029ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2202      	movs	r2, #2
 80029f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0af      	beq.n	8002986 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	21f8      	movs	r1, #248	; 0xf8
 8002a3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a44:	fa91 f1a1 	rbit	r1, r1
 8002a48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a50:	fab1 f181 	clz	r1, r1
 8002a54:	b2c9      	uxtb	r1, r1
 8002a56:	408b      	lsls	r3, r1
 8002a58:	4920      	ldr	r1, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
 8002a5e:	e06c      	b.n	8002b3a <HAL_RCC_OscConfig+0x646>
 8002a60:	2301      	movs	r3, #1
 8002a62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	461a      	mov	r2, r3
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f98a 	bl	8001da4 <HAL_GetTick>
 8002a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a96:	f7ff f985 	bl	8001da4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d902      	bls.n	8002aac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	f000 bd5a 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d104      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5ec>
 8002ad6:	4b01      	ldr	r3, [pc, #4]	; (8002adc <HAL_RCC_OscConfig+0x5e8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e015      	b.n	8002b08 <HAL_RCC_OscConfig+0x614>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002af2:	2302      	movs	r3, #2
 8002af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b04:	4bc8      	ldr	r3, [pc, #800]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b12:	fa92 f2a2 	rbit	r2, r2
 8002b16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ad      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8110 	beq.w	8002d70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d079      	beq.n	8002c54 <HAL_RCC_OscConfig+0x760>
 8002b60:	2301      	movs	r3, #1
 8002b62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4bab      	ldr	r3, [pc, #684]	; (8002e2c <HAL_RCC_OscConfig+0x938>)
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	2301      	movs	r3, #1
 8002b88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7ff f90b 	bl	8001da4 <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7ff f906 	bl	8001da4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 bcdb 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 8002baa:	2302      	movs	r3, #2
 8002bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002be8:	2202      	movs	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f2a3 	rbit	r2, r3
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c04:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c10:	2102      	movs	r1, #2
 8002c12:	6019      	str	r1, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f1a3 	rbit	r1, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c2a:	6019      	str	r1, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0a0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x6a0>
 8002c52:	e08d      	b.n	8002d70 <HAL_RCC_OscConfig+0x87c>
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x938>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	461a      	mov	r2, r3
 8002c92:	2300      	movs	r3, #0
 8002c94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c96:	f7ff f885 	bl	8001da4 <HAL_GetTick>
 8002c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7ff f880 	bl	8001da4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f000 bc55 	b.w	8003560 <HAL_RCC_OscConfig+0x106c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d2e:	2102      	movs	r1, #2
 8002d30:	6019      	str	r1, [r3, #0]
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	fa93 f1a3 	rbit	r1, r3
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d48:	6019      	str	r1, [r3, #0]
  return result;
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d197      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 81a1 	beq.w	80030c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	61d3      	str	r3, [r2, #28]
 8002da4:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002dbe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCC_OscConfig+0x93c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11a      	bne.n	8002e08 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_RCC_OscConfig+0x93c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_RCC_OscConfig+0x93c>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe ffe1 	bl	8001da4 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de8:	f7fe ffdc 	bl	8001da4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e3b1      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_RCC_OscConfig+0x93c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCC_OscConfig+0x940>
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a02      	ldr	r2, [pc, #8]	; (8002e28 <HAL_RCC_OscConfig+0x934>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	e03c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x9ac>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	10908120 	.word	0x10908120
 8002e30:	40007000 	.word	0x40007000
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x96a>
 8002e44:	4bc1      	ldr	r3, [pc, #772]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4ac0      	ldr	r2, [pc, #768]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	4bbe      	ldr	r3, [pc, #760]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4abd      	ldr	r2, [pc, #756]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	e020      	b.n	8002ea0 <HAL_RCC_OscConfig+0x9ac>
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x994>
 8002e6e:	4bb7      	ldr	r3, [pc, #732]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4ab6      	ldr	r2, [pc, #728]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4bb4      	ldr	r3, [pc, #720]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4ab3      	ldr	r2, [pc, #716]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x9ac>
 8002e88:	4bb0      	ldr	r3, [pc, #704]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4aaf      	ldr	r2, [pc, #700]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	4bad      	ldr	r3, [pc, #692]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4aac      	ldr	r2, [pc, #688]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8081 	beq.w	8002fb4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe ff77 	bl	8001da4 <HAL_GetTick>
 8002eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ff72 	bl	8001da4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e345      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002edc:	2202      	movs	r2, #2
 8002ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f1a:	601a      	str	r2, [r3, #0]
  return result;
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0xa4c>
 8002f3a:	4b84      	ldr	r3, [pc, #528]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0xa74>
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f48:	2202      	movs	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	fa93 f2a3 	rbit	r2, r3
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	4b79      	ldr	r3, [pc, #484]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f70:	2102      	movs	r1, #2
 8002f72:	6011      	str	r1, [r2, #0]
 8002f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	fa92 f1a2 	rbit	r1, r2
 8002f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f8a:	6011      	str	r1, [r2, #0]
  return result;
 8002f8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f90:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d084      	beq.n	8002ebc <HAL_RCC_OscConfig+0x9c8>
 8002fb2:	e07f      	b.n	80030b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fef6 	bl	8001da4 <HAL_GetTick>
 8002fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fef1 	bl	8001da4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e2c4      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003002:	2202      	movs	r2, #2
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800301c:	601a      	str	r2, [r3, #0]
  return result;
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003026:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d102      	bne.n	8003042 <HAL_RCC_OscConfig+0xb4e>
 800303c:	4b43      	ldr	r3, [pc, #268]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	e013      	b.n	800306a <HAL_RCC_OscConfig+0xb76>
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003072:	2102      	movs	r1, #2
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	fa92 f1a2 	rbit	r1, r2
 8003084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003088:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800308c:	6011      	str	r1, [r2, #0]
  return result;
 800308e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003092:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	fab2 f282 	clz	r2, r2
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f002 021f 	and.w	r2, r2, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f202 	lsl.w	r2, r1, r2
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d184      	bne.n	8002fbe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8242 	beq.w	800355e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0xc58>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	f000 8213 	beq.w	800350e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f040 8162 	bne.w	80033be <HAL_RCC_OscConfig+0xeca>
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800311e:	601a      	str	r2, [r3, #0]
  return result;
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003128:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fe30 	bl	8001da4 <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003148:	e00c      	b.n	8003164 <HAL_RCC_OscConfig+0xc70>
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe fe28 	bl	8001da4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1fd      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800316c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003188:	601a      	str	r2, [r3, #0]
  return result;
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003192:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0xcba>
 80031a8:	4bb0      	ldr	r3, [pc, #704]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e027      	b.n	80031fe <HAL_RCC_OscConfig+0xd0a>
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	fa93 f2a3 	rbit	r2, r3
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4b9c      	ldr	r3, [pc, #624]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003202:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003206:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003210:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fa92 f1a2 	rbit	r1, r2
 800321a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003222:	6011      	str	r1, [r2, #0]
  return result;
 8003224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003228:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d182      	bne.n	8003150 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324a:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	430b      	orrs	r3, r1
 800326c:	497f      	ldr	r1, [pc, #508]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800327a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003296:	601a      	str	r2, [r3, #0]
  return result;
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	2301      	movs	r3, #1
 80032b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fd74 	bl	8001da4 <HAL_GetTick>
 80032bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe fd6f 	bl	8001da4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e144      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80032fa:	601a      	str	r2, [r3, #0]
  return result;
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_RCC_OscConfig+0xe2c>
 800331a:	4b54      	ldr	r3, [pc, #336]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e027      	b.n	8003370 <HAL_RCC_OscConfig+0xe7c>
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f2a3 	rbit	r2, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800334e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003358:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003374:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003382:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fa92 f1a2 	rbit	r1, r2
 800338c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003390:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003394:	6011      	str	r1, [r2, #0]
  return result;
 8003396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f002 021f 	and.w	r2, r2, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d082      	beq.n	80032c2 <HAL_RCC_OscConfig+0xdce>
 80033bc:	e0cf      	b.n	800355e <HAL_RCC_OscConfig+0x106a>
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033e2:	601a      	str	r2, [r3, #0]
  return result;
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	2300      	movs	r3, #0
 8003402:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fcce 	bl	8001da4 <HAL_GetTick>
 8003408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	e009      	b.n	8003422 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe fcc9 	bl	8001da4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e09e      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800342a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003446:	601a      	str	r2, [r3, #0]
  return result;
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d104      	bne.n	8003470 <HAL_RCC_OscConfig+0xf7c>
 8003466:	4b01      	ldr	r3, [pc, #4]	; (800346c <HAL_RCC_OscConfig+0xf78>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	e029      	b.n	80034c0 <HAL_RCC_OscConfig+0xfcc>
 800346c:	40021000 	.word	0x40021000
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800349e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x1078>)
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034cc:	6011      	str	r1, [r2, #0]
 80034ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	fa92 f1a2 	rbit	r1, r2
 80034dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034e4:	6011      	str	r1, [r2, #0]
  return result;
 80034e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	fab2 f282 	clz	r2, r2
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	f042 0220 	orr.w	r2, r2, #32
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f002 021f 	and.w	r2, r2, #31
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d180      	bne.n	800340e <HAL_RCC_OscConfig+0xf1a>
 800350c:	e027      	b.n	800355e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e01e      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_OscConfig+0x1078>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800352a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800352e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	429a      	cmp	r2, r3
 8003540:	d10b      	bne.n	800355a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003542:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003556:	429a      	cmp	r2, r3
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b09e      	sub	sp, #120	; 0x78
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e162      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b90      	ldr	r3, [pc, #576]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b8d      	ldr	r3, [pc, #564]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	498b      	ldr	r1, [pc, #556]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b89      	ldr	r3, [pc, #548]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e14a      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	497f      	ldr	r1, [pc, #508]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80dc 	beq.w	800379c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d13c      	bne.n	8003666 <HAL_RCC_ClockConfig+0xf6>
 80035ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_RCC_ClockConfig+0xa6>
 8003610:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	e00f      	b.n	8003636 <HAL_RCC_ClockConfig+0xc6>
 8003616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	667b      	str	r3, [r7, #100]	; 0x64
 8003624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003628:	663b      	str	r3, [r7, #96]	; 0x60
 800362a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003632:	4b67      	ldr	r3, [pc, #412]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363a:	65ba      	str	r2, [r7, #88]	; 0x58
 800363c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800363e:	fa92 f2a2 	rbit	r2, r2
 8003642:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d17b      	bne.n	800375a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0f3      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d13c      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x178>
 800366e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_RCC_ClockConfig+0x128>
 8003692:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e00f      	b.n	80036b8 <HAL_RCC_ClockConfig+0x148>
 8003698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80036be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c0:	fa92 f2a2 	rbit	r2, r2
 80036c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d13a      	bne.n	800375a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b2      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
 80036e8:	2302      	movs	r3, #2
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_ClockConfig+0x1a0>
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e00d      	b.n	800372c <HAL_RCC_ClockConfig+0x1bc>
 8003710:	2302      	movs	r3, #2
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2202      	movs	r2, #2
 800372e:	61ba      	str	r2, [r7, #24]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	fa92 f2a2 	rbit	r2, r2
 8003736:	617a      	str	r2, [r7, #20]
  return result;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	fab2 f282 	clz	r2, r2
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f002 021f 	and.w	r2, r2, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e079      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	491a      	ldr	r1, [pc, #104]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fe fb1a 	bl	8001da4 <HAL_GetTick>
 8003770:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fb16 	bl	8001da4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e061      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_ClockConfig+0x260>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d214      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4906      	ldr	r1, [pc, #24]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <HAL_RCC_ClockConfig+0x25c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e040      	b.n	800384e <HAL_RCC_ClockConfig+0x2de>
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCC_ClockConfig+0x2e8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	491a      	ldr	r1, [pc, #104]	; (8003858 <HAL_RCC_ClockConfig+0x2e8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <HAL_RCC_ClockConfig+0x2e8>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4912      	ldr	r1, [pc, #72]	; (8003858 <HAL_RCC_ClockConfig+0x2e8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003812:	f000 f829 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003820:	22f0      	movs	r2, #240	; 0xf0
 8003822:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	fa92 f2a2 	rbit	r2, r2
 800382a:	60fa      	str	r2, [r7, #12]
  return result;
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	fab2 f282 	clz	r2, r2
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	40d3      	lsrs	r3, r2
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x2ec>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	fa21 f303 	lsr.w	r3, r1, r3
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_RCC_ClockConfig+0x2f0>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RCC_ClockConfig+0x2f4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa68 	bl	8001d1c <HAL_InitTick>
  
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3778      	adds	r7, #120	; 0x78
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	0800bc08 	.word	0x0800bc08
 8003860:	20000008 	.word	0x20000008
 8003864:	2000000c 	.word	0x2000000c

08003868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b08b      	sub	sp, #44	; 0x2c
 800386c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x30>
 8003892:	2b08      	cmp	r3, #8
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x36>
 8003896:	e03c      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_GetSysClockFreq+0xc4>)
 800389a:	623b      	str	r3, [r7, #32]
      break;
 800389c:	e03c      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	fa92 f2a2 	rbit	r2, r2
 80038b0:	607a      	str	r2, [r7, #4]
  return result;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	40d3      	lsrs	r3, r2
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038c2:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	220f      	movs	r2, #15
 80038cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	fa92 f2a2 	rbit	r2, r2
 80038d4:	60fa      	str	r2, [r7, #12]
  return result;
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	fab2 f282 	clz	r2, r2
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	40d3      	lsrs	r3, r2
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038f0:	4a0e      	ldr	r2, [pc, #56]	; (800392c <HAL_RCC_GetSysClockFreq+0xc4>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	e004      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	623b      	str	r3, [r7, #32]
      break;
 8003910:	e002      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003914:	623b      	str	r3, [r7, #32]
      break;
 8003916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003918:	6a3b      	ldr	r3, [r7, #32]
}
 800391a:	4618      	mov	r0, r3
 800391c:	372c      	adds	r7, #44	; 0x2c
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	0800bc20 	.word	0x0800bc20
 8003934:	0800bc30 	.word	0x0800bc30
 8003938:	003d0900 	.word	0x003d0900

0800393c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_GetHCLKFreq+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000008 	.word	0x20000008

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800395a:	f7ff ffef 	bl	800393c <HAL_RCC_GetHCLKFreq>
 800395e:	4601      	mov	r1, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003968:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800396c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	fa92 f2a2 	rbit	r2, r2
 8003974:	603a      	str	r2, [r7, #0]
  return result;
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	fab2 f282 	clz	r2, r2
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	40d3      	lsrs	r3, r2
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	0800bc18 	.word	0x0800bc18

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800399e:	f7ff ffcd 	bl	800393c <HAL_RCC_GetHCLKFreq>
 80039a2:	4601      	mov	r1, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	fa92 f2a2 	rbit	r2, r2
 80039b8:	603a      	str	r2, [r7, #0]
  return result;
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	fab2 f282 	clz	r2, r2
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	40d3      	lsrs	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	0800bc18 	.word	0x0800bc18

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b092      	sub	sp, #72	; 0x48
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80d4 	beq.w	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10e      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a41      	ldr	r2, [pc, #260]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe f9af 	bl	8001da4 <HAL_GetTick>
 8003a46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe f9ab 	bl	8001da4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d901      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e14b      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8084 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d07c      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a88:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fe f95b 	bl	8001da4 <HAL_GetTick>
 8003aee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe f957 	bl	8001da4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0f5      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
 8003b14:	2302      	movs	r3, #2
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d108      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b36:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	e00d      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	10908100 	.word	0x10908100
 8003b48:	2302      	movs	r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2202      	movs	r2, #2
 8003b5a:	613a      	str	r2, [r7, #16]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	fa92 f2a2 	rbit	r2, r2
 8003b62:	60fa      	str	r2, [r7, #12]
  return result;
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0b7      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b82:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495b      	ldr	r1, [pc, #364]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4a56      	ldr	r2, [pc, #344]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb4:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f023 0203 	bic.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494e      	ldr	r1, [pc, #312]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f023 0210 	bic.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4947      	ldr	r1, [pc, #284]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bf0:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	493f      	ldr	r1, [pc, #252]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f023 0220 	bic.w	r2, r3, #32
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4938      	ldr	r1, [pc, #224]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c2c:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	4930      	ldr	r1, [pc, #192]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4929      	ldr	r1, [pc, #164]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4921      	ldr	r1, [pc, #132]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	491a      	ldr	r1, [pc, #104]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	4912      	ldr	r1, [pc, #72]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	490b      	ldr	r1, [pc, #44]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3748      	adds	r7, #72	; 0x48
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e073      	b.n	8003dfe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7f5b      	ldrb	r3, [r3, #29]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fdf2 	bl	8001910 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d055      	beq.n	8003dec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ca      	movs	r2, #202	; 0xca
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2253      	movs	r2, #83	; 0x53
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f87f 	bl	8003e54 <RTC_EnterInitMode>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d12c      	bne.n	8003dba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6899      	ldr	r1, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	041a      	lsls	r2, r3, #16
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f886 	bl	8003ec2 <RTC_ExitInitMode>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d110      	bne.n	8003de2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	22ff      	movs	r2, #255	; 0xff
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dea:	e001      	b.n	8003df0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <HAL_RTC_WaitForSynchro+0x48>)
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7fd ffc2 	bl	8001da4 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e22:	e009      	b.n	8003e38 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e24:	f7fd ffbe 	bl	8001da4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e32:	d901      	bls.n	8003e38 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e007      	b.n	8003e48 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ee      	beq.n	8003e24 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	00017f5f 	.word	0x00017f5f

08003e54 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d122      	bne.n	8003eb8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e80:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e82:	f7fd ff8f 	bl	8001da4 <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e88:	e00c      	b.n	8003ea4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e8a:	f7fd ff8b 	bl	8001da4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e98:	d904      	bls.n	8003ea4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <RTC_EnterInitMode+0x64>
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d1e8      	bne.n	8003e8a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003edc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff8b 	bl	8003e08 <HAL_RTC_WaitForSynchro>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2204      	movs	r2, #4
 8003efc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003f18:	4b5a      	ldr	r3, [pc, #360]	; (8004084 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0adb      	lsrs	r3, r3, #11
 8003f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	7f1b      	ldrb	r3, [r3, #28]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e09d      	b.n	8004076 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2202      	movs	r2, #2
 8003f44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ca      	movs	r2, #202	; 0xca
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2253      	movs	r2, #83	; 0x53
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e076      	b.n	8004076 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e6      	bne.n	8003f64 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003fb8:	4b32      	ldr	r3, [pc, #200]	; (8004084 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0adb      	lsrs	r3, r3, #11
 8003fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e041      	b.n	8004076 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0e6      	beq.n	8003fce <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0207 	bic.w	r2, r2, #7
 800400e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004028:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800402e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004032:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800404e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800405e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	22ff      	movs	r2, #255	; 0xff
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000008 	.word	0x20000008
 8004088:	10624dd3 	.word	0x10624dd3
 800408c:	40010400 	.word	0x40010400

08004090 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7f1b      	ldrb	r3, [r3, #28]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e047      	b.n	8004138 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	22ca      	movs	r2, #202	; 0xca
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2253      	movs	r2, #83	; 0x53
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040e2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e4:	f7fd fe5e 	bl	8001da4 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80040ea:	e013      	b.n	8004114 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040ec:	f7fd fe5a 	bl	8001da4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040fa:	d90b      	bls.n	8004114 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2203      	movs	r2, #3
 8004108:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e011      	b.n	8004138 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0e4      	beq.n	80040ec <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	22ff      	movs	r2, #255	; 0xff
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800414a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800414e:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800416e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f809 	bl	8004188 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	775a      	strb	r2, [r3, #29]
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e040      	b.n	8004230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fbd2 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fcca 	bl	8004b74 <UART_SetConfig>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e022      	b.n	8004230 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fdf4 	bl	8004de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fe7b 	bl	8004f24 <UART_CheckIdleState>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	2b20      	cmp	r3, #32
 800424e:	d178      	bne.n	8004342 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_UART_Transmit+0x24>
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e071      	b.n	8004344 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2221      	movs	r2, #33	; 0x21
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800426e:	f7fd fd99 	bl	8001da4 <HAL_GetTick>
 8004272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d108      	bne.n	80042a0 <HAL_UART_Transmit+0x68>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e003      	b.n	80042a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042a8:	e030      	b.n	800430c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fedd 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e03c      	b.n	8004344 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042dc:	b292      	uxth	r2, r2
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	3302      	adds	r3, #2
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e008      	b.n	80042fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	b292      	uxth	r2, r2
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1c8      	bne.n	80042aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fea6 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e005      	b.n	8004344 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	2b20      	cmp	r3, #32
 8004364:	f040 80b6 	bne.w	80044d4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Receive+0x28>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0ae      	b.n	80044d6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2222      	movs	r2, #34	; 0x22
 8004384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438e:	f7fd fd09 	bl	8001da4 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ac:	d10e      	bne.n	80043cc <HAL_UART_Receive+0x80>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_UART_Receive+0x76>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c0:	e02d      	b.n	800441e <HAL_UART_Receive+0xd2>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	22ff      	movs	r2, #255	; 0xff
 80043c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ca:	e028      	b.n	800441e <HAL_UART_Receive+0xd2>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_UART_Receive+0xa4>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_UART_Receive+0x9a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	22ff      	movs	r2, #255	; 0xff
 80043e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e4:	e01b      	b.n	800441e <HAL_UART_Receive+0xd2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	227f      	movs	r2, #127	; 0x7f
 80043ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ee:	e016      	b.n	800441e <HAL_UART_Receive+0xd2>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f8:	d10d      	bne.n	8004416 <HAL_UART_Receive+0xca>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_UART_Receive+0xc0>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	227f      	movs	r2, #127	; 0x7f
 8004406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800440a:	e008      	b.n	800441e <HAL_UART_Receive+0xd2>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	223f      	movs	r2, #63	; 0x3f
 8004410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004414:	e003      	b.n	800441e <HAL_UART_Receive+0xd2>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004424:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d108      	bne.n	8004442 <HAL_UART_Receive+0xf6>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e003      	b.n	800444a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800444a:	e037      	b.n	80044bc <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2200      	movs	r2, #0
 8004454:	2120      	movs	r1, #32
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fe0c 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e033      	b.n	80044d6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10c      	bne.n	800448e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800447a:	b29a      	uxth	r2, r3
 800447c:	8a7b      	ldrh	r3, [r7, #18]
 800447e:	4013      	ands	r3, r2
 8004480:	b29a      	uxth	r2, r3
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3302      	adds	r3, #2
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e00d      	b.n	80044aa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004494:	b29b      	uxth	r3, r3
 8004496:	b2da      	uxtb	r2, r3
 8004498:	8a7b      	ldrh	r3, [r7, #18]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4013      	ands	r3, r2
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1c1      	bne.n	800444c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	; 0x28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d132      	bne.n	800455c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Receive_IT+0x24>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e02b      	b.n	800455e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d018      	beq.n	800454c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	613b      	str	r3, [r7, #16]
   return(result);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69f9      	ldr	r1, [r7, #28]
 800453e:	6a3a      	ldr	r2, [r7, #32]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	61bb      	str	r3, [r7, #24]
   return(result);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	461a      	mov	r2, r3
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fdf6 	bl	8005144 <UART_Start_Receive_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	e000      	b.n	800455e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b0ba      	sub	sp, #232	; 0xe8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800458e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004592:	f640 030f 	movw	r3, #2063	; 0x80f
 8004596:	4013      	ands	r3, r2
 8004598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800459c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d115      	bne.n	80045d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00f      	beq.n	80045d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 82ab 	beq.w	8004b1c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
      }
      return;
 80045ce:	e2a5      	b.n	8004b1c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8117 	beq.w	8004808 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045ea:	4b85      	ldr	r3, [pc, #532]	; (8004800 <HAL_UART_IRQHandler+0x298>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 810a 	beq.w	8004808 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d011      	beq.n	8004624 <HAL_UART_IRQHandler+0xbc>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d011      	beq.n	8004654 <HAL_UART_IRQHandler+0xec>
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2202      	movs	r2, #2
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	f043 0204 	orr.w	r2, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d011      	beq.n	8004684 <HAL_UART_IRQHandler+0x11c>
 8004660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2204      	movs	r2, #4
 8004672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2208      	movs	r2, #8
 80046ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b6:	f043 0208 	orr.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <HAL_UART_IRQHandler+0x18a>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8211 	beq.w	8004b20 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800470a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d005      	beq.n	800474a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800473e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004742:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04f      	beq.n	80047ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fdc0 	bl	80052d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d141      	bne.n	80047e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800478a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800478e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1d9      	bne.n	800475e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <HAL_UART_IRQHandler+0x29c>)
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fc6a 	bl	8002098 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d017      	beq.n	80047fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00f      	b.n	80047fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9b4 	bl	8004b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00b      	b.n	80047fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9b0 	bl	8004b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e007      	b.n	80047fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f9ac 	bl	8004b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047f8:	e192      	b.n	8004b20 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fa:	bf00      	nop
    return;
 80047fc:	e190      	b.n	8004b20 <HAL_UART_IRQHandler+0x5b8>
 80047fe:	bf00      	nop
 8004800:	04000120 	.word	0x04000120
 8004804:	08005399 	.word	0x08005399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 814b 	bne.w	8004aa8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8144 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 813d 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	f040 80b5 	bne.w	80049b0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004852:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8164 	beq.w	8004b24 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004866:	429a      	cmp	r2, r3
 8004868:	f080 815c 	bcs.w	8004b24 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b20      	cmp	r3, #32
 800487e:	f000 8086 	beq.w	800498e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1da      	bne.n	8004882 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e1      	bne.n	80048cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800492c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800492e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004932:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800493a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e3      	bne.n	8004908 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004970:	65bb      	str	r3, [r7, #88]	; 0x58
 8004972:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e4      	bne.n	800494e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fb4c 	bl	8002026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8d7 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ae:	e0b9      	b.n	8004b24 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80ab 	beq.w	8004b28 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80049d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a6 	beq.w	8004b28 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004a00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e4      	bne.n	80049dc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	623b      	str	r3, [r7, #32]
   return(result);
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a36:	633a      	str	r2, [r7, #48]	; 0x30
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e3      	bne.n	8004a12 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f85b 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aa6:	e03f      	b.n	8004b28 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x56a>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fe4c 	bl	8005768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ad0:	e02d      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01c      	beq.n	8004b2c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
    }
    return;
 8004afa:	e017      	b.n	8004b2c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fc55 	bl	80053c4 <UART_EndTransmit_IT>
    return;
 8004b1a:	e008      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b1c:	bf00      	nop
 8004b1e:	e006      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b20:	bf00      	nop
 8004b22:	e004      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b24:	bf00      	nop
 8004b26:	e002      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b2c:	bf00      	nop
  }

}
 8004b2e:	37e8      	adds	r7, #232	; 0xe8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b8a      	ldr	r3, [pc, #552]	; (8004dc8 <UART_SetConfig+0x254>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a78      	ldr	r2, [pc, #480]	; (8004dcc <UART_SetConfig+0x258>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d120      	bne.n	8004c32 <UART_SetConfig+0xbe>
 8004bf0:	4b77      	ldr	r3, [pc, #476]	; (8004dd0 <UART_SetConfig+0x25c>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d817      	bhi.n	8004c2c <UART_SetConfig+0xb8>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x90>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c21 	.word	0x08004c21
 8004c0c:	08004c27 	.word	0x08004c27
 8004c10:	08004c1b 	.word	0x08004c1b
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e01d      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e01a      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c20:	2304      	movs	r3, #4
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e017      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c26:	2308      	movs	r3, #8
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e014      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e011      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a67      	ldr	r2, [pc, #412]	; (8004dd4 <UART_SetConfig+0x260>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d102      	bne.n	8004c42 <UART_SetConfig+0xce>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a64      	ldr	r2, [pc, #400]	; (8004dd8 <UART_SetConfig+0x264>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d102      	bne.n	8004c52 <UART_SetConfig+0xde>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e001      	b.n	8004c56 <UART_SetConfig+0xe2>
 8004c52:	2310      	movs	r3, #16
 8004c54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5e:	d15a      	bne.n	8004d16 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d827      	bhi.n	8004cb6 <UART_SetConfig+0x142>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <UART_SetConfig+0xf8>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004c91 	.word	0x08004c91
 8004c70:	08004c99 	.word	0x08004c99
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	08004cb7 	.word	0x08004cb7
 8004c7c:	08004ca7 	.word	0x08004ca7
 8004c80:	08004cb7 	.word	0x08004cb7
 8004c84:	08004cb7 	.word	0x08004cb7
 8004c88:	08004cb7 	.word	0x08004cb7
 8004c8c:	08004caf 	.word	0x08004caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c90:	f7fe fe60 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8004c94:	61b8      	str	r0, [r7, #24]
        break;
 8004c96:	e013      	b.n	8004cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c98:	f7fe fe7e 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8004c9c:	61b8      	str	r0, [r7, #24]
        break;
 8004c9e:	e00f      	b.n	8004cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca0:	4b4e      	ldr	r3, [pc, #312]	; (8004ddc <UART_SetConfig+0x268>)
 8004ca2:	61bb      	str	r3, [r7, #24]
        break;
 8004ca4:	e00c      	b.n	8004cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca6:	f7fe fddf 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8004caa:	61b8      	str	r0, [r7, #24]
        break;
 8004cac:	e008      	b.n	8004cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e004      	b.n	8004cc0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d074      	beq.n	8004db0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	005a      	lsls	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d916      	bls.n	8004d10 <UART_SetConfig+0x19c>
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d212      	bcs.n	8004d10 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f023 030f 	bic.w	r3, r3, #15
 8004cf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	89fa      	ldrh	r2, [r7, #14]
 8004d0c:	60da      	str	r2, [r3, #12]
 8004d0e:	e04f      	b.n	8004db0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	77bb      	strb	r3, [r7, #30]
 8004d14:	e04c      	b.n	8004db0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d16:	7ffb      	ldrb	r3, [r7, #31]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d828      	bhi.n	8004d6e <UART_SetConfig+0x1fa>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x1b0>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fe fe04 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8004d4c:	61b8      	str	r0, [r7, #24]
        break;
 8004d4e:	e013      	b.n	8004d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe fe22 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <UART_SetConfig+0x268>)
 8004d5a:	61bb      	str	r3, [r7, #24]
        break;
 8004d5c:	e00c      	b.n	8004d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe fd83 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8004d62:	61b8      	str	r0, [r7, #24]
        break;
 8004d64:	e008      	b.n	8004d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	61bb      	str	r3, [r7, #24]
        break;
 8004d6c:	e004      	b.n	8004d78 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77bb      	strb	r3, [r7, #30]
        break;
 8004d76:	bf00      	nop
    }

    if (pclk != 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	085a      	lsrs	r2, r3, #1
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	441a      	add	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d909      	bls.n	8004dac <UART_SetConfig+0x238>
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9e:	d205      	bcs.n	8004dac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e001      	b.n	8004db0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004dbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	efff69f3 	.word	0xefff69f3
 8004dcc:	40013800 	.word	0x40013800
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40004400 	.word	0x40004400
 8004dd8:	40004800 	.word	0x40004800
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ede:	d10a      	bne.n	8004ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b098      	sub	sp, #96	; 0x60
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f34:	f7fc ff36 	bl	8001da4 <HAL_GetTick>
 8004f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d12e      	bne.n	8004fa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	2200      	movs	r2, #0
 8004f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f88c 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d021      	beq.n	8004fa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
 8004f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e6      	bne.n	8004f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e062      	b.n	800506c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d149      	bne.n	8005048 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f856 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03c      	beq.n	8005048 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	623b      	str	r3, [r7, #32]
   return(result);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005020:	61fa      	str	r2, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	617b      	str	r3, [r7, #20]
   return(result);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e011      	b.n	800506c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3758      	adds	r7, #88	; 0x58
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	e049      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508c:	d045      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fc fe89 	bl	8001da4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e048      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d031      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d110      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2208      	movs	r2, #8
 80050ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8ff 	bl	80052d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2208      	movs	r2, #8
 80050d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e029      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d111      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8e5 	bl	80052d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e00f      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0a6      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005144:	b480      	push	{r7}
 8005146:	b097      	sub	sp, #92	; 0x5c
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	d10e      	bne.n	8005196 <UART_Start_Receive_IT+0x52>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <UART_Start_Receive_IT+0x48>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800518a:	e02d      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	; 0xff
 8005190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005194:	e028      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <UART_Start_Receive_IT+0x76>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <UART_Start_Receive_IT+0x6c>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ae:	e01b      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	227f      	movs	r2, #127	; 0x7f
 80051b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051b8:	e016      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c2:	d10d      	bne.n	80051e0 <UART_Start_Receive_IT+0x9c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <UART_Start_Receive_IT+0x92>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	227f      	movs	r2, #127	; 0x7f
 80051d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d4:	e008      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	223f      	movs	r2, #63	; 0x3f
 80051da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051de:	e003      	b.n	80051e8 <UART_Start_Receive_IT+0xa4>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2222      	movs	r2, #34	; 0x22
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3308      	adds	r3, #8
 8005216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005218:	64ba      	str	r2, [r7, #72]	; 0x48
 800521a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800521e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e5      	bne.n	80051f8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d107      	bne.n	8005246 <UART_Start_Receive_IT+0x102>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <UART_Start_Receive_IT+0x184>)
 8005242:	669a      	str	r2, [r3, #104]	; 0x68
 8005244:	e002      	b.n	800524c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4a20      	ldr	r2, [pc, #128]	; (80052cc <UART_Start_Receive_IT+0x188>)
 800524a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
 8005274:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_Start_Receive_IT+0x110>
 8005286:	e018      	b.n	80052ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	613b      	str	r3, [r7, #16]
   return(result);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	375c      	adds	r7, #92	; 0x5c
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	080055c1 	.word	0x080055c1
 80052cc:	08005419 	.word	0x08005419

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	; 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
 80052f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	61fb      	str	r3, [r7, #28]
   return(result);
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	2b01      	cmp	r3, #1
 8005344:	d118      	bne.n	8005378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	60bb      	str	r3, [r7, #8]
   return(result);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	613b      	str	r3, [r7, #16]
   return(result);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800538c:	bf00      	nop
 800538e:	3754      	adds	r7, #84	; 0x54
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fbc6 	bl	8004b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fb92 	bl	8004b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005410:	bf00      	nop
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b09c      	sub	sp, #112	; 0x70
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005426:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	f040 80b9 	bne.w	80055a8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800543c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005440:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005444:	b2d9      	uxtb	r1, r3
 8005446:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800544a:	b2da      	uxtb	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	400a      	ands	r2, r1
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 809c 	bne.w	80055b8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800548e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005494:	66bb      	str	r3, [r7, #104]	; 0x68
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800549e:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e6      	bne.n	8005480 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	667b      	str	r3, [r7, #100]	; 0x64
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054d2:	647a      	str	r2, [r7, #68]	; 0x44
 80054d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e5      	bne.n	80054b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d018      	beq.n	800553a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	623b      	str	r3, [r7, #32]
   return(result);
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800551c:	663b      	str	r3, [r7, #96]	; 0x60
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005526:	633b      	str	r3, [r7, #48]	; 0x30
 8005528:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800552c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e6      	bne.n	8005508 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	2b01      	cmp	r3, #1
 8005540:	d12e      	bne.n	80055a0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	60fb      	str	r3, [r7, #12]
   return(result);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 0310 	bic.w	r3, r3, #16
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	617b      	str	r3, [r7, #20]
   return(result);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b10      	cmp	r3, #16
 8005586:	d103      	bne.n	8005590 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2210      	movs	r2, #16
 800558e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fadf 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800559e:	e00b      	b.n	80055b8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fc f8dd 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 80055a6:	e007      	b.n	80055b8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	619a      	str	r2, [r3, #24]
}
 80055b8:	bf00      	nop
 80055ba:	3770      	adds	r7, #112	; 0x70
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b09c      	sub	sp, #112	; 0x70
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d8:	2b22      	cmp	r3, #34	; 0x22
 80055da:	f040 80b9 	bne.w	8005750 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80055ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80055f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	1c9a      	adds	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809c 	bne.w	8005760 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800564c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800567a:	643a      	str	r2, [r7, #64]	; 0x40
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d018      	beq.n	80056e2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d12e      	bne.n	8005748 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0310 	bic.w	r3, r3, #16
 8005704:	65bb      	str	r3, [r7, #88]	; 0x58
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	613b      	str	r3, [r7, #16]
   return(result);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d103      	bne.n	8005738 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fa0b 	bl	8004b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005746:	e00b      	b.n	8005760 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fc f809 	bl	8001760 <HAL_UART_RxCpltCallback>
}
 800574e:	e007      	b.n	8005760 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	619a      	str	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	3770      	adds	r7, #112	; 0x70
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <atof>:
 800577c:	2100      	movs	r1, #0
 800577e:	f000 be8d 	b.w	800649c <strtod>

08005782 <atoi>:
 8005782:	220a      	movs	r2, #10
 8005784:	2100      	movs	r1, #0
 8005786:	f000 bf47 	b.w	8006618 <strtol>
	...

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000014 	.word	0x20000014

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	; (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	; (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	; (80057dc <__libc_init_array+0x44>)
 80057ac:	f006 f8fe 	bl	800b9ac <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	0800c0a0 	.word	0x0800c0a0
 80057d4:	0800c0a0 	.word	0x0800c0a0
 80057d8:	0800c0a0 	.word	0x0800c0a0
 80057dc:	0800c0a8 	.word	0x0800c0a8

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <snprintf>:
 80057f0:	b40c      	push	{r2, r3}
 80057f2:	b530      	push	{r4, r5, lr}
 80057f4:	4b17      	ldr	r3, [pc, #92]	; (8005854 <snprintf+0x64>)
 80057f6:	1e0c      	subs	r4, r1, #0
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	b09d      	sub	sp, #116	; 0x74
 80057fc:	da08      	bge.n	8005810 <snprintf+0x20>
 80057fe:	238b      	movs	r3, #139	; 0x8b
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005806:	b01d      	add	sp, #116	; 0x74
 8005808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580c:	b002      	add	sp, #8
 800580e:	4770      	bx	lr
 8005810:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005814:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005818:	bf14      	ite	ne
 800581a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800581e:	4623      	moveq	r3, r4
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	9307      	str	r3, [sp, #28]
 8005824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005828:	9002      	str	r0, [sp, #8]
 800582a:	9006      	str	r0, [sp, #24]
 800582c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005832:	ab21      	add	r3, sp, #132	; 0x84
 8005834:	a902      	add	r1, sp, #8
 8005836:	4628      	mov	r0, r5
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f000 fef9 	bl	8006630 <_svfprintf_r>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	bfbc      	itt	lt
 8005842:	238b      	movlt	r3, #139	; 0x8b
 8005844:	602b      	strlt	r3, [r5, #0]
 8005846:	2c00      	cmp	r4, #0
 8005848:	d0dd      	beq.n	8005806 <snprintf+0x16>
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	e7d9      	b.n	8005806 <snprintf+0x16>
 8005852:	bf00      	nop
 8005854:	20000014 	.word	0x20000014

08005858 <sulp>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	460d      	mov	r5, r1
 800585e:	ec45 4b10 	vmov	d0, r4, r5
 8005862:	4616      	mov	r6, r2
 8005864:	f004 f96c 	bl	8009b40 <__ulp>
 8005868:	ec51 0b10 	vmov	r0, r1, d0
 800586c:	b17e      	cbz	r6, 800588e <sulp+0x36>
 800586e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd09      	ble.n	800588e <sulp+0x36>
 800587a:	051b      	lsls	r3, r3, #20
 800587c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005880:	2400      	movs	r4, #0
 8005882:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	f7fa fec5 	bl	8000618 <__aeabi_dmul>
 800588e:	bd70      	pop	{r4, r5, r6, pc}

08005890 <_strtod_l>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	ed2d 8b02 	vpush	{d8}
 8005898:	b09d      	sub	sp, #116	; 0x74
 800589a:	461f      	mov	r7, r3
 800589c:	2300      	movs	r3, #0
 800589e:	9318      	str	r3, [sp, #96]	; 0x60
 80058a0:	4ba2      	ldr	r3, [pc, #648]	; (8005b2c <_strtod_l+0x29c>)
 80058a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	4604      	mov	r4, r0
 80058aa:	4618      	mov	r0, r3
 80058ac:	4688      	mov	r8, r1
 80058ae:	f7fa fc99 	bl	80001e4 <strlen>
 80058b2:	f04f 0a00 	mov.w	sl, #0
 80058b6:	4605      	mov	r5, r0
 80058b8:	f04f 0b00 	mov.w	fp, #0
 80058bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80058c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	2a2b      	cmp	r2, #43	; 0x2b
 80058c6:	d04e      	beq.n	8005966 <_strtod_l+0xd6>
 80058c8:	d83b      	bhi.n	8005942 <_strtod_l+0xb2>
 80058ca:	2a0d      	cmp	r2, #13
 80058cc:	d834      	bhi.n	8005938 <_strtod_l+0xa8>
 80058ce:	2a08      	cmp	r2, #8
 80058d0:	d834      	bhi.n	800593c <_strtod_l+0xac>
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	d03e      	beq.n	8005954 <_strtod_l+0xc4>
 80058d6:	2300      	movs	r3, #0
 80058d8:	930a      	str	r3, [sp, #40]	; 0x28
 80058da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80058dc:	7833      	ldrb	r3, [r6, #0]
 80058de:	2b30      	cmp	r3, #48	; 0x30
 80058e0:	f040 80b0 	bne.w	8005a44 <_strtod_l+0x1b4>
 80058e4:	7873      	ldrb	r3, [r6, #1]
 80058e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80058ea:	2b58      	cmp	r3, #88	; 0x58
 80058ec:	d168      	bne.n	80059c0 <_strtod_l+0x130>
 80058ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	ab18      	add	r3, sp, #96	; 0x60
 80058f4:	9702      	str	r7, [sp, #8]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4a8d      	ldr	r2, [pc, #564]	; (8005b30 <_strtod_l+0x2a0>)
 80058fa:	ab19      	add	r3, sp, #100	; 0x64
 80058fc:	a917      	add	r1, sp, #92	; 0x5c
 80058fe:	4620      	mov	r0, r4
 8005900:	f003 f87c 	bl	80089fc <__gethex>
 8005904:	f010 0707 	ands.w	r7, r0, #7
 8005908:	4605      	mov	r5, r0
 800590a:	d005      	beq.n	8005918 <_strtod_l+0x88>
 800590c:	2f06      	cmp	r7, #6
 800590e:	d12c      	bne.n	800596a <_strtod_l+0xda>
 8005910:	3601      	adds	r6, #1
 8005912:	2300      	movs	r3, #0
 8005914:	9617      	str	r6, [sp, #92]	; 0x5c
 8005916:	930a      	str	r3, [sp, #40]	; 0x28
 8005918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 8590 	bne.w	8006440 <_strtod_l+0xbb0>
 8005920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005922:	b1eb      	cbz	r3, 8005960 <_strtod_l+0xd0>
 8005924:	4652      	mov	r2, sl
 8005926:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800592a:	ec43 2b10 	vmov	d0, r2, r3
 800592e:	b01d      	add	sp, #116	; 0x74
 8005930:	ecbd 8b02 	vpop	{d8}
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	2a20      	cmp	r2, #32
 800593a:	d1cc      	bne.n	80058d6 <_strtod_l+0x46>
 800593c:	3301      	adds	r3, #1
 800593e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005940:	e7be      	b.n	80058c0 <_strtod_l+0x30>
 8005942:	2a2d      	cmp	r2, #45	; 0x2d
 8005944:	d1c7      	bne.n	80058d6 <_strtod_l+0x46>
 8005946:	2201      	movs	r2, #1
 8005948:	920a      	str	r2, [sp, #40]	; 0x28
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	9217      	str	r2, [sp, #92]	; 0x5c
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1c2      	bne.n	80058da <_strtod_l+0x4a>
 8005954:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005956:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 856e 	bne.w	800643c <_strtod_l+0xbac>
 8005960:	4652      	mov	r2, sl
 8005962:	465b      	mov	r3, fp
 8005964:	e7e1      	b.n	800592a <_strtod_l+0x9a>
 8005966:	2200      	movs	r2, #0
 8005968:	e7ee      	b.n	8005948 <_strtod_l+0xb8>
 800596a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800596c:	b13a      	cbz	r2, 800597e <_strtod_l+0xee>
 800596e:	2135      	movs	r1, #53	; 0x35
 8005970:	a81a      	add	r0, sp, #104	; 0x68
 8005972:	f004 f9f0 	bl	8009d56 <__copybits>
 8005976:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005978:	4620      	mov	r0, r4
 800597a:	f003 fde2 	bl	8009542 <_Bfree>
 800597e:	3f01      	subs	r7, #1
 8005980:	2f04      	cmp	r7, #4
 8005982:	d806      	bhi.n	8005992 <_strtod_l+0x102>
 8005984:	e8df f007 	tbb	[pc, r7]
 8005988:	1714030a 	.word	0x1714030a
 800598c:	0a          	.byte	0x0a
 800598d:	00          	.byte	0x00
 800598e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005992:	0728      	lsls	r0, r5, #28
 8005994:	d5c0      	bpl.n	8005918 <_strtod_l+0x88>
 8005996:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800599a:	e7bd      	b.n	8005918 <_strtod_l+0x88>
 800599c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80059a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059ae:	e7f0      	b.n	8005992 <_strtod_l+0x102>
 80059b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b34 <_strtod_l+0x2a4>
 80059b4:	e7ed      	b.n	8005992 <_strtod_l+0x102>
 80059b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80059ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80059be:	e7e8      	b.n	8005992 <_strtod_l+0x102>
 80059c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d0f9      	beq.n	80059c0 <_strtod_l+0x130>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0a3      	beq.n	8005918 <_strtod_l+0x88>
 80059d0:	2301      	movs	r3, #1
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059da:	9308      	str	r3, [sp, #32]
 80059dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80059e0:	464f      	mov	r7, r9
 80059e2:	220a      	movs	r2, #10
 80059e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059e6:	7806      	ldrb	r6, [r0, #0]
 80059e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80059ec:	b2d9      	uxtb	r1, r3
 80059ee:	2909      	cmp	r1, #9
 80059f0:	d92a      	bls.n	8005a48 <_strtod_l+0x1b8>
 80059f2:	9905      	ldr	r1, [sp, #20]
 80059f4:	462a      	mov	r2, r5
 80059f6:	f004 fa43 	bl	8009e80 <strncmp>
 80059fa:	b398      	cbz	r0, 8005a64 <_strtod_l+0x1d4>
 80059fc:	2000      	movs	r0, #0
 80059fe:	4632      	mov	r2, r6
 8005a00:	463d      	mov	r5, r7
 8005a02:	9005      	str	r0, [sp, #20]
 8005a04:	4603      	mov	r3, r0
 8005a06:	2a65      	cmp	r2, #101	; 0x65
 8005a08:	d001      	beq.n	8005a0e <_strtod_l+0x17e>
 8005a0a:	2a45      	cmp	r2, #69	; 0x45
 8005a0c:	d118      	bne.n	8005a40 <_strtod_l+0x1b0>
 8005a0e:	b91d      	cbnz	r5, 8005a18 <_strtod_l+0x188>
 8005a10:	9a04      	ldr	r2, [sp, #16]
 8005a12:	4302      	orrs	r2, r0
 8005a14:	d09e      	beq.n	8005954 <_strtod_l+0xc4>
 8005a16:	2500      	movs	r5, #0
 8005a18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005a1c:	f108 0201 	add.w	r2, r8, #1
 8005a20:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005a26:	2a2b      	cmp	r2, #43	; 0x2b
 8005a28:	d075      	beq.n	8005b16 <_strtod_l+0x286>
 8005a2a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a2c:	d07b      	beq.n	8005b26 <_strtod_l+0x296>
 8005a2e:	f04f 0c00 	mov.w	ip, #0
 8005a32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005a36:	2909      	cmp	r1, #9
 8005a38:	f240 8082 	bls.w	8005b40 <_strtod_l+0x2b0>
 8005a3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a40:	2600      	movs	r6, #0
 8005a42:	e09d      	b.n	8005b80 <_strtod_l+0x2f0>
 8005a44:	2300      	movs	r3, #0
 8005a46:	e7c4      	b.n	80059d2 <_strtod_l+0x142>
 8005a48:	2f08      	cmp	r7, #8
 8005a4a:	bfd8      	it	le
 8005a4c:	9907      	ldrle	r1, [sp, #28]
 8005a4e:	f100 0001 	add.w	r0, r0, #1
 8005a52:	bfda      	itte	le
 8005a54:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a58:	9307      	strle	r3, [sp, #28]
 8005a5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005a5e:	3701      	adds	r7, #1
 8005a60:	9017      	str	r0, [sp, #92]	; 0x5c
 8005a62:	e7bf      	b.n	80059e4 <_strtod_l+0x154>
 8005a64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a66:	195a      	adds	r2, r3, r5
 8005a68:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a6a:	5d5a      	ldrb	r2, [r3, r5]
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	d037      	beq.n	8005ae0 <_strtod_l+0x250>
 8005a70:	9005      	str	r0, [sp, #20]
 8005a72:	463d      	mov	r5, r7
 8005a74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	d912      	bls.n	8005aa2 <_strtod_l+0x212>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e7c2      	b.n	8005a06 <_strtod_l+0x176>
 8005a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a86:	785a      	ldrb	r2, [r3, #1]
 8005a88:	3001      	adds	r0, #1
 8005a8a:	2a30      	cmp	r2, #48	; 0x30
 8005a8c:	d0f8      	beq.n	8005a80 <_strtod_l+0x1f0>
 8005a8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	f200 84d9 	bhi.w	800644a <_strtod_l+0xbba>
 8005a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a9a:	9005      	str	r0, [sp, #20]
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	9308      	str	r3, [sp, #32]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	3a30      	subs	r2, #48	; 0x30
 8005aa4:	f100 0301 	add.w	r3, r0, #1
 8005aa8:	d014      	beq.n	8005ad4 <_strtod_l+0x244>
 8005aaa:	9905      	ldr	r1, [sp, #20]
 8005aac:	4419      	add	r1, r3
 8005aae:	9105      	str	r1, [sp, #20]
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	eb00 0e05 	add.w	lr, r0, r5
 8005ab6:	210a      	movs	r1, #10
 8005ab8:	4573      	cmp	r3, lr
 8005aba:	d113      	bne.n	8005ae4 <_strtod_l+0x254>
 8005abc:	182b      	adds	r3, r5, r0
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	f105 0501 	add.w	r5, r5, #1
 8005ac4:	4405      	add	r5, r0
 8005ac6:	dc1c      	bgt.n	8005b02 <_strtod_l+0x272>
 8005ac8:	9907      	ldr	r1, [sp, #28]
 8005aca:	230a      	movs	r3, #10
 8005acc:	fb03 2301 	mla	r3, r3, r1, r2
 8005ad0:	9307      	str	r3, [sp, #28]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ad6:	1c51      	adds	r1, r2, #1
 8005ad8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ada:	7852      	ldrb	r2, [r2, #1]
 8005adc:	4618      	mov	r0, r3
 8005ade:	e7c9      	b.n	8005a74 <_strtod_l+0x1e4>
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	e7d2      	b.n	8005a8a <_strtod_l+0x1fa>
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	dc04      	bgt.n	8005af2 <_strtod_l+0x262>
 8005ae8:	9e07      	ldr	r6, [sp, #28]
 8005aea:	434e      	muls	r6, r1
 8005aec:	9607      	str	r6, [sp, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	e7e2      	b.n	8005ab8 <_strtod_l+0x228>
 8005af2:	f103 0c01 	add.w	ip, r3, #1
 8005af6:	f1bc 0f10 	cmp.w	ip, #16
 8005afa:	bfd8      	it	le
 8005afc:	fb01 f909 	mulle.w	r9, r1, r9
 8005b00:	e7f5      	b.n	8005aee <_strtod_l+0x25e>
 8005b02:	2d10      	cmp	r5, #16
 8005b04:	bfdc      	itt	le
 8005b06:	230a      	movle	r3, #10
 8005b08:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b0c:	e7e1      	b.n	8005ad2 <_strtod_l+0x242>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	2301      	movs	r3, #1
 8005b14:	e77c      	b.n	8005a10 <_strtod_l+0x180>
 8005b16:	f04f 0c00 	mov.w	ip, #0
 8005b1a:	f108 0202 	add.w	r2, r8, #2
 8005b1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005b24:	e785      	b.n	8005a32 <_strtod_l+0x1a2>
 8005b26:	f04f 0c01 	mov.w	ip, #1
 8005b2a:	e7f6      	b.n	8005b1a <_strtod_l+0x28a>
 8005b2c:	0800becc 	.word	0x0800becc
 8005b30:	0800bc44 	.word	0x0800bc44
 8005b34:	7ff00000 	.word	0x7ff00000
 8005b38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b3a:	1c51      	adds	r1, r2, #1
 8005b3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b3e:	7852      	ldrb	r2, [r2, #1]
 8005b40:	2a30      	cmp	r2, #48	; 0x30
 8005b42:	d0f9      	beq.n	8005b38 <_strtod_l+0x2a8>
 8005b44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005b48:	2908      	cmp	r1, #8
 8005b4a:	f63f af79 	bhi.w	8005a40 <_strtod_l+0x1b0>
 8005b4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b54:	9206      	str	r2, [sp, #24]
 8005b56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b58:	1c51      	adds	r1, r2, #1
 8005b5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b5c:	7852      	ldrb	r2, [r2, #1]
 8005b5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005b62:	2e09      	cmp	r6, #9
 8005b64:	d937      	bls.n	8005bd6 <_strtod_l+0x346>
 8005b66:	9e06      	ldr	r6, [sp, #24]
 8005b68:	1b89      	subs	r1, r1, r6
 8005b6a:	2908      	cmp	r1, #8
 8005b6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005b70:	dc02      	bgt.n	8005b78 <_strtod_l+0x2e8>
 8005b72:	4576      	cmp	r6, lr
 8005b74:	bfa8      	it	ge
 8005b76:	4676      	movge	r6, lr
 8005b78:	f1bc 0f00 	cmp.w	ip, #0
 8005b7c:	d000      	beq.n	8005b80 <_strtod_l+0x2f0>
 8005b7e:	4276      	negs	r6, r6
 8005b80:	2d00      	cmp	r5, #0
 8005b82:	d14d      	bne.n	8005c20 <_strtod_l+0x390>
 8005b84:	9904      	ldr	r1, [sp, #16]
 8005b86:	4301      	orrs	r1, r0
 8005b88:	f47f aec6 	bne.w	8005918 <_strtod_l+0x88>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f47f aee1 	bne.w	8005954 <_strtod_l+0xc4>
 8005b92:	2a69      	cmp	r2, #105	; 0x69
 8005b94:	d027      	beq.n	8005be6 <_strtod_l+0x356>
 8005b96:	dc24      	bgt.n	8005be2 <_strtod_l+0x352>
 8005b98:	2a49      	cmp	r2, #73	; 0x49
 8005b9a:	d024      	beq.n	8005be6 <_strtod_l+0x356>
 8005b9c:	2a4e      	cmp	r2, #78	; 0x4e
 8005b9e:	f47f aed9 	bne.w	8005954 <_strtod_l+0xc4>
 8005ba2:	499f      	ldr	r1, [pc, #636]	; (8005e20 <_strtod_l+0x590>)
 8005ba4:	a817      	add	r0, sp, #92	; 0x5c
 8005ba6:	f003 f981 	bl	8008eac <__match>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	f43f aed2 	beq.w	8005954 <_strtod_l+0xc4>
 8005bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b28      	cmp	r3, #40	; 0x28
 8005bb6:	d12d      	bne.n	8005c14 <_strtod_l+0x384>
 8005bb8:	499a      	ldr	r1, [pc, #616]	; (8005e24 <_strtod_l+0x594>)
 8005bba:	aa1a      	add	r2, sp, #104	; 0x68
 8005bbc:	a817      	add	r0, sp, #92	; 0x5c
 8005bbe:	f003 f989 	bl	8008ed4 <__hexnan>
 8005bc2:	2805      	cmp	r0, #5
 8005bc4:	d126      	bne.n	8005c14 <_strtod_l+0x384>
 8005bc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005bcc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005bd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005bd4:	e6a0      	b.n	8005918 <_strtod_l+0x88>
 8005bd6:	210a      	movs	r1, #10
 8005bd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005bdc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005be0:	e7b9      	b.n	8005b56 <_strtod_l+0x2c6>
 8005be2:	2a6e      	cmp	r2, #110	; 0x6e
 8005be4:	e7db      	b.n	8005b9e <_strtod_l+0x30e>
 8005be6:	4990      	ldr	r1, [pc, #576]	; (8005e28 <_strtod_l+0x598>)
 8005be8:	a817      	add	r0, sp, #92	; 0x5c
 8005bea:	f003 f95f 	bl	8008eac <__match>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f aeb0 	beq.w	8005954 <_strtod_l+0xc4>
 8005bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bf6:	498d      	ldr	r1, [pc, #564]	; (8005e2c <_strtod_l+0x59c>)
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	a817      	add	r0, sp, #92	; 0x5c
 8005bfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bfe:	f003 f955 	bl	8008eac <__match>
 8005c02:	b910      	cbnz	r0, 8005c0a <_strtod_l+0x37a>
 8005c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c06:	3301      	adds	r3, #1
 8005c08:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005e3c <_strtod_l+0x5ac>
 8005c0e:	f04f 0a00 	mov.w	sl, #0
 8005c12:	e681      	b.n	8005918 <_strtod_l+0x88>
 8005c14:	4886      	ldr	r0, [pc, #536]	; (8005e30 <_strtod_l+0x5a0>)
 8005c16:	f004 f91b 	bl	8009e50 <nan>
 8005c1a:	ec5b ab10 	vmov	sl, fp, d0
 8005c1e:	e67b      	b.n	8005918 <_strtod_l+0x88>
 8005c20:	9b05      	ldr	r3, [sp, #20]
 8005c22:	9807      	ldr	r0, [sp, #28]
 8005c24:	1af3      	subs	r3, r6, r3
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	bf08      	it	eq
 8005c2a:	462f      	moveq	r7, r5
 8005c2c:	2d10      	cmp	r5, #16
 8005c2e:	9306      	str	r3, [sp, #24]
 8005c30:	46a8      	mov	r8, r5
 8005c32:	bfa8      	it	ge
 8005c34:	f04f 0810 	movge.w	r8, #16
 8005c38:	f7fa fc74 	bl	8000524 <__aeabi_ui2d>
 8005c3c:	2d09      	cmp	r5, #9
 8005c3e:	4682      	mov	sl, r0
 8005c40:	468b      	mov	fp, r1
 8005c42:	dd13      	ble.n	8005c6c <_strtod_l+0x3dc>
 8005c44:	4b7b      	ldr	r3, [pc, #492]	; (8005e34 <_strtod_l+0x5a4>)
 8005c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c4e:	f7fa fce3 	bl	8000618 <__aeabi_dmul>
 8005c52:	4682      	mov	sl, r0
 8005c54:	4648      	mov	r0, r9
 8005c56:	468b      	mov	fp, r1
 8005c58:	f7fa fc64 	bl	8000524 <__aeabi_ui2d>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	f7fa fb22 	bl	80002ac <__adddf3>
 8005c68:	4682      	mov	sl, r0
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	2d0f      	cmp	r5, #15
 8005c6e:	dc38      	bgt.n	8005ce2 <_strtod_l+0x452>
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f43f ae50 	beq.w	8005918 <_strtod_l+0x88>
 8005c78:	dd24      	ble.n	8005cc4 <_strtod_l+0x434>
 8005c7a:	2b16      	cmp	r3, #22
 8005c7c:	dc0b      	bgt.n	8005c96 <_strtod_l+0x406>
 8005c7e:	496d      	ldr	r1, [pc, #436]	; (8005e34 <_strtod_l+0x5a4>)
 8005c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c88:	4652      	mov	r2, sl
 8005c8a:	465b      	mov	r3, fp
 8005c8c:	f7fa fcc4 	bl	8000618 <__aeabi_dmul>
 8005c90:	4682      	mov	sl, r0
 8005c92:	468b      	mov	fp, r1
 8005c94:	e640      	b.n	8005918 <_strtod_l+0x88>
 8005c96:	9a06      	ldr	r2, [sp, #24]
 8005c98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	db20      	blt.n	8005ce2 <_strtod_l+0x452>
 8005ca0:	4c64      	ldr	r4, [pc, #400]	; (8005e34 <_strtod_l+0x5a4>)
 8005ca2:	f1c5 050f 	rsb	r5, r5, #15
 8005ca6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005caa:	4652      	mov	r2, sl
 8005cac:	465b      	mov	r3, fp
 8005cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cb2:	f7fa fcb1 	bl	8000618 <__aeabi_dmul>
 8005cb6:	9b06      	ldr	r3, [sp, #24]
 8005cb8:	1b5d      	subs	r5, r3, r5
 8005cba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005cc2:	e7e3      	b.n	8005c8c <_strtod_l+0x3fc>
 8005cc4:	9b06      	ldr	r3, [sp, #24]
 8005cc6:	3316      	adds	r3, #22
 8005cc8:	db0b      	blt.n	8005ce2 <_strtod_l+0x452>
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	1b9e      	subs	r6, r3, r6
 8005cce:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <_strtod_l+0x5a4>)
 8005cd0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cd8:	4650      	mov	r0, sl
 8005cda:	4659      	mov	r1, fp
 8005cdc:	f7fa fdc6 	bl	800086c <__aeabi_ddiv>
 8005ce0:	e7d6      	b.n	8005c90 <_strtod_l+0x400>
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	eba5 0808 	sub.w	r8, r5, r8
 8005ce8:	4498      	add	r8, r3
 8005cea:	f1b8 0f00 	cmp.w	r8, #0
 8005cee:	dd74      	ble.n	8005dda <_strtod_l+0x54a>
 8005cf0:	f018 030f 	ands.w	r3, r8, #15
 8005cf4:	d00a      	beq.n	8005d0c <_strtod_l+0x47c>
 8005cf6:	494f      	ldr	r1, [pc, #316]	; (8005e34 <_strtod_l+0x5a4>)
 8005cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	465b      	mov	r3, fp
 8005d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d04:	f7fa fc88 	bl	8000618 <__aeabi_dmul>
 8005d08:	4682      	mov	sl, r0
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	f038 080f 	bics.w	r8, r8, #15
 8005d10:	d04f      	beq.n	8005db2 <_strtod_l+0x522>
 8005d12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d16:	dd22      	ble.n	8005d5e <_strtod_l+0x4ce>
 8005d18:	2500      	movs	r5, #0
 8005d1a:	462e      	mov	r6, r5
 8005d1c:	9507      	str	r5, [sp, #28]
 8005d1e:	9505      	str	r5, [sp, #20]
 8005d20:	2322      	movs	r3, #34	; 0x22
 8005d22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005e3c <_strtod_l+0x5ac>
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	f04f 0a00 	mov.w	sl, #0
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f43f adf2 	beq.w	8005918 <_strtod_l+0x88>
 8005d34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d36:	4620      	mov	r0, r4
 8005d38:	f003 fc03 	bl	8009542 <_Bfree>
 8005d3c:	9905      	ldr	r1, [sp, #20]
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f003 fbff 	bl	8009542 <_Bfree>
 8005d44:	4631      	mov	r1, r6
 8005d46:	4620      	mov	r0, r4
 8005d48:	f003 fbfb 	bl	8009542 <_Bfree>
 8005d4c:	9907      	ldr	r1, [sp, #28]
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f003 fbf7 	bl	8009542 <_Bfree>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4620      	mov	r0, r4
 8005d58:	f003 fbf3 	bl	8009542 <_Bfree>
 8005d5c:	e5dc      	b.n	8005918 <_strtod_l+0x88>
 8005d5e:	4b36      	ldr	r3, [pc, #216]	; (8005e38 <_strtod_l+0x5a8>)
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	2300      	movs	r3, #0
 8005d64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d68:	4650      	mov	r0, sl
 8005d6a:	4659      	mov	r1, fp
 8005d6c:	4699      	mov	r9, r3
 8005d6e:	f1b8 0f01 	cmp.w	r8, #1
 8005d72:	dc21      	bgt.n	8005db8 <_strtod_l+0x528>
 8005d74:	b10b      	cbz	r3, 8005d7a <_strtod_l+0x4ea>
 8005d76:	4682      	mov	sl, r0
 8005d78:	468b      	mov	fp, r1
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <_strtod_l+0x5a8>)
 8005d7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005d84:	4652      	mov	r2, sl
 8005d86:	465b      	mov	r3, fp
 8005d88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005d8c:	f7fa fc44 	bl	8000618 <__aeabi_dmul>
 8005d90:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <_strtod_l+0x5ac>)
 8005d92:	460a      	mov	r2, r1
 8005d94:	400b      	ands	r3, r1
 8005d96:	492a      	ldr	r1, [pc, #168]	; (8005e40 <_strtod_l+0x5b0>)
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	d8bc      	bhi.n	8005d18 <_strtod_l+0x488>
 8005d9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005da2:	428b      	cmp	r3, r1
 8005da4:	bf86      	itte	hi
 8005da6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005e44 <_strtod_l+0x5b4>
 8005daa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005dae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005db2:	2300      	movs	r3, #0
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	e084      	b.n	8005ec2 <_strtod_l+0x632>
 8005db8:	f018 0f01 	tst.w	r8, #1
 8005dbc:	d005      	beq.n	8005dca <_strtod_l+0x53a>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fc28 	bl	8000618 <__aeabi_dmul>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	9a04      	ldr	r2, [sp, #16]
 8005dcc:	3208      	adds	r2, #8
 8005dce:	f109 0901 	add.w	r9, r9, #1
 8005dd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dd6:	9204      	str	r2, [sp, #16]
 8005dd8:	e7c9      	b.n	8005d6e <_strtod_l+0x4de>
 8005dda:	d0ea      	beq.n	8005db2 <_strtod_l+0x522>
 8005ddc:	f1c8 0800 	rsb	r8, r8, #0
 8005de0:	f018 020f 	ands.w	r2, r8, #15
 8005de4:	d00a      	beq.n	8005dfc <_strtod_l+0x56c>
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <_strtod_l+0x5a4>)
 8005de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dec:	4650      	mov	r0, sl
 8005dee:	4659      	mov	r1, fp
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fd3a 	bl	800086c <__aeabi_ddiv>
 8005df8:	4682      	mov	sl, r0
 8005dfa:	468b      	mov	fp, r1
 8005dfc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e00:	d0d7      	beq.n	8005db2 <_strtod_l+0x522>
 8005e02:	f1b8 0f1f 	cmp.w	r8, #31
 8005e06:	dd1f      	ble.n	8005e48 <_strtod_l+0x5b8>
 8005e08:	2500      	movs	r5, #0
 8005e0a:	462e      	mov	r6, r5
 8005e0c:	9507      	str	r5, [sp, #28]
 8005e0e:	9505      	str	r5, [sp, #20]
 8005e10:	2322      	movs	r3, #34	; 0x22
 8005e12:	f04f 0a00 	mov.w	sl, #0
 8005e16:	f04f 0b00 	mov.w	fp, #0
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	e786      	b.n	8005d2c <_strtod_l+0x49c>
 8005e1e:	bf00      	nop
 8005e20:	0800bca5 	.word	0x0800bca5
 8005e24:	0800bc58 	.word	0x0800bc58
 8005e28:	0800bc9d 	.word	0x0800bc9d
 8005e2c:	0800bdf4 	.word	0x0800bdf4
 8005e30:	0800c077 	.word	0x0800c077
 8005e34:	0800bf68 	.word	0x0800bf68
 8005e38:	0800bf40 	.word	0x0800bf40
 8005e3c:	7ff00000 	.word	0x7ff00000
 8005e40:	7ca00000 	.word	0x7ca00000
 8005e44:	7fefffff 	.word	0x7fefffff
 8005e48:	f018 0310 	ands.w	r3, r8, #16
 8005e4c:	bf18      	it	ne
 8005e4e:	236a      	movne	r3, #106	; 0x6a
 8005e50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006200 <_strtod_l+0x970>
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	4650      	mov	r0, sl
 8005e58:	4659      	mov	r1, fp
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f018 0f01 	tst.w	r8, #1
 8005e60:	d004      	beq.n	8005e6c <_strtod_l+0x5dc>
 8005e62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e66:	f7fa fbd7 	bl	8000618 <__aeabi_dmul>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005e70:	f109 0908 	add.w	r9, r9, #8
 8005e74:	d1f2      	bne.n	8005e5c <_strtod_l+0x5cc>
 8005e76:	b10b      	cbz	r3, 8005e7c <_strtod_l+0x5ec>
 8005e78:	4682      	mov	sl, r0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	b1c3      	cbz	r3, 8005eb2 <_strtod_l+0x622>
 8005e80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	dd11      	ble.n	8005eb2 <_strtod_l+0x622>
 8005e8e:	2b1f      	cmp	r3, #31
 8005e90:	f340 8124 	ble.w	80060dc <_strtod_l+0x84c>
 8005e94:	2b34      	cmp	r3, #52	; 0x34
 8005e96:	bfde      	ittt	le
 8005e98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005e9c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005ea0:	fa03 f202 	lslle.w	r2, r3, r2
 8005ea4:	f04f 0a00 	mov.w	sl, #0
 8005ea8:	bfcc      	ite	gt
 8005eaa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005eae:	ea02 0b01 	andle.w	fp, r2, r1
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	4659      	mov	r1, fp
 8005eba:	f7fa fe15 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d1a2      	bne.n	8005e08 <_strtod_l+0x578>
 8005ec2:	9b07      	ldr	r3, [sp, #28]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	9908      	ldr	r1, [sp, #32]
 8005ec8:	462b      	mov	r3, r5
 8005eca:	463a      	mov	r2, r7
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f003 fb87 	bl	80095e0 <__s2b>
 8005ed2:	9007      	str	r0, [sp, #28]
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f43f af1f 	beq.w	8005d18 <_strtod_l+0x488>
 8005eda:	9b05      	ldr	r3, [sp, #20]
 8005edc:	1b9e      	subs	r6, r3, r6
 8005ede:	9b06      	ldr	r3, [sp, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bfb4      	ite	lt
 8005ee4:	4633      	movlt	r3, r6
 8005ee6:	2300      	movge	r3, #0
 8005ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8005eea:	9b06      	ldr	r3, [sp, #24]
 8005eec:	2500      	movs	r5, #0
 8005eee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8005ef4:	462e      	mov	r6, r5
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	4620      	mov	r0, r4
 8005efa:	6859      	ldr	r1, [r3, #4]
 8005efc:	f003 fafc 	bl	80094f8 <_Balloc>
 8005f00:	9005      	str	r0, [sp, #20]
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f43f af0c 	beq.w	8005d20 <_strtod_l+0x490>
 8005f08:	9b07      	ldr	r3, [sp, #28]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	3202      	adds	r2, #2
 8005f0e:	f103 010c 	add.w	r1, r3, #12
 8005f12:	0092      	lsls	r2, r2, #2
 8005f14:	300c      	adds	r0, #12
 8005f16:	f003 fad5 	bl	80094c4 <memcpy>
 8005f1a:	ec4b ab10 	vmov	d0, sl, fp
 8005f1e:	aa1a      	add	r2, sp, #104	; 0x68
 8005f20:	a919      	add	r1, sp, #100	; 0x64
 8005f22:	4620      	mov	r0, r4
 8005f24:	f003 fe88 	bl	8009c38 <__d2b>
 8005f28:	ec4b ab18 	vmov	d8, sl, fp
 8005f2c:	9018      	str	r0, [sp, #96]	; 0x60
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f43f aef6 	beq.w	8005d20 <_strtod_l+0x490>
 8005f34:	2101      	movs	r1, #1
 8005f36:	4620      	mov	r0, r4
 8005f38:	f003 fbec 	bl	8009714 <__i2b>
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f43f aeee 	beq.w	8005d20 <_strtod_l+0x490>
 8005f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f46:	9904      	ldr	r1, [sp, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfab      	itete	ge
 8005f4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005f4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005f50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005f52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005f56:	bfac      	ite	ge
 8005f58:	eb03 0902 	addge.w	r9, r3, r2
 8005f5c:	1ad7      	sublt	r7, r2, r3
 8005f5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f60:	eba3 0801 	sub.w	r8, r3, r1
 8005f64:	4490      	add	r8, r2
 8005f66:	4ba1      	ldr	r3, [pc, #644]	; (80061ec <_strtod_l+0x95c>)
 8005f68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005f6c:	4598      	cmp	r8, r3
 8005f6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f72:	f280 80c7 	bge.w	8006104 <_strtod_l+0x874>
 8005f76:	eba3 0308 	sub.w	r3, r3, r8
 8005f7a:	2b1f      	cmp	r3, #31
 8005f7c:	eba2 0203 	sub.w	r2, r2, r3
 8005f80:	f04f 0101 	mov.w	r1, #1
 8005f84:	f300 80b1 	bgt.w	80060ea <_strtod_l+0x85a>
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9308      	str	r3, [sp, #32]
 8005f92:	eb09 0802 	add.w	r8, r9, r2
 8005f96:	9b04      	ldr	r3, [sp, #16]
 8005f98:	45c1      	cmp	r9, r8
 8005f9a:	4417      	add	r7, r2
 8005f9c:	441f      	add	r7, r3
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	bfa8      	it	ge
 8005fa2:	4643      	movge	r3, r8
 8005fa4:	42bb      	cmp	r3, r7
 8005fa6:	bfa8      	it	ge
 8005fa8:	463b      	movge	r3, r7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfc2      	ittt	gt
 8005fae:	eba8 0803 	subgt.w	r8, r8, r3
 8005fb2:	1aff      	subgt	r7, r7, r3
 8005fb4:	eba9 0903 	subgt.w	r9, r9, r3
 8005fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd17      	ble.n	8005fee <_strtod_l+0x75e>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f003 fc66 	bl	8009894 <__pow5mult>
 8005fc8:	4606      	mov	r6, r0
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f43f aea8 	beq.w	8005d20 <_strtod_l+0x490>
 8005fd0:	4601      	mov	r1, r0
 8005fd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f003 fbb3 	bl	8009740 <__multiply>
 8005fda:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f43f ae9f 	beq.w	8005d20 <_strtod_l+0x490>
 8005fe2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f003 faac 	bl	8009542 <_Bfree>
 8005fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fec:	9318      	str	r3, [sp, #96]	; 0x60
 8005fee:	f1b8 0f00 	cmp.w	r8, #0
 8005ff2:	f300 808c 	bgt.w	800610e <_strtod_l+0x87e>
 8005ff6:	9b06      	ldr	r3, [sp, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dd08      	ble.n	800600e <_strtod_l+0x77e>
 8005ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ffe:	9905      	ldr	r1, [sp, #20]
 8006000:	4620      	mov	r0, r4
 8006002:	f003 fc47 	bl	8009894 <__pow5mult>
 8006006:	9005      	str	r0, [sp, #20]
 8006008:	2800      	cmp	r0, #0
 800600a:	f43f ae89 	beq.w	8005d20 <_strtod_l+0x490>
 800600e:	2f00      	cmp	r7, #0
 8006010:	dd08      	ble.n	8006024 <_strtod_l+0x794>
 8006012:	9905      	ldr	r1, [sp, #20]
 8006014:	463a      	mov	r2, r7
 8006016:	4620      	mov	r0, r4
 8006018:	f003 fc7c 	bl	8009914 <__lshift>
 800601c:	9005      	str	r0, [sp, #20]
 800601e:	2800      	cmp	r0, #0
 8006020:	f43f ae7e 	beq.w	8005d20 <_strtod_l+0x490>
 8006024:	f1b9 0f00 	cmp.w	r9, #0
 8006028:	dd08      	ble.n	800603c <_strtod_l+0x7ac>
 800602a:	4631      	mov	r1, r6
 800602c:	464a      	mov	r2, r9
 800602e:	4620      	mov	r0, r4
 8006030:	f003 fc70 	bl	8009914 <__lshift>
 8006034:	4606      	mov	r6, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	f43f ae72 	beq.w	8005d20 <_strtod_l+0x490>
 800603c:	9a05      	ldr	r2, [sp, #20]
 800603e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006040:	4620      	mov	r0, r4
 8006042:	f003 fcf3 	bl	8009a2c <__mdiff>
 8006046:	4605      	mov	r5, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	f43f ae69 	beq.w	8005d20 <_strtod_l+0x490>
 800604e:	68c3      	ldr	r3, [r0, #12]
 8006050:	930b      	str	r3, [sp, #44]	; 0x2c
 8006052:	2300      	movs	r3, #0
 8006054:	60c3      	str	r3, [r0, #12]
 8006056:	4631      	mov	r1, r6
 8006058:	f003 fccc 	bl	80099f4 <__mcmp>
 800605c:	2800      	cmp	r0, #0
 800605e:	da60      	bge.n	8006122 <_strtod_l+0x892>
 8006060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006062:	ea53 030a 	orrs.w	r3, r3, sl
 8006066:	f040 8082 	bne.w	800616e <_strtod_l+0x8de>
 800606a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800606e:	2b00      	cmp	r3, #0
 8006070:	d17d      	bne.n	800616e <_strtod_l+0x8de>
 8006072:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006076:	0d1b      	lsrs	r3, r3, #20
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800607e:	d976      	bls.n	800616e <_strtod_l+0x8de>
 8006080:	696b      	ldr	r3, [r5, #20]
 8006082:	b913      	cbnz	r3, 800608a <_strtod_l+0x7fa>
 8006084:	692b      	ldr	r3, [r5, #16]
 8006086:	2b01      	cmp	r3, #1
 8006088:	dd71      	ble.n	800616e <_strtod_l+0x8de>
 800608a:	4629      	mov	r1, r5
 800608c:	2201      	movs	r2, #1
 800608e:	4620      	mov	r0, r4
 8006090:	f003 fc40 	bl	8009914 <__lshift>
 8006094:	4631      	mov	r1, r6
 8006096:	4605      	mov	r5, r0
 8006098:	f003 fcac 	bl	80099f4 <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	dd66      	ble.n	800616e <_strtod_l+0x8de>
 80060a0:	9904      	ldr	r1, [sp, #16]
 80060a2:	4a53      	ldr	r2, [pc, #332]	; (80061f0 <_strtod_l+0x960>)
 80060a4:	465b      	mov	r3, fp
 80060a6:	2900      	cmp	r1, #0
 80060a8:	f000 8081 	beq.w	80061ae <_strtod_l+0x91e>
 80060ac:	ea02 010b 	and.w	r1, r2, fp
 80060b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060b4:	dc7b      	bgt.n	80061ae <_strtod_l+0x91e>
 80060b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060ba:	f77f aea9 	ble.w	8005e10 <_strtod_l+0x580>
 80060be:	4b4d      	ldr	r3, [pc, #308]	; (80061f4 <_strtod_l+0x964>)
 80060c0:	4650      	mov	r0, sl
 80060c2:	4659      	mov	r1, fp
 80060c4:	2200      	movs	r2, #0
 80060c6:	f7fa faa7 	bl	8000618 <__aeabi_dmul>
 80060ca:	460b      	mov	r3, r1
 80060cc:	4303      	orrs	r3, r0
 80060ce:	bf08      	it	eq
 80060d0:	2322      	moveq	r3, #34	; 0x22
 80060d2:	4682      	mov	sl, r0
 80060d4:	468b      	mov	fp, r1
 80060d6:	bf08      	it	eq
 80060d8:	6023      	streq	r3, [r4, #0]
 80060da:	e62b      	b.n	8005d34 <_strtod_l+0x4a4>
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	ea03 0a0a 	and.w	sl, r3, sl
 80060e8:	e6e3      	b.n	8005eb2 <_strtod_l+0x622>
 80060ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80060ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80060f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80060f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80060fa:	fa01 f308 	lsl.w	r3, r1, r8
 80060fe:	9308      	str	r3, [sp, #32]
 8006100:	910d      	str	r1, [sp, #52]	; 0x34
 8006102:	e746      	b.n	8005f92 <_strtod_l+0x702>
 8006104:	2300      	movs	r3, #0
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	2301      	movs	r3, #1
 800610a:	930d      	str	r3, [sp, #52]	; 0x34
 800610c:	e741      	b.n	8005f92 <_strtod_l+0x702>
 800610e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006110:	4642      	mov	r2, r8
 8006112:	4620      	mov	r0, r4
 8006114:	f003 fbfe 	bl	8009914 <__lshift>
 8006118:	9018      	str	r0, [sp, #96]	; 0x60
 800611a:	2800      	cmp	r0, #0
 800611c:	f47f af6b 	bne.w	8005ff6 <_strtod_l+0x766>
 8006120:	e5fe      	b.n	8005d20 <_strtod_l+0x490>
 8006122:	465f      	mov	r7, fp
 8006124:	d16e      	bne.n	8006204 <_strtod_l+0x974>
 8006126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006128:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800612c:	b342      	cbz	r2, 8006180 <_strtod_l+0x8f0>
 800612e:	4a32      	ldr	r2, [pc, #200]	; (80061f8 <_strtod_l+0x968>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d128      	bne.n	8006186 <_strtod_l+0x8f6>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	4651      	mov	r1, sl
 8006138:	b1eb      	cbz	r3, 8006176 <_strtod_l+0x8e6>
 800613a:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <_strtod_l+0x960>)
 800613c:	403b      	ands	r3, r7
 800613e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006146:	d819      	bhi.n	800617c <_strtod_l+0x8ec>
 8006148:	0d1b      	lsrs	r3, r3, #20
 800614a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	4299      	cmp	r1, r3
 8006154:	d117      	bne.n	8006186 <_strtod_l+0x8f6>
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <_strtod_l+0x96c>)
 8006158:	429f      	cmp	r7, r3
 800615a:	d102      	bne.n	8006162 <_strtod_l+0x8d2>
 800615c:	3101      	adds	r1, #1
 800615e:	f43f addf 	beq.w	8005d20 <_strtod_l+0x490>
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <_strtod_l+0x960>)
 8006164:	403b      	ands	r3, r7
 8006166:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800616a:	f04f 0a00 	mov.w	sl, #0
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1a4      	bne.n	80060be <_strtod_l+0x82e>
 8006174:	e5de      	b.n	8005d34 <_strtod_l+0x4a4>
 8006176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800617a:	e7ea      	b.n	8006152 <_strtod_l+0x8c2>
 800617c:	4613      	mov	r3, r2
 800617e:	e7e8      	b.n	8006152 <_strtod_l+0x8c2>
 8006180:	ea53 030a 	orrs.w	r3, r3, sl
 8006184:	d08c      	beq.n	80060a0 <_strtod_l+0x810>
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	b1db      	cbz	r3, 80061c2 <_strtod_l+0x932>
 800618a:	423b      	tst	r3, r7
 800618c:	d0ef      	beq.n	800616e <_strtod_l+0x8de>
 800618e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006190:	9a04      	ldr	r2, [sp, #16]
 8006192:	4650      	mov	r0, sl
 8006194:	4659      	mov	r1, fp
 8006196:	b1c3      	cbz	r3, 80061ca <_strtod_l+0x93a>
 8006198:	f7ff fb5e 	bl	8005858 <sulp>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	ec51 0b18 	vmov	r0, r1, d8
 80061a4:	f7fa f882 	bl	80002ac <__adddf3>
 80061a8:	4682      	mov	sl, r0
 80061aa:	468b      	mov	fp, r1
 80061ac:	e7df      	b.n	800616e <_strtod_l+0x8de>
 80061ae:	4013      	ands	r3, r2
 80061b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80061b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80061c0:	e7d5      	b.n	800616e <_strtod_l+0x8de>
 80061c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c4:	ea13 0f0a 	tst.w	r3, sl
 80061c8:	e7e0      	b.n	800618c <_strtod_l+0x8fc>
 80061ca:	f7ff fb45 	bl	8005858 <sulp>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	ec51 0b18 	vmov	r0, r1, d8
 80061d6:	f7fa f867 	bl	80002a8 <__aeabi_dsub>
 80061da:	2200      	movs	r2, #0
 80061dc:	2300      	movs	r3, #0
 80061de:	4682      	mov	sl, r0
 80061e0:	468b      	mov	fp, r1
 80061e2:	f7fa fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d0c1      	beq.n	800616e <_strtod_l+0x8de>
 80061ea:	e611      	b.n	8005e10 <_strtod_l+0x580>
 80061ec:	fffffc02 	.word	0xfffffc02
 80061f0:	7ff00000 	.word	0x7ff00000
 80061f4:	39500000 	.word	0x39500000
 80061f8:	000fffff 	.word	0x000fffff
 80061fc:	7fefffff 	.word	0x7fefffff
 8006200:	0800bc70 	.word	0x0800bc70
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	f003 fd72 	bl	8009cf0 <__ratio>
 800620c:	ec59 8b10 	vmov	r8, r9, d0
 8006210:	ee10 0a10 	vmov	r0, s0
 8006214:	2200      	movs	r2, #0
 8006216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800621a:	4649      	mov	r1, r9
 800621c:	f7fa fc78 	bl	8000b10 <__aeabi_dcmple>
 8006220:	2800      	cmp	r0, #0
 8006222:	d07a      	beq.n	800631a <_strtod_l+0xa8a>
 8006224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04a      	beq.n	80062c0 <_strtod_l+0xa30>
 800622a:	4b95      	ldr	r3, [pc, #596]	; (8006480 <_strtod_l+0xbf0>)
 800622c:	2200      	movs	r2, #0
 800622e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006232:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006480 <_strtod_l+0xbf0>
 8006236:	f04f 0800 	mov.w	r8, #0
 800623a:	4b92      	ldr	r3, [pc, #584]	; (8006484 <_strtod_l+0xbf4>)
 800623c:	403b      	ands	r3, r7
 800623e:	930d      	str	r3, [sp, #52]	; 0x34
 8006240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006242:	4b91      	ldr	r3, [pc, #580]	; (8006488 <_strtod_l+0xbf8>)
 8006244:	429a      	cmp	r2, r3
 8006246:	f040 80b0 	bne.w	80063aa <_strtod_l+0xb1a>
 800624a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800624e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006252:	ec4b ab10 	vmov	d0, sl, fp
 8006256:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800625a:	f003 fc71 	bl	8009b40 <__ulp>
 800625e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006262:	ec53 2b10 	vmov	r2, r3, d0
 8006266:	f7fa f9d7 	bl	8000618 <__aeabi_dmul>
 800626a:	4652      	mov	r2, sl
 800626c:	465b      	mov	r3, fp
 800626e:	f7fa f81d 	bl	80002ac <__adddf3>
 8006272:	460b      	mov	r3, r1
 8006274:	4983      	ldr	r1, [pc, #524]	; (8006484 <_strtod_l+0xbf4>)
 8006276:	4a85      	ldr	r2, [pc, #532]	; (800648c <_strtod_l+0xbfc>)
 8006278:	4019      	ands	r1, r3
 800627a:	4291      	cmp	r1, r2
 800627c:	4682      	mov	sl, r0
 800627e:	d960      	bls.n	8006342 <_strtod_l+0xab2>
 8006280:	ee18 3a90 	vmov	r3, s17
 8006284:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006288:	4293      	cmp	r3, r2
 800628a:	d104      	bne.n	8006296 <_strtod_l+0xa06>
 800628c:	ee18 3a10 	vmov	r3, s16
 8006290:	3301      	adds	r3, #1
 8006292:	f43f ad45 	beq.w	8005d20 <_strtod_l+0x490>
 8006296:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006498 <_strtod_l+0xc08>
 800629a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800629e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062a0:	4620      	mov	r0, r4
 80062a2:	f003 f94e 	bl	8009542 <_Bfree>
 80062a6:	9905      	ldr	r1, [sp, #20]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f003 f94a 	bl	8009542 <_Bfree>
 80062ae:	4631      	mov	r1, r6
 80062b0:	4620      	mov	r0, r4
 80062b2:	f003 f946 	bl	8009542 <_Bfree>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4620      	mov	r0, r4
 80062ba:	f003 f942 	bl	8009542 <_Bfree>
 80062be:	e61a      	b.n	8005ef6 <_strtod_l+0x666>
 80062c0:	f1ba 0f00 	cmp.w	sl, #0
 80062c4:	d11b      	bne.n	80062fe <_strtod_l+0xa6e>
 80062c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ca:	b9f3      	cbnz	r3, 800630a <_strtod_l+0xa7a>
 80062cc:	4b6c      	ldr	r3, [pc, #432]	; (8006480 <_strtod_l+0xbf0>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa fc12 	bl	8000afc <__aeabi_dcmplt>
 80062d8:	b9d0      	cbnz	r0, 8006310 <_strtod_l+0xa80>
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	4b6c      	ldr	r3, [pc, #432]	; (8006490 <_strtod_l+0xc00>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f7fa f999 	bl	8000618 <__aeabi_dmul>
 80062e6:	4680      	mov	r8, r0
 80062e8:	4689      	mov	r9, r1
 80062ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80062f2:	9315      	str	r3, [sp, #84]	; 0x54
 80062f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80062f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062fc:	e79d      	b.n	800623a <_strtod_l+0x9aa>
 80062fe:	f1ba 0f01 	cmp.w	sl, #1
 8006302:	d102      	bne.n	800630a <_strtod_l+0xa7a>
 8006304:	2f00      	cmp	r7, #0
 8006306:	f43f ad83 	beq.w	8005e10 <_strtod_l+0x580>
 800630a:	4b62      	ldr	r3, [pc, #392]	; (8006494 <_strtod_l+0xc04>)
 800630c:	2200      	movs	r2, #0
 800630e:	e78e      	b.n	800622e <_strtod_l+0x99e>
 8006310:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006490 <_strtod_l+0xc00>
 8006314:	f04f 0800 	mov.w	r8, #0
 8006318:	e7e7      	b.n	80062ea <_strtod_l+0xa5a>
 800631a:	4b5d      	ldr	r3, [pc, #372]	; (8006490 <_strtod_l+0xc00>)
 800631c:	4640      	mov	r0, r8
 800631e:	4649      	mov	r1, r9
 8006320:	2200      	movs	r2, #0
 8006322:	f7fa f979 	bl	8000618 <__aeabi_dmul>
 8006326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006328:	4680      	mov	r8, r0
 800632a:	4689      	mov	r9, r1
 800632c:	b933      	cbnz	r3, 800633c <_strtod_l+0xaac>
 800632e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006332:	900e      	str	r0, [sp, #56]	; 0x38
 8006334:	930f      	str	r3, [sp, #60]	; 0x3c
 8006336:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800633a:	e7dd      	b.n	80062f8 <_strtod_l+0xa68>
 800633c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006340:	e7f9      	b.n	8006336 <_strtod_l+0xaa6>
 8006342:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1a8      	bne.n	800629e <_strtod_l+0xa0e>
 800634c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006352:	0d1b      	lsrs	r3, r3, #20
 8006354:	051b      	lsls	r3, r3, #20
 8006356:	429a      	cmp	r2, r3
 8006358:	d1a1      	bne.n	800629e <_strtod_l+0xa0e>
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa fcbb 	bl	8000cd8 <__aeabi_d2lz>
 8006362:	f7fa f92b 	bl	80005bc <__aeabi_l2d>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4640      	mov	r0, r8
 800636c:	4649      	mov	r1, r9
 800636e:	f7f9 ff9b 	bl	80002a8 <__aeabi_dsub>
 8006372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006378:	ea43 030a 	orr.w	r3, r3, sl
 800637c:	4313      	orrs	r3, r2
 800637e:	4680      	mov	r8, r0
 8006380:	4689      	mov	r9, r1
 8006382:	d055      	beq.n	8006430 <_strtod_l+0xba0>
 8006384:	a336      	add	r3, pc, #216	; (adr r3, 8006460 <_strtod_l+0xbd0>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7fa fbb7 	bl	8000afc <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f47f acd0 	bne.w	8005d34 <_strtod_l+0x4a4>
 8006394:	a334      	add	r3, pc, #208	; (adr r3, 8006468 <_strtod_l+0xbd8>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7fa fbcb 	bl	8000b38 <__aeabi_dcmpgt>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f43f af7b 	beq.w	800629e <_strtod_l+0xa0e>
 80063a8:	e4c4      	b.n	8005d34 <_strtod_l+0x4a4>
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	b333      	cbz	r3, 80063fc <_strtod_l+0xb6c>
 80063ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063b4:	d822      	bhi.n	80063fc <_strtod_l+0xb6c>
 80063b6:	a32e      	add	r3, pc, #184	; (adr r3, 8006470 <_strtod_l+0xbe0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	4640      	mov	r0, r8
 80063be:	4649      	mov	r1, r9
 80063c0:	f7fa fba6 	bl	8000b10 <__aeabi_dcmple>
 80063c4:	b1a0      	cbz	r0, 80063f0 <_strtod_l+0xb60>
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	f7fa fbfd 	bl	8000bc8 <__aeabi_d2uiz>
 80063ce:	2801      	cmp	r0, #1
 80063d0:	bf38      	it	cc
 80063d2:	2001      	movcc	r0, #1
 80063d4:	f7fa f8a6 	bl	8000524 <__aeabi_ui2d>
 80063d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063da:	4680      	mov	r8, r0
 80063dc:	4689      	mov	r9, r1
 80063de:	bb23      	cbnz	r3, 800642a <_strtod_l+0xb9a>
 80063e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e4:	9010      	str	r0, [sp, #64]	; 0x40
 80063e6:	9311      	str	r3, [sp, #68]	; 0x44
 80063e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006400:	eeb0 0a48 	vmov.f32	s0, s16
 8006404:	eef0 0a68 	vmov.f32	s1, s17
 8006408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800640c:	f003 fb98 	bl	8009b40 <__ulp>
 8006410:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006414:	ec53 2b10 	vmov	r2, r3, d0
 8006418:	f7fa f8fe 	bl	8000618 <__aeabi_dmul>
 800641c:	ec53 2b18 	vmov	r2, r3, d8
 8006420:	f7f9 ff44 	bl	80002ac <__adddf3>
 8006424:	4682      	mov	sl, r0
 8006426:	468b      	mov	fp, r1
 8006428:	e78d      	b.n	8006346 <_strtod_l+0xab6>
 800642a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800642e:	e7db      	b.n	80063e8 <_strtod_l+0xb58>
 8006430:	a311      	add	r3, pc, #68	; (adr r3, 8006478 <_strtod_l+0xbe8>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7fa fb61 	bl	8000afc <__aeabi_dcmplt>
 800643a:	e7b2      	b.n	80063a2 <_strtod_l+0xb12>
 800643c:	2300      	movs	r3, #0
 800643e:	930a      	str	r3, [sp, #40]	; 0x28
 8006440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	f7ff ba6b 	b.w	8005920 <_strtod_l+0x90>
 800644a:	2a65      	cmp	r2, #101	; 0x65
 800644c:	f43f ab5f 	beq.w	8005b0e <_strtod_l+0x27e>
 8006450:	2a45      	cmp	r2, #69	; 0x45
 8006452:	f43f ab5c 	beq.w	8005b0e <_strtod_l+0x27e>
 8006456:	2301      	movs	r3, #1
 8006458:	f7ff bb94 	b.w	8005b84 <_strtod_l+0x2f4>
 800645c:	f3af 8000 	nop.w
 8006460:	94a03595 	.word	0x94a03595
 8006464:	3fdfffff 	.word	0x3fdfffff
 8006468:	35afe535 	.word	0x35afe535
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	ffc00000 	.word	0xffc00000
 8006474:	41dfffff 	.word	0x41dfffff
 8006478:	94a03595 	.word	0x94a03595
 800647c:	3fcfffff 	.word	0x3fcfffff
 8006480:	3ff00000 	.word	0x3ff00000
 8006484:	7ff00000 	.word	0x7ff00000
 8006488:	7fe00000 	.word	0x7fe00000
 800648c:	7c9fffff 	.word	0x7c9fffff
 8006490:	3fe00000 	.word	0x3fe00000
 8006494:	bff00000 	.word	0xbff00000
 8006498:	7fefffff 	.word	0x7fefffff

0800649c <strtod>:
 800649c:	460a      	mov	r2, r1
 800649e:	4601      	mov	r1, r0
 80064a0:	4802      	ldr	r0, [pc, #8]	; (80064ac <strtod+0x10>)
 80064a2:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <strtod+0x14>)
 80064a4:	6800      	ldr	r0, [r0, #0]
 80064a6:	f7ff b9f3 	b.w	8005890 <_strtod_l>
 80064aa:	bf00      	nop
 80064ac:	20000014 	.word	0x20000014
 80064b0:	20000448 	.word	0x20000448

080064b4 <strtok>:
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <strtok+0xc>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	2301      	movs	r3, #1
 80064ba:	325c      	adds	r2, #92	; 0x5c
 80064bc:	f000 b802 	b.w	80064c4 <__strtok_r>
 80064c0:	20000014 	.word	0x20000014

080064c4 <__strtok_r>:
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c6:	b908      	cbnz	r0, 80064cc <__strtok_r+0x8>
 80064c8:	6810      	ldr	r0, [r2, #0]
 80064ca:	b188      	cbz	r0, 80064f0 <__strtok_r+0x2c>
 80064cc:	4604      	mov	r4, r0
 80064ce:	4620      	mov	r0, r4
 80064d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80064d4:	460f      	mov	r7, r1
 80064d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80064da:	b91e      	cbnz	r6, 80064e4 <__strtok_r+0x20>
 80064dc:	b965      	cbnz	r5, 80064f8 <__strtok_r+0x34>
 80064de:	6015      	str	r5, [r2, #0]
 80064e0:	4628      	mov	r0, r5
 80064e2:	e005      	b.n	80064f0 <__strtok_r+0x2c>
 80064e4:	42b5      	cmp	r5, r6
 80064e6:	d1f6      	bne.n	80064d6 <__strtok_r+0x12>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <__strtok_r+0xa>
 80064ec:	6014      	str	r4, [r2, #0]
 80064ee:	7003      	strb	r3, [r0, #0]
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	461c      	mov	r4, r3
 80064f4:	e00c      	b.n	8006510 <__strtok_r+0x4c>
 80064f6:	b915      	cbnz	r5, 80064fe <__strtok_r+0x3a>
 80064f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064fc:	460e      	mov	r6, r1
 80064fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006502:	42ab      	cmp	r3, r5
 8006504:	d1f7      	bne.n	80064f6 <__strtok_r+0x32>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f3      	beq.n	80064f2 <__strtok_r+0x2e>
 800650a:	2300      	movs	r3, #0
 800650c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006510:	6014      	str	r4, [r2, #0]
 8006512:	e7ed      	b.n	80064f0 <__strtok_r+0x2c>

08006514 <_strtol_l.constprop.0>:
 8006514:	2b01      	cmp	r3, #1
 8006516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651a:	d001      	beq.n	8006520 <_strtol_l.constprop.0+0xc>
 800651c:	2b24      	cmp	r3, #36	; 0x24
 800651e:	d906      	bls.n	800652e <_strtol_l.constprop.0+0x1a>
 8006520:	f7ff f934 	bl	800578c <__errno>
 8006524:	2316      	movs	r3, #22
 8006526:	6003      	str	r3, [r0, #0]
 8006528:	2000      	movs	r0, #0
 800652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006614 <_strtol_l.constprop.0+0x100>
 8006532:	460d      	mov	r5, r1
 8006534:	462e      	mov	r6, r5
 8006536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800653a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800653e:	f017 0708 	ands.w	r7, r7, #8
 8006542:	d1f7      	bne.n	8006534 <_strtol_l.constprop.0+0x20>
 8006544:	2c2d      	cmp	r4, #45	; 0x2d
 8006546:	d132      	bne.n	80065ae <_strtol_l.constprop.0+0x9a>
 8006548:	782c      	ldrb	r4, [r5, #0]
 800654a:	2701      	movs	r7, #1
 800654c:	1cb5      	adds	r5, r6, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d05b      	beq.n	800660a <_strtol_l.constprop.0+0xf6>
 8006552:	2b10      	cmp	r3, #16
 8006554:	d109      	bne.n	800656a <_strtol_l.constprop.0+0x56>
 8006556:	2c30      	cmp	r4, #48	; 0x30
 8006558:	d107      	bne.n	800656a <_strtol_l.constprop.0+0x56>
 800655a:	782c      	ldrb	r4, [r5, #0]
 800655c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006560:	2c58      	cmp	r4, #88	; 0x58
 8006562:	d14d      	bne.n	8006600 <_strtol_l.constprop.0+0xec>
 8006564:	786c      	ldrb	r4, [r5, #1]
 8006566:	2310      	movs	r3, #16
 8006568:	3502      	adds	r5, #2
 800656a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800656e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006572:	f04f 0c00 	mov.w	ip, #0
 8006576:	fbb8 f9f3 	udiv	r9, r8, r3
 800657a:	4666      	mov	r6, ip
 800657c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006580:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006584:	f1be 0f09 	cmp.w	lr, #9
 8006588:	d816      	bhi.n	80065b8 <_strtol_l.constprop.0+0xa4>
 800658a:	4674      	mov	r4, lr
 800658c:	42a3      	cmp	r3, r4
 800658e:	dd24      	ble.n	80065da <_strtol_l.constprop.0+0xc6>
 8006590:	f1bc 0f00 	cmp.w	ip, #0
 8006594:	db1e      	blt.n	80065d4 <_strtol_l.constprop.0+0xc0>
 8006596:	45b1      	cmp	r9, r6
 8006598:	d31c      	bcc.n	80065d4 <_strtol_l.constprop.0+0xc0>
 800659a:	d101      	bne.n	80065a0 <_strtol_l.constprop.0+0x8c>
 800659c:	45a2      	cmp	sl, r4
 800659e:	db19      	blt.n	80065d4 <_strtol_l.constprop.0+0xc0>
 80065a0:	fb06 4603 	mla	r6, r6, r3, r4
 80065a4:	f04f 0c01 	mov.w	ip, #1
 80065a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065ac:	e7e8      	b.n	8006580 <_strtol_l.constprop.0+0x6c>
 80065ae:	2c2b      	cmp	r4, #43	; 0x2b
 80065b0:	bf04      	itt	eq
 80065b2:	782c      	ldrbeq	r4, [r5, #0]
 80065b4:	1cb5      	addeq	r5, r6, #2
 80065b6:	e7ca      	b.n	800654e <_strtol_l.constprop.0+0x3a>
 80065b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80065bc:	f1be 0f19 	cmp.w	lr, #25
 80065c0:	d801      	bhi.n	80065c6 <_strtol_l.constprop.0+0xb2>
 80065c2:	3c37      	subs	r4, #55	; 0x37
 80065c4:	e7e2      	b.n	800658c <_strtol_l.constprop.0+0x78>
 80065c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80065ca:	f1be 0f19 	cmp.w	lr, #25
 80065ce:	d804      	bhi.n	80065da <_strtol_l.constprop.0+0xc6>
 80065d0:	3c57      	subs	r4, #87	; 0x57
 80065d2:	e7db      	b.n	800658c <_strtol_l.constprop.0+0x78>
 80065d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80065d8:	e7e6      	b.n	80065a8 <_strtol_l.constprop.0+0x94>
 80065da:	f1bc 0f00 	cmp.w	ip, #0
 80065de:	da05      	bge.n	80065ec <_strtol_l.constprop.0+0xd8>
 80065e0:	2322      	movs	r3, #34	; 0x22
 80065e2:	6003      	str	r3, [r0, #0]
 80065e4:	4646      	mov	r6, r8
 80065e6:	b942      	cbnz	r2, 80065fa <_strtol_l.constprop.0+0xe6>
 80065e8:	4630      	mov	r0, r6
 80065ea:	e79e      	b.n	800652a <_strtol_l.constprop.0+0x16>
 80065ec:	b107      	cbz	r7, 80065f0 <_strtol_l.constprop.0+0xdc>
 80065ee:	4276      	negs	r6, r6
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d0f9      	beq.n	80065e8 <_strtol_l.constprop.0+0xd4>
 80065f4:	f1bc 0f00 	cmp.w	ip, #0
 80065f8:	d000      	beq.n	80065fc <_strtol_l.constprop.0+0xe8>
 80065fa:	1e69      	subs	r1, r5, #1
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	e7f3      	b.n	80065e8 <_strtol_l.constprop.0+0xd4>
 8006600:	2430      	movs	r4, #48	; 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1b1      	bne.n	800656a <_strtol_l.constprop.0+0x56>
 8006606:	2308      	movs	r3, #8
 8006608:	e7af      	b.n	800656a <_strtol_l.constprop.0+0x56>
 800660a:	2c30      	cmp	r4, #48	; 0x30
 800660c:	d0a5      	beq.n	800655a <_strtol_l.constprop.0+0x46>
 800660e:	230a      	movs	r3, #10
 8006610:	e7ab      	b.n	800656a <_strtol_l.constprop.0+0x56>
 8006612:	bf00      	nop
 8006614:	0800bced 	.word	0x0800bced

08006618 <strtol>:
 8006618:	4613      	mov	r3, r2
 800661a:	460a      	mov	r2, r1
 800661c:	4601      	mov	r1, r0
 800661e:	4802      	ldr	r0, [pc, #8]	; (8006628 <strtol+0x10>)
 8006620:	6800      	ldr	r0, [r0, #0]
 8006622:	f7ff bf77 	b.w	8006514 <_strtol_l.constprop.0>
 8006626:	bf00      	nop
 8006628:	20000014 	.word	0x20000014
 800662c:	00000000 	.word	0x00000000

08006630 <_svfprintf_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	ed2d 8b04 	vpush	{d8-d9}
 8006638:	b0cf      	sub	sp, #316	; 0x13c
 800663a:	4688      	mov	r8, r1
 800663c:	4691      	mov	r9, r2
 800663e:	461e      	mov	r6, r3
 8006640:	4682      	mov	sl, r0
 8006642:	f002 fce9 	bl	8009018 <_localeconv_r>
 8006646:	6803      	ldr	r3, [r0, #0]
 8006648:	9313      	str	r3, [sp, #76]	; 0x4c
 800664a:	4618      	mov	r0, r3
 800664c:	f7f9 fdca 	bl	80001e4 <strlen>
 8006650:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006654:	900d      	str	r0, [sp, #52]	; 0x34
 8006656:	0618      	lsls	r0, r3, #24
 8006658:	d51a      	bpl.n	8006690 <_svfprintf_r+0x60>
 800665a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800665e:	b9bb      	cbnz	r3, 8006690 <_svfprintf_r+0x60>
 8006660:	2140      	movs	r1, #64	; 0x40
 8006662:	4650      	mov	r0, sl
 8006664:	f002 fce0 	bl	8009028 <_malloc_r>
 8006668:	f8c8 0000 	str.w	r0, [r8]
 800666c:	f8c8 0010 	str.w	r0, [r8, #16]
 8006670:	b958      	cbnz	r0, 800668a <_svfprintf_r+0x5a>
 8006672:	230c      	movs	r3, #12
 8006674:	f8ca 3000 	str.w	r3, [sl]
 8006678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800667c:	930c      	str	r3, [sp, #48]	; 0x30
 800667e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006680:	b04f      	add	sp, #316	; 0x13c
 8006682:	ecbd 8b04 	vpop	{d8-d9}
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668a:	2340      	movs	r3, #64	; 0x40
 800668c:	f8c8 3014 	str.w	r3, [r8, #20]
 8006690:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80068e0 <_svfprintf_r+0x2b0>
 8006694:	2500      	movs	r5, #0
 8006696:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800669a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800669e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80066a2:	ac25      	add	r4, sp, #148	; 0x94
 80066a4:	9422      	str	r4, [sp, #136]	; 0x88
 80066a6:	9505      	str	r5, [sp, #20]
 80066a8:	950a      	str	r5, [sp, #40]	; 0x28
 80066aa:	9512      	str	r5, [sp, #72]	; 0x48
 80066ac:	9514      	str	r5, [sp, #80]	; 0x50
 80066ae:	950c      	str	r5, [sp, #48]	; 0x30
 80066b0:	464b      	mov	r3, r9
 80066b2:	461d      	mov	r5, r3
 80066b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b8:	b10a      	cbz	r2, 80066be <_svfprintf_r+0x8e>
 80066ba:	2a25      	cmp	r2, #37	; 0x25
 80066bc:	d1f9      	bne.n	80066b2 <_svfprintf_r+0x82>
 80066be:	ebb5 0709 	subs.w	r7, r5, r9
 80066c2:	d00d      	beq.n	80066e0 <_svfprintf_r+0xb0>
 80066c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066c6:	443b      	add	r3, r7
 80066c8:	9324      	str	r3, [sp, #144]	; 0x90
 80066ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066cc:	3301      	adds	r3, #1
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	e9c4 9700 	strd	r9, r7, [r4]
 80066d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80066d6:	dc79      	bgt.n	80067cc <_svfprintf_r+0x19c>
 80066d8:	3408      	adds	r4, #8
 80066da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066dc:	443b      	add	r3, r7
 80066de:	930c      	str	r3, [sp, #48]	; 0x30
 80066e0:	782b      	ldrb	r3, [r5, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f001 8148 	beq.w	8007978 <_svfprintf_r+0x1348>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ee:	9204      	str	r2, [sp, #16]
 80066f0:	3501      	adds	r5, #1
 80066f2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80066f6:	9310      	str	r3, [sp, #64]	; 0x40
 80066f8:	469b      	mov	fp, r3
 80066fa:	270a      	movs	r7, #10
 80066fc:	222b      	movs	r2, #43	; 0x2b
 80066fe:	462b      	mov	r3, r5
 8006700:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006704:	9106      	str	r1, [sp, #24]
 8006706:	930b      	str	r3, [sp, #44]	; 0x2c
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	3b20      	subs	r3, #32
 800670c:	2b5a      	cmp	r3, #90	; 0x5a
 800670e:	f200 85bf 	bhi.w	8007290 <_svfprintf_r+0xc60>
 8006712:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006716:	007e      	.short	0x007e
 8006718:	05bd05bd 	.word	0x05bd05bd
 800671c:	05bd0086 	.word	0x05bd0086
 8006720:	05bd05bd 	.word	0x05bd05bd
 8006724:	05bd0065 	.word	0x05bd0065
 8006728:	008905bd 	.word	0x008905bd
 800672c:	05bd0093 	.word	0x05bd0093
 8006730:	00960090 	.word	0x00960090
 8006734:	00b305bd 	.word	0x00b305bd
 8006738:	00b600b6 	.word	0x00b600b6
 800673c:	00b600b6 	.word	0x00b600b6
 8006740:	00b600b6 	.word	0x00b600b6
 8006744:	00b600b6 	.word	0x00b600b6
 8006748:	05bd00b6 	.word	0x05bd00b6
 800674c:	05bd05bd 	.word	0x05bd05bd
 8006750:	05bd05bd 	.word	0x05bd05bd
 8006754:	05bd05bd 	.word	0x05bd05bd
 8006758:	05bd012c 	.word	0x05bd012c
 800675c:	00fc00e9 	.word	0x00fc00e9
 8006760:	012c012c 	.word	0x012c012c
 8006764:	05bd012c 	.word	0x05bd012c
 8006768:	05bd05bd 	.word	0x05bd05bd
 800676c:	00c605bd 	.word	0x00c605bd
 8006770:	05bd05bd 	.word	0x05bd05bd
 8006774:	05bd0498 	.word	0x05bd0498
 8006778:	05bd05bd 	.word	0x05bd05bd
 800677c:	05bd04e2 	.word	0x05bd04e2
 8006780:	05bd0503 	.word	0x05bd0503
 8006784:	052505bd 	.word	0x052505bd
 8006788:	05bd05bd 	.word	0x05bd05bd
 800678c:	05bd05bd 	.word	0x05bd05bd
 8006790:	05bd05bd 	.word	0x05bd05bd
 8006794:	05bd05bd 	.word	0x05bd05bd
 8006798:	05bd012c 	.word	0x05bd012c
 800679c:	00fe00e9 	.word	0x00fe00e9
 80067a0:	012c012c 	.word	0x012c012c
 80067a4:	00c9012c 	.word	0x00c9012c
 80067a8:	00dd00fe 	.word	0x00dd00fe
 80067ac:	00d605bd 	.word	0x00d605bd
 80067b0:	047305bd 	.word	0x047305bd
 80067b4:	04d0049a 	.word	0x04d0049a
 80067b8:	05bd00dd 	.word	0x05bd00dd
 80067bc:	007c04e2 	.word	0x007c04e2
 80067c0:	05bd0505 	.word	0x05bd0505
 80067c4:	054405bd 	.word	0x054405bd
 80067c8:	007c05bd 	.word	0x007c05bd
 80067cc:	aa22      	add	r2, sp, #136	; 0x88
 80067ce:	4641      	mov	r1, r8
 80067d0:	4650      	mov	r0, sl
 80067d2:	f003 fb7c 	bl	8009ece <__ssprint_r>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f040 8137 	bne.w	8006a4a <_svfprintf_r+0x41a>
 80067dc:	ac25      	add	r4, sp, #148	; 0x94
 80067de:	e77c      	b.n	80066da <_svfprintf_r+0xaa>
 80067e0:	4650      	mov	r0, sl
 80067e2:	f002 fc19 	bl	8009018 <_localeconv_r>
 80067e6:	6843      	ldr	r3, [r0, #4]
 80067e8:	9314      	str	r3, [sp, #80]	; 0x50
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7f9 fcfa 	bl	80001e4 <strlen>
 80067f0:	9012      	str	r0, [sp, #72]	; 0x48
 80067f2:	4650      	mov	r0, sl
 80067f4:	f002 fc10 	bl	8009018 <_localeconv_r>
 80067f8:	6883      	ldr	r3, [r0, #8]
 80067fa:	930a      	str	r3, [sp, #40]	; 0x28
 80067fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067fe:	222b      	movs	r2, #43	; 0x2b
 8006800:	b12b      	cbz	r3, 800680e <_svfprintf_r+0x1de>
 8006802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006804:	b11b      	cbz	r3, 800680e <_svfprintf_r+0x1de>
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b10b      	cbz	r3, 800680e <_svfprintf_r+0x1de>
 800680a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800680e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006810:	e775      	b.n	80066fe <_svfprintf_r+0xce>
 8006812:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f9      	bne.n	800680e <_svfprintf_r+0x1de>
 800681a:	2320      	movs	r3, #32
 800681c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006820:	e7f5      	b.n	800680e <_svfprintf_r+0x1de>
 8006822:	f04b 0b01 	orr.w	fp, fp, #1
 8006826:	e7f2      	b.n	800680e <_svfprintf_r+0x1de>
 8006828:	f856 3b04 	ldr.w	r3, [r6], #4
 800682c:	9310      	str	r3, [sp, #64]	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	daed      	bge.n	800680e <_svfprintf_r+0x1de>
 8006832:	425b      	negs	r3, r3
 8006834:	9310      	str	r3, [sp, #64]	; 0x40
 8006836:	f04b 0b04 	orr.w	fp, fp, #4
 800683a:	e7e8      	b.n	800680e <_svfprintf_r+0x1de>
 800683c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006840:	e7e5      	b.n	800680e <_svfprintf_r+0x1de>
 8006842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006844:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006848:	9306      	str	r3, [sp, #24]
 800684a:	2b2a      	cmp	r3, #42	; 0x2a
 800684c:	d113      	bne.n	8006876 <_svfprintf_r+0x246>
 800684e:	f856 0b04 	ldr.w	r0, [r6], #4
 8006852:	950b      	str	r5, [sp, #44]	; 0x2c
 8006854:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	e7d8      	b.n	800680e <_svfprintf_r+0x1de>
 800685c:	9904      	ldr	r1, [sp, #16]
 800685e:	fb07 3301 	mla	r3, r7, r1, r3
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006868:	9306      	str	r3, [sp, #24]
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	3b30      	subs	r3, #48	; 0x30
 800686e:	2b09      	cmp	r3, #9
 8006870:	d9f4      	bls.n	800685c <_svfprintf_r+0x22c>
 8006872:	950b      	str	r5, [sp, #44]	; 0x2c
 8006874:	e748      	b.n	8006708 <_svfprintf_r+0xd8>
 8006876:	2300      	movs	r3, #0
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	e7f6      	b.n	800686a <_svfprintf_r+0x23a>
 800687c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8006880:	e7c5      	b.n	800680e <_svfprintf_r+0x1de>
 8006882:	2300      	movs	r3, #0
 8006884:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006886:	9310      	str	r3, [sp, #64]	; 0x40
 8006888:	9b06      	ldr	r3, [sp, #24]
 800688a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800688c:	3b30      	subs	r3, #48	; 0x30
 800688e:	fb07 3301 	mla	r3, r7, r1, r3
 8006892:	9310      	str	r3, [sp, #64]	; 0x40
 8006894:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006898:	9306      	str	r3, [sp, #24]
 800689a:	3b30      	subs	r3, #48	; 0x30
 800689c:	2b09      	cmp	r3, #9
 800689e:	d9f3      	bls.n	8006888 <_svfprintf_r+0x258>
 80068a0:	e7e7      	b.n	8006872 <_svfprintf_r+0x242>
 80068a2:	f04b 0b08 	orr.w	fp, fp, #8
 80068a6:	e7b2      	b.n	800680e <_svfprintf_r+0x1de>
 80068a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b68      	cmp	r3, #104	; 0x68
 80068ae:	bf01      	itttt	eq
 80068b0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80068b2:	3301      	addeq	r3, #1
 80068b4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80068b6:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80068ba:	bf18      	it	ne
 80068bc:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80068c0:	e7a5      	b.n	800680e <_svfprintf_r+0x1de>
 80068c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b6c      	cmp	r3, #108	; 0x6c
 80068c8:	d105      	bne.n	80068d6 <_svfprintf_r+0x2a6>
 80068ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068cc:	3301      	adds	r3, #1
 80068ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d0:	f04b 0b20 	orr.w	fp, fp, #32
 80068d4:	e79b      	b.n	800680e <_svfprintf_r+0x1de>
 80068d6:	f04b 0b10 	orr.w	fp, fp, #16
 80068da:	e798      	b.n	800680e <_svfprintf_r+0x1de>
 80068dc:	f3af 8000 	nop.w
	...
 80068e8:	4632      	mov	r2, r6
 80068ea:	2000      	movs	r0, #0
 80068ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80068f6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80068fa:	2301      	movs	r3, #1
 80068fc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8006900:	9003      	str	r0, [sp, #12]
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	4606      	mov	r6, r0
 8006906:	4605      	mov	r5, r0
 8006908:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800690c:	e1bc      	b.n	8006c88 <_svfprintf_r+0x658>
 800690e:	f04b 0b10 	orr.w	fp, fp, #16
 8006912:	f01b 0f20 	tst.w	fp, #32
 8006916:	d012      	beq.n	800693e <_svfprintf_r+0x30e>
 8006918:	1df3      	adds	r3, r6, #7
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	461a      	mov	r2, r3
 8006920:	685d      	ldr	r5, [r3, #4]
 8006922:	f852 6b08 	ldr.w	r6, [r2], #8
 8006926:	9207      	str	r2, [sp, #28]
 8006928:	2d00      	cmp	r5, #0
 800692a:	da06      	bge.n	800693a <_svfprintf_r+0x30a>
 800692c:	4276      	negs	r6, r6
 800692e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006932:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006936:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800693a:	2301      	movs	r3, #1
 800693c:	e396      	b.n	800706c <_svfprintf_r+0xa3c>
 800693e:	4633      	mov	r3, r6
 8006940:	f01b 0f10 	tst.w	fp, #16
 8006944:	f853 5b04 	ldr.w	r5, [r3], #4
 8006948:	9307      	str	r3, [sp, #28]
 800694a:	d002      	beq.n	8006952 <_svfprintf_r+0x322>
 800694c:	462e      	mov	r6, r5
 800694e:	17ed      	asrs	r5, r5, #31
 8006950:	e7ea      	b.n	8006928 <_svfprintf_r+0x2f8>
 8006952:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006956:	d003      	beq.n	8006960 <_svfprintf_r+0x330>
 8006958:	b22e      	sxth	r6, r5
 800695a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800695e:	e7e3      	b.n	8006928 <_svfprintf_r+0x2f8>
 8006960:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006964:	d0f2      	beq.n	800694c <_svfprintf_r+0x31c>
 8006966:	b26e      	sxtb	r6, r5
 8006968:	f345 15c0 	sbfx	r5, r5, #7, #1
 800696c:	e7dc      	b.n	8006928 <_svfprintf_r+0x2f8>
 800696e:	3607      	adds	r6, #7
 8006970:	f026 0307 	bic.w	r3, r6, #7
 8006974:	ecb3 7b02 	vldmia	r3!, {d7}
 8006978:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800697c:	9307      	str	r3, [sp, #28]
 800697e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006980:	ee09 3a10 	vmov	s18, r3
 8006984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800698a:	ee09 3a90 	vmov	s19, r3
 800698e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006992:	4b3a      	ldr	r3, [pc, #232]	; (8006a7c <_svfprintf_r+0x44c>)
 8006994:	ec51 0b19 	vmov	r0, r1, d9
 8006998:	f7fa f8d8 	bl	8000b4c <__aeabi_dcmpun>
 800699c:	bb10      	cbnz	r0, 80069e4 <_svfprintf_r+0x3b4>
 800699e:	4b37      	ldr	r3, [pc, #220]	; (8006a7c <_svfprintf_r+0x44c>)
 80069a0:	ec51 0b19 	vmov	r0, r1, d9
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a8:	f7fa f8b2 	bl	8000b10 <__aeabi_dcmple>
 80069ac:	b9d0      	cbnz	r0, 80069e4 <_svfprintf_r+0x3b4>
 80069ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	f7fa f8a1 	bl	8000afc <__aeabi_dcmplt>
 80069ba:	b110      	cbz	r0, 80069c2 <_svfprintf_r+0x392>
 80069bc:	232d      	movs	r3, #45	; 0x2d
 80069be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80069c2:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <_svfprintf_r+0x450>)
 80069c4:	482f      	ldr	r0, [pc, #188]	; (8006a84 <_svfprintf_r+0x454>)
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	2100      	movs	r1, #0
 80069ca:	2b47      	cmp	r3, #71	; 0x47
 80069cc:	bfd4      	ite	le
 80069ce:	4691      	movle	r9, r2
 80069d0:	4681      	movgt	r9, r0
 80069d2:	2303      	movs	r3, #3
 80069d4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80069d8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80069dc:	2600      	movs	r6, #0
 80069de:	4633      	mov	r3, r6
 80069e0:	f001 b800 	b.w	80079e4 <_svfprintf_r+0x13b4>
 80069e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	f7fa f8ae 	bl	8000b4c <__aeabi_dcmpun>
 80069f0:	b140      	cbz	r0, 8006a04 <_svfprintf_r+0x3d4>
 80069f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069f4:	4a24      	ldr	r2, [pc, #144]	; (8006a88 <_svfprintf_r+0x458>)
 80069f6:	4825      	ldr	r0, [pc, #148]	; (8006a8c <_svfprintf_r+0x45c>)
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bfbc      	itt	lt
 80069fc:	232d      	movlt	r3, #45	; 0x2d
 80069fe:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8006a02:	e7e0      	b.n	80069c6 <_svfprintf_r+0x396>
 8006a04:	9b06      	ldr	r3, [sp, #24]
 8006a06:	f023 0320 	bic.w	r3, r3, #32
 8006a0a:	2b41      	cmp	r3, #65	; 0x41
 8006a0c:	9308      	str	r3, [sp, #32]
 8006a0e:	d125      	bne.n	8006a5c <_svfprintf_r+0x42c>
 8006a10:	2330      	movs	r3, #48	; 0x30
 8006a12:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	2b61      	cmp	r3, #97	; 0x61
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2378      	moveq	r3, #120	; 0x78
 8006a1e:	2358      	movne	r3, #88	; 0x58
 8006a20:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	2b63      	cmp	r3, #99	; 0x63
 8006a28:	f04b 0b02 	orr.w	fp, fp, #2
 8006a2c:	dd30      	ble.n	8006a90 <_svfprintf_r+0x460>
 8006a2e:	1c59      	adds	r1, r3, #1
 8006a30:	4650      	mov	r0, sl
 8006a32:	f002 faf9 	bl	8009028 <_malloc_r>
 8006a36:	4681      	mov	r9, r0
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f040 81fd 	bne.w	8006e38 <_svfprintf_r+0x808>
 8006a3e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a46:	f8a8 300c 	strh.w	r3, [r8, #12]
 8006a4a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006a4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a54:	bf18      	it	ne
 8006a56:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006a5a:	e60f      	b.n	800667c <_svfprintf_r+0x4c>
 8006a5c:	9b04      	ldr	r3, [sp, #16]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f000 81ec 	beq.w	8006e3c <_svfprintf_r+0x80c>
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	2b47      	cmp	r3, #71	; 0x47
 8006a68:	f040 81eb 	bne.w	8006e42 <_svfprintf_r+0x812>
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 81e7 	bne.w	8006e42 <_svfprintf_r+0x812>
 8006a74:	9303      	str	r3, [sp, #12]
 8006a76:	2301      	movs	r3, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	e00c      	b.n	8006a96 <_svfprintf_r+0x466>
 8006a7c:	7fefffff 	.word	0x7fefffff
 8006a80:	0800bc98 	.word	0x0800bc98
 8006a84:	0800bc9c 	.word	0x0800bc9c
 8006a88:	0800bca0 	.word	0x0800bca0
 8006a8c:	0800bca4 	.word	0x0800bca4
 8006a90:	9003      	str	r0, [sp, #12]
 8006a92:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8006a96:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8006a9a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f280 81d1 	bge.w	8006e46 <_svfprintf_r+0x816>
 8006aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa6:	ee08 3a10 	vmov	s16, r3
 8006aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ab0:	ee08 3a90 	vmov	s17, r3
 8006ab4:	232d      	movs	r3, #45	; 0x2d
 8006ab6:	9318      	str	r3, [sp, #96]	; 0x60
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	2b41      	cmp	r3, #65	; 0x41
 8006abc:	f040 81e1 	bne.w	8006e82 <_svfprintf_r+0x852>
 8006ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ac4:	eef0 0a68 	vmov.f32	s1, s17
 8006ac8:	a81c      	add	r0, sp, #112	; 0x70
 8006aca:	f003 f989 	bl	8009de0 <frexp>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006ad4:	ec51 0b10 	vmov	r0, r1, d0
 8006ad8:	f7f9 fd9e 	bl	8000618 <__aeabi_dmul>
 8006adc:	2200      	movs	r2, #0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	460f      	mov	r7, r1
 8006ae4:	f7fa f800 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ae8:	b108      	cbz	r0, 8006aee <_svfprintf_r+0x4be>
 8006aea:	2301      	movs	r3, #1
 8006aec:	931c      	str	r3, [sp, #112]	; 0x70
 8006aee:	4ba7      	ldr	r3, [pc, #668]	; (8006d8c <_svfprintf_r+0x75c>)
 8006af0:	4aa7      	ldr	r2, [pc, #668]	; (8006d90 <_svfprintf_r+0x760>)
 8006af2:	9906      	ldr	r1, [sp, #24]
 8006af4:	2961      	cmp	r1, #97	; 0x61
 8006af6:	bf18      	it	ne
 8006af8:	461a      	movne	r2, r3
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006afe:	3b01      	subs	r3, #1
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	464d      	mov	r5, r9
 8006b04:	4ba3      	ldr	r3, [pc, #652]	; (8006d94 <_svfprintf_r+0x764>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7f9 fd84 	bl	8000618 <__aeabi_dmul>
 8006b10:	460f      	mov	r7, r1
 8006b12:	4606      	mov	r6, r0
 8006b14:	f7fa f830 	bl	8000b78 <__aeabi_d2iz>
 8006b18:	9019      	str	r0, [sp, #100]	; 0x64
 8006b1a:	f7f9 fd13 	bl	8000544 <__aeabi_i2d>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4630      	mov	r0, r6
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 fbbf 	bl	80002a8 <__aeabi_dsub>
 8006b2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	f805 3b01 	strb.w	r3, [r5], #1
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	9309      	str	r3, [sp, #36]	; 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	d007      	beq.n	8006b50 <_svfprintf_r+0x520>
 8006b40:	3b01      	subs	r3, #1
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	2300      	movs	r3, #0
 8006b48:	f7f9 ffce 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0d9      	beq.n	8006b04 <_svfprintf_r+0x4d4>
 8006b50:	4b91      	ldr	r3, [pc, #580]	; (8006d98 <_svfprintf_r+0x768>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 ffee 	bl	8000b38 <__aeabi_dcmpgt>
 8006b5c:	b960      	cbnz	r0, 8006b78 <_svfprintf_r+0x548>
 8006b5e:	4b8e      	ldr	r3, [pc, #568]	; (8006d98 <_svfprintf_r+0x768>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 ffbf 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f000 8184 	beq.w	8006e78 <_svfprintf_r+0x848>
 8006b70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	f140 8180 	bpl.w	8006e78 <_svfprintf_r+0x848>
 8006b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b7a:	9520      	str	r5, [sp, #128]	; 0x80
 8006b7c:	7bd9      	ldrb	r1, [r3, #15]
 8006b7e:	2030      	movs	r0, #48	; 0x30
 8006b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b82:	1e53      	subs	r3, r2, #1
 8006b84:	9320      	str	r3, [sp, #128]	; 0x80
 8006b86:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006b8a:	428b      	cmp	r3, r1
 8006b8c:	f000 8163 	beq.w	8006e56 <_svfprintf_r+0x826>
 8006b90:	2b39      	cmp	r3, #57	; 0x39
 8006b92:	bf0b      	itete	eq
 8006b94:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8006b96:	3301      	addne	r3, #1
 8006b98:	7a9b      	ldrbeq	r3, [r3, #10]
 8006b9a:	b2db      	uxtbne	r3, r3
 8006b9c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ba0:	eba5 0309 	sub.w	r3, r5, r9
 8006ba4:	9305      	str	r3, [sp, #20]
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006baa:	2b47      	cmp	r3, #71	; 0x47
 8006bac:	f040 81b1 	bne.w	8006f12 <_svfprintf_r+0x8e2>
 8006bb0:	1cef      	adds	r7, r5, #3
 8006bb2:	db03      	blt.n	8006bbc <_svfprintf_r+0x58c>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	f280 81d6 	bge.w	8006f68 <_svfprintf_r+0x938>
 8006bbc:	9b06      	ldr	r3, [sp, #24]
 8006bbe:	3b02      	subs	r3, #2
 8006bc0:	9306      	str	r3, [sp, #24]
 8006bc2:	9906      	ldr	r1, [sp, #24]
 8006bc4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006bc8:	f021 0120 	bic.w	r1, r1, #32
 8006bcc:	2941      	cmp	r1, #65	; 0x41
 8006bce:	bf08      	it	eq
 8006bd0:	320f      	addeq	r2, #15
 8006bd2:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006bd6:	bf06      	itte	eq
 8006bd8:	b2d2      	uxtbeq	r2, r2
 8006bda:	2101      	moveq	r1, #1
 8006bdc:	2100      	movne	r1, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	931c      	str	r3, [sp, #112]	; 0x70
 8006be2:	bfb8      	it	lt
 8006be4:	f1c5 0301 	rsblt	r3, r5, #1
 8006be8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006bec:	bfb4      	ite	lt
 8006bee:	222d      	movlt	r2, #45	; 0x2d
 8006bf0:	222b      	movge	r2, #43	; 0x2b
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006bf8:	f340 81a4 	ble.w	8006f44 <_svfprintf_r+0x914>
 8006bfc:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8006c00:	260a      	movs	r6, #10
 8006c02:	4611      	mov	r1, r2
 8006c04:	fb93 f5f6 	sdiv	r5, r3, r6
 8006c08:	fb06 3015 	mls	r0, r6, r5, r3
 8006c0c:	3030      	adds	r0, #48	; 0x30
 8006c0e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8006c12:	4618      	mov	r0, r3
 8006c14:	2863      	cmp	r0, #99	; 0x63
 8006c16:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006c1a:	462b      	mov	r3, r5
 8006c1c:	dcf1      	bgt.n	8006c02 <_svfprintf_r+0x5d2>
 8006c1e:	3330      	adds	r3, #48	; 0x30
 8006c20:	1e88      	subs	r0, r1, #2
 8006c22:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c26:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006c2a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006c2e:	4603      	mov	r3, r0
 8006c30:	42ab      	cmp	r3, r5
 8006c32:	f0c0 8182 	bcc.w	8006f3a <_svfprintf_r+0x90a>
 8006c36:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006c3a:	1a52      	subs	r2, r2, r1
 8006c3c:	42a8      	cmp	r0, r5
 8006c3e:	bf88      	it	hi
 8006c40:	2200      	movhi	r2, #0
 8006c42:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8006c46:	441a      	add	r2, r3
 8006c48:	ab1e      	add	r3, sp, #120	; 0x78
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	9a05      	ldr	r2, [sp, #20]
 8006c4e:	9315      	str	r3, [sp, #84]	; 0x54
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	dc02      	bgt.n	8006c5e <_svfprintf_r+0x62e>
 8006c58:	f01b 0f01 	tst.w	fp, #1
 8006c5c:	d003      	beq.n	8006c66 <_svfprintf_r+0x636>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c62:	4413      	add	r3, r2
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8006c70:	2300      	movs	r3, #0
 8006c72:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006c76:	461d      	mov	r5, r3
 8006c78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006c7a:	b113      	cbz	r3, 8006c82 <_svfprintf_r+0x652>
 8006c7c:	232d      	movs	r3, #45	; 0x2d
 8006c7e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006c82:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8006c86:	2600      	movs	r6, #0
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	42b3      	cmp	r3, r6
 8006c8c:	bfb8      	it	lt
 8006c8e:	4633      	movlt	r3, r6
 8006c90:	9311      	str	r3, [sp, #68]	; 0x44
 8006c92:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006c96:	b113      	cbz	r3, 8006c9e <_svfprintf_r+0x66e>
 8006c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9311      	str	r3, [sp, #68]	; 0x44
 8006c9e:	f01b 0302 	ands.w	r3, fp, #2
 8006ca2:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ca4:	bf1e      	ittt	ne
 8006ca6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8006ca8:	3302      	addne	r3, #2
 8006caa:	9311      	strne	r3, [sp, #68]	; 0x44
 8006cac:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8006cb0:	9318      	str	r3, [sp, #96]	; 0x60
 8006cb2:	d11f      	bne.n	8006cf4 <_svfprintf_r+0x6c4>
 8006cb4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006cb8:	1a9f      	subs	r7, r3, r2
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	dd1a      	ble.n	8006cf4 <_svfprintf_r+0x6c4>
 8006cbe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006cc2:	4836      	ldr	r0, [pc, #216]	; (8006d9c <_svfprintf_r+0x76c>)
 8006cc4:	6020      	str	r0, [r4, #0]
 8006cc6:	2f10      	cmp	r7, #16
 8006cc8:	f103 0301 	add.w	r3, r3, #1
 8006ccc:	f104 0108 	add.w	r1, r4, #8
 8006cd0:	f300 82ed 	bgt.w	80072ae <_svfprintf_r+0xc7e>
 8006cd4:	6067      	str	r7, [r4, #4]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	4417      	add	r7, r2
 8006cda:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006cde:	f340 82f9 	ble.w	80072d4 <_svfprintf_r+0xca4>
 8006ce2:	aa22      	add	r2, sp, #136	; 0x88
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f003 f8f1 	bl	8009ece <__ssprint_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f040 8621 	bne.w	8007934 <_svfprintf_r+0x1304>
 8006cf2:	ac25      	add	r4, sp, #148	; 0x94
 8006cf4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006cf8:	b173      	cbz	r3, 8006d18 <_svfprintf_r+0x6e8>
 8006cfa:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	2301      	movs	r3, #1
 8006d02:	6063      	str	r3, [r4, #4]
 8006d04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d06:	3301      	adds	r3, #1
 8006d08:	9324      	str	r3, [sp, #144]	; 0x90
 8006d0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	2b07      	cmp	r3, #7
 8006d10:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d12:	f300 82e1 	bgt.w	80072d8 <_svfprintf_r+0xca8>
 8006d16:	3408      	adds	r4, #8
 8006d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d1a:	b16b      	cbz	r3, 8006d38 <_svfprintf_r+0x708>
 8006d1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	2302      	movs	r3, #2
 8006d22:	6063      	str	r3, [r4, #4]
 8006d24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d26:	3302      	adds	r3, #2
 8006d28:	9324      	str	r3, [sp, #144]	; 0x90
 8006d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	2b07      	cmp	r3, #7
 8006d30:	9323      	str	r3, [sp, #140]	; 0x8c
 8006d32:	f300 82db 	bgt.w	80072ec <_svfprintf_r+0xcbc>
 8006d36:	3408      	adds	r4, #8
 8006d38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d11f      	bne.n	8006d7e <_svfprintf_r+0x74e>
 8006d3e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006d42:	1a9f      	subs	r7, r3, r2
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	dd1a      	ble.n	8006d7e <_svfprintf_r+0x74e>
 8006d48:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006d4c:	4814      	ldr	r0, [pc, #80]	; (8006da0 <_svfprintf_r+0x770>)
 8006d4e:	6020      	str	r0, [r4, #0]
 8006d50:	2f10      	cmp	r7, #16
 8006d52:	f103 0301 	add.w	r3, r3, #1
 8006d56:	f104 0108 	add.w	r1, r4, #8
 8006d5a:	f300 82d1 	bgt.w	8007300 <_svfprintf_r+0xcd0>
 8006d5e:	6067      	str	r7, [r4, #4]
 8006d60:	2b07      	cmp	r3, #7
 8006d62:	4417      	add	r7, r2
 8006d64:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006d68:	f340 82dd 	ble.w	8007326 <_svfprintf_r+0xcf6>
 8006d6c:	aa22      	add	r2, sp, #136	; 0x88
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4650      	mov	r0, sl
 8006d72:	f003 f8ac 	bl	8009ece <__ssprint_r>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 85dc 	bne.w	8007934 <_svfprintf_r+0x1304>
 8006d7c:	ac25      	add	r4, sp, #148	; 0x94
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	1af6      	subs	r6, r6, r3
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	dd28      	ble.n	8006dd8 <_svfprintf_r+0x7a8>
 8006d86:	4f06      	ldr	r7, [pc, #24]	; (8006da0 <_svfprintf_r+0x770>)
 8006d88:	e00c      	b.n	8006da4 <_svfprintf_r+0x774>
 8006d8a:	bf00      	nop
 8006d8c:	0800bcb9 	.word	0x0800bcb9
 8006d90:	0800bca8 	.word	0x0800bca8
 8006d94:	40300000 	.word	0x40300000
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	0800bccc 	.word	0x0800bccc
 8006da0:	0800bcdc 	.word	0x0800bcdc
 8006da4:	6027      	str	r7, [r4, #0]
 8006da6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006daa:	2e10      	cmp	r6, #16
 8006dac:	f103 0301 	add.w	r3, r3, #1
 8006db0:	f104 0108 	add.w	r1, r4, #8
 8006db4:	f300 82b9 	bgt.w	800732a <_svfprintf_r+0xcfa>
 8006db8:	6066      	str	r6, [r4, #4]
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	4416      	add	r6, r2
 8006dbe:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8006dc2:	f340 82c5 	ble.w	8007350 <_svfprintf_r+0xd20>
 8006dc6:	aa22      	add	r2, sp, #136	; 0x88
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4650      	mov	r0, sl
 8006dcc:	f003 f87f 	bl	8009ece <__ssprint_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f040 85af 	bne.w	8007934 <_svfprintf_r+0x1304>
 8006dd6:	ac25      	add	r4, sp, #148	; 0x94
 8006dd8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ddc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006dde:	f040 82bd 	bne.w	800735c <_svfprintf_r+0xd2c>
 8006de2:	9b04      	ldr	r3, [sp, #16]
 8006de4:	f8c4 9000 	str.w	r9, [r4]
 8006de8:	441e      	add	r6, r3
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	9624      	str	r6, [sp, #144]	; 0x90
 8006dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006df0:	3301      	adds	r3, #1
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	9323      	str	r3, [sp, #140]	; 0x8c
 8006df6:	f300 82f6 	bgt.w	80073e6 <_svfprintf_r+0xdb6>
 8006dfa:	3408      	adds	r4, #8
 8006dfc:	f01b 0f04 	tst.w	fp, #4
 8006e00:	f040 857a 	bne.w	80078f8 <_svfprintf_r+0x12c8>
 8006e04:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8006e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e0a:	428a      	cmp	r2, r1
 8006e0c:	bfac      	ite	ge
 8006e0e:	189b      	addge	r3, r3, r2
 8006e10:	185b      	addlt	r3, r3, r1
 8006e12:	930c      	str	r3, [sp, #48]	; 0x30
 8006e14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e16:	b13b      	cbz	r3, 8006e28 <_svfprintf_r+0x7f8>
 8006e18:	aa22      	add	r2, sp, #136	; 0x88
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f003 f856 	bl	8009ece <__ssprint_r>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f040 8586 	bne.w	8007934 <_svfprintf_r+0x1304>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 859c 	bne.w	800796c <_svfprintf_r+0x133c>
 8006e34:	ac25      	add	r4, sp, #148	; 0x94
 8006e36:	e0ec      	b.n	8007012 <_svfprintf_r+0x9e2>
 8006e38:	9003      	str	r0, [sp, #12]
 8006e3a:	e62c      	b.n	8006a96 <_svfprintf_r+0x466>
 8006e3c:	9003      	str	r0, [sp, #12]
 8006e3e:	2306      	movs	r3, #6
 8006e40:	e61a      	b.n	8006a78 <_svfprintf_r+0x448>
 8006e42:	9003      	str	r0, [sp, #12]
 8006e44:	e627      	b.n	8006a96 <_svfprintf_r+0x466>
 8006e46:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e50:	eef0 8a67 	vmov.f32	s17, s15
 8006e54:	e62f      	b.n	8006ab6 <_svfprintf_r+0x486>
 8006e56:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006e5a:	e691      	b.n	8006b80 <_svfprintf_r+0x550>
 8006e5c:	f803 0b01 	strb.w	r0, [r3], #1
 8006e60:	1aca      	subs	r2, r1, r3
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	dafa      	bge.n	8006e5c <_svfprintf_r+0x82c>
 8006e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	f103 0301 	add.w	r3, r3, #1
 8006e70:	bfb8      	it	lt
 8006e72:	2300      	movlt	r3, #0
 8006e74:	441d      	add	r5, r3
 8006e76:	e693      	b.n	8006ba0 <_svfprintf_r+0x570>
 8006e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	18a9      	adds	r1, r5, r2
 8006e7e:	2030      	movs	r0, #48	; 0x30
 8006e80:	e7ee      	b.n	8006e60 <_svfprintf_r+0x830>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	2b46      	cmp	r3, #70	; 0x46
 8006e86:	d005      	beq.n	8006e94 <_svfprintf_r+0x864>
 8006e88:	2b45      	cmp	r3, #69	; 0x45
 8006e8a:	d11b      	bne.n	8006ec4 <_svfprintf_r+0x894>
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	1c5d      	adds	r5, r3, #1
 8006e90:	2102      	movs	r1, #2
 8006e92:	e001      	b.n	8006e98 <_svfprintf_r+0x868>
 8006e94:	9d04      	ldr	r5, [sp, #16]
 8006e96:	2103      	movs	r1, #3
 8006e98:	ab20      	add	r3, sp, #128	; 0x80
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	ab1d      	add	r3, sp, #116	; 0x74
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	ab1c      	add	r3, sp, #112	; 0x70
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8006eaa:	eef0 0a68 	vmov.f32	s1, s17
 8006eae:	f000 fe3f 	bl	8007b30 <_dtoa_r>
 8006eb2:	9b08      	ldr	r3, [sp, #32]
 8006eb4:	2b47      	cmp	r3, #71	; 0x47
 8006eb6:	4681      	mov	r9, r0
 8006eb8:	d106      	bne.n	8006ec8 <_svfprintf_r+0x898>
 8006eba:	f01b 0f01 	tst.w	fp, #1
 8006ebe:	d103      	bne.n	8006ec8 <_svfprintf_r+0x898>
 8006ec0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006ec2:	e66d      	b.n	8006ba0 <_svfprintf_r+0x570>
 8006ec4:	9d04      	ldr	r5, [sp, #16]
 8006ec6:	e7e3      	b.n	8006e90 <_svfprintf_r+0x860>
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	2b46      	cmp	r3, #70	; 0x46
 8006ecc:	eb09 0605 	add.w	r6, r9, r5
 8006ed0:	d10f      	bne.n	8006ef2 <_svfprintf_r+0x8c2>
 8006ed2:	f899 3000 	ldrb.w	r3, [r9]
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	d109      	bne.n	8006eee <_svfprintf_r+0x8be>
 8006eda:	ec51 0b18 	vmov	r0, r1, d8
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f7f9 fe01 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ee6:	b910      	cbnz	r0, 8006eee <_svfprintf_r+0x8be>
 8006ee8:	f1c5 0501 	rsb	r5, r5, #1
 8006eec:	951c      	str	r5, [sp, #112]	; 0x70
 8006eee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006ef0:	441e      	add	r6, r3
 8006ef2:	ec51 0b18 	vmov	r0, r1, d8
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f7f9 fdf5 	bl	8000ae8 <__aeabi_dcmpeq>
 8006efe:	b100      	cbz	r0, 8006f02 <_svfprintf_r+0x8d2>
 8006f00:	9620      	str	r6, [sp, #128]	; 0x80
 8006f02:	2230      	movs	r2, #48	; 0x30
 8006f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f06:	429e      	cmp	r6, r3
 8006f08:	d9da      	bls.n	8006ec0 <_svfprintf_r+0x890>
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	9120      	str	r1, [sp, #128]	; 0x80
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e7f8      	b.n	8006f04 <_svfprintf_r+0x8d4>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	2b46      	cmp	r3, #70	; 0x46
 8006f16:	f47f ae54 	bne.w	8006bc2 <_svfprintf_r+0x592>
 8006f1a:	9a04      	ldr	r2, [sp, #16]
 8006f1c:	f00b 0301 	and.w	r3, fp, #1
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	ea43 0302 	orr.w	r3, r3, r2
 8006f26:	dd1a      	ble.n	8006f5e <_svfprintf_r+0x92e>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d034      	beq.n	8006f96 <_svfprintf_r+0x966>
 8006f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f2e:	18eb      	adds	r3, r5, r3
 8006f30:	441a      	add	r2, r3
 8006f32:	9204      	str	r2, [sp, #16]
 8006f34:	2366      	movs	r3, #102	; 0x66
 8006f36:	9306      	str	r3, [sp, #24]
 8006f38:	e033      	b.n	8006fa2 <_svfprintf_r+0x972>
 8006f3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f3e:	f802 6b01 	strb.w	r6, [r2], #1
 8006f42:	e675      	b.n	8006c30 <_svfprintf_r+0x600>
 8006f44:	b941      	cbnz	r1, 8006f58 <_svfprintf_r+0x928>
 8006f46:	2230      	movs	r2, #48	; 0x30
 8006f48:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006f4c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006f50:	3330      	adds	r3, #48	; 0x30
 8006f52:	f802 3b01 	strb.w	r3, [r2], #1
 8006f56:	e677      	b.n	8006c48 <_svfprintf_r+0x618>
 8006f58:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006f5c:	e7f8      	b.n	8006f50 <_svfprintf_r+0x920>
 8006f5e:	b1e3      	cbz	r3, 8006f9a <_svfprintf_r+0x96a>
 8006f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f62:	9a04      	ldr	r2, [sp, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	e7e3      	b.n	8006f30 <_svfprintf_r+0x900>
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	db07      	blt.n	8006f7e <_svfprintf_r+0x94e>
 8006f6e:	f01b 0f01 	tst.w	fp, #1
 8006f72:	d02d      	beq.n	8006fd0 <_svfprintf_r+0x9a0>
 8006f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f76:	18eb      	adds	r3, r5, r3
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	2367      	movs	r3, #103	; 0x67
 8006f7c:	e7db      	b.n	8006f36 <_svfprintf_r+0x906>
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	4413      	add	r3, r2
 8006f86:	9304      	str	r3, [sp, #16]
 8006f88:	dcf7      	bgt.n	8006f7a <_svfprintf_r+0x94a>
 8006f8a:	9a04      	ldr	r2, [sp, #16]
 8006f8c:	f1c5 0301 	rsb	r3, r5, #1
 8006f90:	441a      	add	r2, r3
 8006f92:	9204      	str	r2, [sp, #16]
 8006f94:	e7f1      	b.n	8006f7a <_svfprintf_r+0x94a>
 8006f96:	9504      	str	r5, [sp, #16]
 8006f98:	e7cc      	b.n	8006f34 <_svfprintf_r+0x904>
 8006f9a:	2366      	movs	r3, #102	; 0x66
 8006f9c:	9306      	str	r3, [sp, #24]
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa8:	d025      	beq.n	8006ff6 <_svfprintf_r+0x9c6>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006fb2:	f77f ae61 	ble.w	8006c78 <_svfprintf_r+0x648>
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2bff      	cmp	r3, #255	; 0xff
 8006fbc:	d10a      	bne.n	8006fd4 <_svfprintf_r+0x9a4>
 8006fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fc4:	4413      	add	r3, r2
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	fb01 2303 	mla	r3, r1, r3, r2
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	e653      	b.n	8006c78 <_svfprintf_r+0x648>
 8006fd0:	9504      	str	r5, [sp, #16]
 8006fd2:	e7d2      	b.n	8006f7a <_svfprintf_r+0x94a>
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	daf2      	bge.n	8006fbe <_svfprintf_r+0x98e>
 8006fd8:	1aed      	subs	r5, r5, r3
 8006fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	b133      	cbz	r3, 8006fee <_svfprintf_r+0x9be>
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe8:	3301      	adds	r3, #1
 8006fea:	930a      	str	r3, [sp, #40]	; 0x28
 8006fec:	e7e3      	b.n	8006fb6 <_svfprintf_r+0x986>
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	9308      	str	r3, [sp, #32]
 8006ff4:	e7df      	b.n	8006fb6 <_svfprintf_r+0x986>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	9308      	str	r3, [sp, #32]
 8006ffa:	e63d      	b.n	8006c78 <_svfprintf_r+0x648>
 8006ffc:	1d33      	adds	r3, r6, #4
 8006ffe:	f01b 0f20 	tst.w	fp, #32
 8007002:	9307      	str	r3, [sp, #28]
 8007004:	d00a      	beq.n	800701c <_svfprintf_r+0x9ec>
 8007006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007008:	6833      	ldr	r3, [r6, #0]
 800700a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800700c:	17d2      	asrs	r2, r2, #31
 800700e:	e9c3 1200 	strd	r1, r2, [r3]
 8007012:	9e07      	ldr	r6, [sp, #28]
 8007014:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007018:	f7ff bb4a 	b.w	80066b0 <_svfprintf_r+0x80>
 800701c:	f01b 0f10 	tst.w	fp, #16
 8007020:	d003      	beq.n	800702a <_svfprintf_r+0x9fa>
 8007022:	6833      	ldr	r3, [r6, #0]
 8007024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e7f3      	b.n	8007012 <_svfprintf_r+0x9e2>
 800702a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800702e:	d003      	beq.n	8007038 <_svfprintf_r+0xa08>
 8007030:	6833      	ldr	r3, [r6, #0]
 8007032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	e7ec      	b.n	8007012 <_svfprintf_r+0x9e2>
 8007038:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800703c:	d0f1      	beq.n	8007022 <_svfprintf_r+0x9f2>
 800703e:	6833      	ldr	r3, [r6, #0]
 8007040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e7e5      	b.n	8007012 <_svfprintf_r+0x9e2>
 8007046:	f04b 0b10 	orr.w	fp, fp, #16
 800704a:	f01b 0320 	ands.w	r3, fp, #32
 800704e:	d01f      	beq.n	8007090 <_svfprintf_r+0xa60>
 8007050:	1df3      	adds	r3, r6, #7
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	461a      	mov	r2, r3
 8007058:	685d      	ldr	r5, [r3, #4]
 800705a:	f852 6b08 	ldr.w	r6, [r2], #8
 800705e:	9207      	str	r2, [sp, #28]
 8007060:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	3201      	adds	r2, #1
 8007070:	f000 848d 	beq.w	800798e <_svfprintf_r+0x135e>
 8007074:	ea56 0205 	orrs.w	r2, r6, r5
 8007078:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 800707c:	f040 848c 	bne.w	8007998 <_svfprintf_r+0x1368>
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	2a00      	cmp	r2, #0
 8007084:	f000 80f9 	beq.w	800727a <_svfprintf_r+0xc4a>
 8007088:	2b01      	cmp	r3, #1
 800708a:	f040 8488 	bne.w	800799e <_svfprintf_r+0x136e>
 800708e:	e09f      	b.n	80071d0 <_svfprintf_r+0xba0>
 8007090:	4632      	mov	r2, r6
 8007092:	f01b 0510 	ands.w	r5, fp, #16
 8007096:	f852 6b04 	ldr.w	r6, [r2], #4
 800709a:	9207      	str	r2, [sp, #28]
 800709c:	d001      	beq.n	80070a2 <_svfprintf_r+0xa72>
 800709e:	461d      	mov	r5, r3
 80070a0:	e7de      	b.n	8007060 <_svfprintf_r+0xa30>
 80070a2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80070a6:	d001      	beq.n	80070ac <_svfprintf_r+0xa7c>
 80070a8:	b2b6      	uxth	r6, r6
 80070aa:	e7d9      	b.n	8007060 <_svfprintf_r+0xa30>
 80070ac:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80070b0:	d0d6      	beq.n	8007060 <_svfprintf_r+0xa30>
 80070b2:	b2f6      	uxtb	r6, r6
 80070b4:	e7f3      	b.n	800709e <_svfprintf_r+0xa6e>
 80070b6:	4633      	mov	r3, r6
 80070b8:	2278      	movs	r2, #120	; 0x78
 80070ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	2330      	movs	r3, #48	; 0x30
 80070c2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80070c6:	4ba3      	ldr	r3, [pc, #652]	; (8007354 <_svfprintf_r+0xd24>)
 80070c8:	9316      	str	r3, [sp, #88]	; 0x58
 80070ca:	2500      	movs	r5, #0
 80070cc:	f04b 0b02 	orr.w	fp, fp, #2
 80070d0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80070d4:	2302      	movs	r3, #2
 80070d6:	9206      	str	r2, [sp, #24]
 80070d8:	e7c5      	b.n	8007066 <_svfprintf_r+0xa36>
 80070da:	4633      	mov	r3, r6
 80070dc:	2500      	movs	r5, #0
 80070de:	f853 9b04 	ldr.w	r9, [r3], #4
 80070e2:	9307      	str	r3, [sp, #28]
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80070ea:	1c58      	adds	r0, r3, #1
 80070ec:	d010      	beq.n	8007110 <_svfprintf_r+0xae0>
 80070ee:	461a      	mov	r2, r3
 80070f0:	4629      	mov	r1, r5
 80070f2:	4648      	mov	r0, r9
 80070f4:	f7f9 f884 	bl	8000200 <memchr>
 80070f8:	9003      	str	r0, [sp, #12]
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f000 80d4 	beq.w	80072a8 <_svfprintf_r+0xc78>
 8007100:	eba0 0309 	sub.w	r3, r0, r9
 8007104:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8007108:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800710c:	462e      	mov	r6, r5
 800710e:	e5bb      	b.n	8006c88 <_svfprintf_r+0x658>
 8007110:	4648      	mov	r0, r9
 8007112:	f7f9 f867 	bl	80001e4 <strlen>
 8007116:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800711a:	e45f      	b.n	80069dc <_svfprintf_r+0x3ac>
 800711c:	f04b 0b10 	orr.w	fp, fp, #16
 8007120:	f01b 0320 	ands.w	r3, fp, #32
 8007124:	d009      	beq.n	800713a <_svfprintf_r+0xb0a>
 8007126:	1df3      	adds	r3, r6, #7
 8007128:	f023 0307 	bic.w	r3, r3, #7
 800712c:	461a      	mov	r2, r3
 800712e:	685d      	ldr	r5, [r3, #4]
 8007130:	f852 6b08 	ldr.w	r6, [r2], #8
 8007134:	9207      	str	r2, [sp, #28]
 8007136:	2301      	movs	r3, #1
 8007138:	e795      	b.n	8007066 <_svfprintf_r+0xa36>
 800713a:	4632      	mov	r2, r6
 800713c:	f01b 0510 	ands.w	r5, fp, #16
 8007140:	f852 6b04 	ldr.w	r6, [r2], #4
 8007144:	9207      	str	r2, [sp, #28]
 8007146:	d001      	beq.n	800714c <_svfprintf_r+0xb1c>
 8007148:	461d      	mov	r5, r3
 800714a:	e7f4      	b.n	8007136 <_svfprintf_r+0xb06>
 800714c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8007150:	d001      	beq.n	8007156 <_svfprintf_r+0xb26>
 8007152:	b2b6      	uxth	r6, r6
 8007154:	e7ef      	b.n	8007136 <_svfprintf_r+0xb06>
 8007156:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800715a:	d0ec      	beq.n	8007136 <_svfprintf_r+0xb06>
 800715c:	b2f6      	uxtb	r6, r6
 800715e:	e7f3      	b.n	8007148 <_svfprintf_r+0xb18>
 8007160:	4b7d      	ldr	r3, [pc, #500]	; (8007358 <_svfprintf_r+0xd28>)
 8007162:	9316      	str	r3, [sp, #88]	; 0x58
 8007164:	f01b 0320 	ands.w	r3, fp, #32
 8007168:	d01b      	beq.n	80071a2 <_svfprintf_r+0xb72>
 800716a:	1df3      	adds	r3, r6, #7
 800716c:	f023 0307 	bic.w	r3, r3, #7
 8007170:	461a      	mov	r2, r3
 8007172:	685d      	ldr	r5, [r3, #4]
 8007174:	f852 6b08 	ldr.w	r6, [r2], #8
 8007178:	9207      	str	r2, [sp, #28]
 800717a:	f01b 0f01 	tst.w	fp, #1
 800717e:	d00a      	beq.n	8007196 <_svfprintf_r+0xb66>
 8007180:	ea56 0305 	orrs.w	r3, r6, r5
 8007184:	d007      	beq.n	8007196 <_svfprintf_r+0xb66>
 8007186:	2330      	movs	r3, #48	; 0x30
 8007188:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8007192:	f04b 0b02 	orr.w	fp, fp, #2
 8007196:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800719a:	2302      	movs	r3, #2
 800719c:	e763      	b.n	8007066 <_svfprintf_r+0xa36>
 800719e:	4b6d      	ldr	r3, [pc, #436]	; (8007354 <_svfprintf_r+0xd24>)
 80071a0:	e7df      	b.n	8007162 <_svfprintf_r+0xb32>
 80071a2:	4632      	mov	r2, r6
 80071a4:	f01b 0510 	ands.w	r5, fp, #16
 80071a8:	f852 6b04 	ldr.w	r6, [r2], #4
 80071ac:	9207      	str	r2, [sp, #28]
 80071ae:	d001      	beq.n	80071b4 <_svfprintf_r+0xb84>
 80071b0:	461d      	mov	r5, r3
 80071b2:	e7e2      	b.n	800717a <_svfprintf_r+0xb4a>
 80071b4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80071b8:	d001      	beq.n	80071be <_svfprintf_r+0xb8e>
 80071ba:	b2b6      	uxth	r6, r6
 80071bc:	e7dd      	b.n	800717a <_svfprintf_r+0xb4a>
 80071be:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80071c2:	d0da      	beq.n	800717a <_svfprintf_r+0xb4a>
 80071c4:	b2f6      	uxtb	r6, r6
 80071c6:	e7f3      	b.n	80071b0 <_svfprintf_r+0xb80>
 80071c8:	2e0a      	cmp	r6, #10
 80071ca:	f175 0300 	sbcs.w	r3, r5, #0
 80071ce:	d205      	bcs.n	80071dc <_svfprintf_r+0xbac>
 80071d0:	3630      	adds	r6, #48	; 0x30
 80071d2:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80071d6:	f20d 1937 	addw	r9, sp, #311	; 0x137
 80071da:	e3fb      	b.n	80079d4 <_svfprintf_r+0x13a4>
 80071dc:	2300      	movs	r3, #0
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 80071e4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80071e8:	9303      	str	r3, [sp, #12]
 80071ea:	220a      	movs	r2, #10
 80071ec:	2300      	movs	r3, #0
 80071ee:	4630      	mov	r0, r6
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f9 fd59 	bl	8000ca8 <__aeabi_uldivmod>
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	3230      	adds	r2, #48	; 0x30
 8007200:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 8007204:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8007208:	b1d3      	cbz	r3, 8007240 <_svfprintf_r+0xc10>
 800720a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720c:	9a05      	ldr	r2, [sp, #20]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d115      	bne.n	8007240 <_svfprintf_r+0xc10>
 8007214:	2aff      	cmp	r2, #255	; 0xff
 8007216:	d013      	beq.n	8007240 <_svfprintf_r+0xc10>
 8007218:	2e0a      	cmp	r6, #10
 800721a:	f175 0300 	sbcs.w	r3, r5, #0
 800721e:	d30f      	bcc.n	8007240 <_svfprintf_r+0xc10>
 8007220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007222:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007224:	eba9 0903 	sub.w	r9, r9, r3
 8007228:	461a      	mov	r2, r3
 800722a:	4648      	mov	r0, r9
 800722c:	f002 fe3c 	bl	8009ea8 <strncpy>
 8007230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	b11b      	cbz	r3, 800723e <_svfprintf_r+0xc0e>
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007238:	3301      	adds	r3, #1
 800723a:	930a      	str	r3, [sp, #40]	; 0x28
 800723c:	2300      	movs	r3, #0
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	2300      	movs	r3, #0
 8007242:	220a      	movs	r2, #10
 8007244:	4630      	mov	r0, r6
 8007246:	4629      	mov	r1, r5
 8007248:	f7f9 fd2e 	bl	8000ca8 <__aeabi_uldivmod>
 800724c:	2e0a      	cmp	r6, #10
 800724e:	f175 0300 	sbcs.w	r3, r5, #0
 8007252:	f0c0 83bf 	bcc.w	80079d4 <_svfprintf_r+0x13a4>
 8007256:	4606      	mov	r6, r0
 8007258:	460d      	mov	r5, r1
 800725a:	46cb      	mov	fp, r9
 800725c:	e7c5      	b.n	80071ea <_svfprintf_r+0xbba>
 800725e:	f006 030f 	and.w	r3, r6, #15
 8007262:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007264:	0936      	lsrs	r6, r6, #4
 8007266:	5cd3      	ldrb	r3, [r2, r3]
 8007268:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800726c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8007270:	092d      	lsrs	r5, r5, #4
 8007272:	ea56 0305 	orrs.w	r3, r6, r5
 8007276:	d1f2      	bne.n	800725e <_svfprintf_r+0xc2e>
 8007278:	e3ac      	b.n	80079d4 <_svfprintf_r+0x13a4>
 800727a:	b933      	cbnz	r3, 800728a <_svfprintf_r+0xc5a>
 800727c:	f01b 0f01 	tst.w	fp, #1
 8007280:	d003      	beq.n	800728a <_svfprintf_r+0xc5a>
 8007282:	2330      	movs	r3, #48	; 0x30
 8007284:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8007288:	e7a5      	b.n	80071d6 <_svfprintf_r+0xba6>
 800728a:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800728e:	e3a1      	b.n	80079d4 <_svfprintf_r+0x13a4>
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8370 	beq.w	8007978 <_svfprintf_r+0x1348>
 8007298:	2000      	movs	r0, #0
 800729a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800729e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80072a2:	9607      	str	r6, [sp, #28]
 80072a4:	f7ff bb29 	b.w	80068fa <_svfprintf_r+0x2ca>
 80072a8:	9e03      	ldr	r6, [sp, #12]
 80072aa:	f7ff bb98 	b.w	80069de <_svfprintf_r+0x3ae>
 80072ae:	2010      	movs	r0, #16
 80072b0:	4402      	add	r2, r0
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80072b8:	6060      	str	r0, [r4, #4]
 80072ba:	dd08      	ble.n	80072ce <_svfprintf_r+0xc9e>
 80072bc:	aa22      	add	r2, sp, #136	; 0x88
 80072be:	4641      	mov	r1, r8
 80072c0:	4650      	mov	r0, sl
 80072c2:	f002 fe04 	bl	8009ece <__ssprint_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f040 8334 	bne.w	8007934 <_svfprintf_r+0x1304>
 80072cc:	a925      	add	r1, sp, #148	; 0x94
 80072ce:	3f10      	subs	r7, #16
 80072d0:	460c      	mov	r4, r1
 80072d2:	e4f4      	b.n	8006cbe <_svfprintf_r+0x68e>
 80072d4:	460c      	mov	r4, r1
 80072d6:	e50d      	b.n	8006cf4 <_svfprintf_r+0x6c4>
 80072d8:	aa22      	add	r2, sp, #136	; 0x88
 80072da:	4641      	mov	r1, r8
 80072dc:	4650      	mov	r0, sl
 80072de:	f002 fdf6 	bl	8009ece <__ssprint_r>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	f040 8326 	bne.w	8007934 <_svfprintf_r+0x1304>
 80072e8:	ac25      	add	r4, sp, #148	; 0x94
 80072ea:	e515      	b.n	8006d18 <_svfprintf_r+0x6e8>
 80072ec:	aa22      	add	r2, sp, #136	; 0x88
 80072ee:	4641      	mov	r1, r8
 80072f0:	4650      	mov	r0, sl
 80072f2:	f002 fdec 	bl	8009ece <__ssprint_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f040 831c 	bne.w	8007934 <_svfprintf_r+0x1304>
 80072fc:	ac25      	add	r4, sp, #148	; 0x94
 80072fe:	e51b      	b.n	8006d38 <_svfprintf_r+0x708>
 8007300:	2010      	movs	r0, #16
 8007302:	4402      	add	r2, r0
 8007304:	2b07      	cmp	r3, #7
 8007306:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800730a:	6060      	str	r0, [r4, #4]
 800730c:	dd08      	ble.n	8007320 <_svfprintf_r+0xcf0>
 800730e:	aa22      	add	r2, sp, #136	; 0x88
 8007310:	4641      	mov	r1, r8
 8007312:	4650      	mov	r0, sl
 8007314:	f002 fddb 	bl	8009ece <__ssprint_r>
 8007318:	2800      	cmp	r0, #0
 800731a:	f040 830b 	bne.w	8007934 <_svfprintf_r+0x1304>
 800731e:	a925      	add	r1, sp, #148	; 0x94
 8007320:	3f10      	subs	r7, #16
 8007322:	460c      	mov	r4, r1
 8007324:	e510      	b.n	8006d48 <_svfprintf_r+0x718>
 8007326:	460c      	mov	r4, r1
 8007328:	e529      	b.n	8006d7e <_svfprintf_r+0x74e>
 800732a:	2010      	movs	r0, #16
 800732c:	4402      	add	r2, r0
 800732e:	2b07      	cmp	r3, #7
 8007330:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	dd08      	ble.n	800734a <_svfprintf_r+0xd1a>
 8007338:	aa22      	add	r2, sp, #136	; 0x88
 800733a:	4641      	mov	r1, r8
 800733c:	4650      	mov	r0, sl
 800733e:	f002 fdc6 	bl	8009ece <__ssprint_r>
 8007342:	2800      	cmp	r0, #0
 8007344:	f040 82f6 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007348:	a925      	add	r1, sp, #148	; 0x94
 800734a:	3e10      	subs	r6, #16
 800734c:	460c      	mov	r4, r1
 800734e:	e529      	b.n	8006da4 <_svfprintf_r+0x774>
 8007350:	460c      	mov	r4, r1
 8007352:	e541      	b.n	8006dd8 <_svfprintf_r+0x7a8>
 8007354:	0800bca8 	.word	0x0800bca8
 8007358:	0800bcb9 	.word	0x0800bcb9
 800735c:	9b06      	ldr	r3, [sp, #24]
 800735e:	2b65      	cmp	r3, #101	; 0x65
 8007360:	f340 8230 	ble.w	80077c4 <_svfprintf_r+0x1194>
 8007364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	f7f9 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007370:	2800      	cmp	r0, #0
 8007372:	d068      	beq.n	8007446 <_svfprintf_r+0xe16>
 8007374:	4b6d      	ldr	r3, [pc, #436]	; (800752c <_svfprintf_r+0xefc>)
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	2301      	movs	r3, #1
 800737a:	441e      	add	r6, r3
 800737c:	6063      	str	r3, [r4, #4]
 800737e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007380:	9624      	str	r6, [sp, #144]	; 0x90
 8007382:	3301      	adds	r3, #1
 8007384:	2b07      	cmp	r3, #7
 8007386:	9323      	str	r3, [sp, #140]	; 0x8c
 8007388:	dc37      	bgt.n	80073fa <_svfprintf_r+0xdca>
 800738a:	3408      	adds	r4, #8
 800738c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800738e:	9a05      	ldr	r2, [sp, #20]
 8007390:	4293      	cmp	r3, r2
 8007392:	db03      	blt.n	800739c <_svfprintf_r+0xd6c>
 8007394:	f01b 0f01 	tst.w	fp, #1
 8007398:	f43f ad30 	beq.w	8006dfc <_svfprintf_r+0x7cc>
 800739c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073a4:	6063      	str	r3, [r4, #4]
 80073a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80073a8:	4413      	add	r3, r2
 80073aa:	9324      	str	r3, [sp, #144]	; 0x90
 80073ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073ae:	3301      	adds	r3, #1
 80073b0:	2b07      	cmp	r3, #7
 80073b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80073b4:	dc2b      	bgt.n	800740e <_svfprintf_r+0xdde>
 80073b6:	3408      	adds	r4, #8
 80073b8:	9b05      	ldr	r3, [sp, #20]
 80073ba:	1e5d      	subs	r5, r3, #1
 80073bc:	2d00      	cmp	r5, #0
 80073be:	f77f ad1d 	ble.w	8006dfc <_svfprintf_r+0x7cc>
 80073c2:	4e5b      	ldr	r6, [pc, #364]	; (8007530 <_svfprintf_r+0xf00>)
 80073c4:	2710      	movs	r7, #16
 80073c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80073ca:	2d10      	cmp	r5, #16
 80073cc:	f103 0301 	add.w	r3, r3, #1
 80073d0:	f104 0108 	add.w	r1, r4, #8
 80073d4:	6026      	str	r6, [r4, #0]
 80073d6:	dc24      	bgt.n	8007422 <_svfprintf_r+0xdf2>
 80073d8:	6065      	str	r5, [r4, #4]
 80073da:	2b07      	cmp	r3, #7
 80073dc:	4415      	add	r5, r2
 80073de:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80073e2:	f340 8286 	ble.w	80078f2 <_svfprintf_r+0x12c2>
 80073e6:	aa22      	add	r2, sp, #136	; 0x88
 80073e8:	4641      	mov	r1, r8
 80073ea:	4650      	mov	r0, sl
 80073ec:	f002 fd6f 	bl	8009ece <__ssprint_r>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f040 829f 	bne.w	8007934 <_svfprintf_r+0x1304>
 80073f6:	ac25      	add	r4, sp, #148	; 0x94
 80073f8:	e500      	b.n	8006dfc <_svfprintf_r+0x7cc>
 80073fa:	aa22      	add	r2, sp, #136	; 0x88
 80073fc:	4641      	mov	r1, r8
 80073fe:	4650      	mov	r0, sl
 8007400:	f002 fd65 	bl	8009ece <__ssprint_r>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 8295 	bne.w	8007934 <_svfprintf_r+0x1304>
 800740a:	ac25      	add	r4, sp, #148	; 0x94
 800740c:	e7be      	b.n	800738c <_svfprintf_r+0xd5c>
 800740e:	aa22      	add	r2, sp, #136	; 0x88
 8007410:	4641      	mov	r1, r8
 8007412:	4650      	mov	r0, sl
 8007414:	f002 fd5b 	bl	8009ece <__ssprint_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	f040 828b 	bne.w	8007934 <_svfprintf_r+0x1304>
 800741e:	ac25      	add	r4, sp, #148	; 0x94
 8007420:	e7ca      	b.n	80073b8 <_svfprintf_r+0xd88>
 8007422:	3210      	adds	r2, #16
 8007424:	2b07      	cmp	r3, #7
 8007426:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800742a:	6067      	str	r7, [r4, #4]
 800742c:	dd08      	ble.n	8007440 <_svfprintf_r+0xe10>
 800742e:	aa22      	add	r2, sp, #136	; 0x88
 8007430:	4641      	mov	r1, r8
 8007432:	4650      	mov	r0, sl
 8007434:	f002 fd4b 	bl	8009ece <__ssprint_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	f040 827b 	bne.w	8007934 <_svfprintf_r+0x1304>
 800743e:	a925      	add	r1, sp, #148	; 0x94
 8007440:	3d10      	subs	r5, #16
 8007442:	460c      	mov	r4, r1
 8007444:	e7bf      	b.n	80073c6 <_svfprintf_r+0xd96>
 8007446:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc73      	bgt.n	8007534 <_svfprintf_r+0xf04>
 800744c:	4b37      	ldr	r3, [pc, #220]	; (800752c <_svfprintf_r+0xefc>)
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	2301      	movs	r3, #1
 8007452:	441e      	add	r6, r3
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007458:	9624      	str	r6, [sp, #144]	; 0x90
 800745a:	3301      	adds	r3, #1
 800745c:	2b07      	cmp	r3, #7
 800745e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007460:	dc3d      	bgt.n	80074de <_svfprintf_r+0xeae>
 8007462:	3408      	adds	r4, #8
 8007464:	9905      	ldr	r1, [sp, #20]
 8007466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007468:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800746a:	430a      	orrs	r2, r1
 800746c:	f00b 0101 	and.w	r1, fp, #1
 8007470:	430a      	orrs	r2, r1
 8007472:	f43f acc3 	beq.w	8006dfc <_svfprintf_r+0x7cc>
 8007476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800747c:	6062      	str	r2, [r4, #4]
 800747e:	4413      	add	r3, r2
 8007480:	9324      	str	r3, [sp, #144]	; 0x90
 8007482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007484:	3301      	adds	r3, #1
 8007486:	2b07      	cmp	r3, #7
 8007488:	9323      	str	r3, [sp, #140]	; 0x8c
 800748a:	dc32      	bgt.n	80074f2 <_svfprintf_r+0xec2>
 800748c:	3408      	adds	r4, #8
 800748e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007490:	2d00      	cmp	r5, #0
 8007492:	da1b      	bge.n	80074cc <_svfprintf_r+0xe9c>
 8007494:	4e26      	ldr	r6, [pc, #152]	; (8007530 <_svfprintf_r+0xf00>)
 8007496:	426d      	negs	r5, r5
 8007498:	4623      	mov	r3, r4
 800749a:	2710      	movs	r7, #16
 800749c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80074a0:	2d10      	cmp	r5, #16
 80074a2:	f102 0201 	add.w	r2, r2, #1
 80074a6:	f104 0408 	add.w	r4, r4, #8
 80074aa:	601e      	str	r6, [r3, #0]
 80074ac:	dc2b      	bgt.n	8007506 <_svfprintf_r+0xed6>
 80074ae:	605d      	str	r5, [r3, #4]
 80074b0:	2a07      	cmp	r2, #7
 80074b2:	440d      	add	r5, r1
 80074b4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80074b8:	dd08      	ble.n	80074cc <_svfprintf_r+0xe9c>
 80074ba:	aa22      	add	r2, sp, #136	; 0x88
 80074bc:	4641      	mov	r1, r8
 80074be:	4650      	mov	r0, sl
 80074c0:	f002 fd05 	bl	8009ece <__ssprint_r>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f040 8235 	bne.w	8007934 <_svfprintf_r+0x1304>
 80074ca:	ac25      	add	r4, sp, #148	; 0x94
 80074cc:	9b05      	ldr	r3, [sp, #20]
 80074ce:	9a05      	ldr	r2, [sp, #20]
 80074d0:	6063      	str	r3, [r4, #4]
 80074d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80074d4:	f8c4 9000 	str.w	r9, [r4]
 80074d8:	4413      	add	r3, r2
 80074da:	9324      	str	r3, [sp, #144]	; 0x90
 80074dc:	e487      	b.n	8006dee <_svfprintf_r+0x7be>
 80074de:	aa22      	add	r2, sp, #136	; 0x88
 80074e0:	4641      	mov	r1, r8
 80074e2:	4650      	mov	r0, sl
 80074e4:	f002 fcf3 	bl	8009ece <__ssprint_r>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f040 8223 	bne.w	8007934 <_svfprintf_r+0x1304>
 80074ee:	ac25      	add	r4, sp, #148	; 0x94
 80074f0:	e7b8      	b.n	8007464 <_svfprintf_r+0xe34>
 80074f2:	aa22      	add	r2, sp, #136	; 0x88
 80074f4:	4641      	mov	r1, r8
 80074f6:	4650      	mov	r0, sl
 80074f8:	f002 fce9 	bl	8009ece <__ssprint_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f040 8219 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007502:	ac25      	add	r4, sp, #148	; 0x94
 8007504:	e7c3      	b.n	800748e <_svfprintf_r+0xe5e>
 8007506:	3110      	adds	r1, #16
 8007508:	2a07      	cmp	r2, #7
 800750a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800750e:	605f      	str	r7, [r3, #4]
 8007510:	dd08      	ble.n	8007524 <_svfprintf_r+0xef4>
 8007512:	aa22      	add	r2, sp, #136	; 0x88
 8007514:	4641      	mov	r1, r8
 8007516:	4650      	mov	r0, sl
 8007518:	f002 fcd9 	bl	8009ece <__ssprint_r>
 800751c:	2800      	cmp	r0, #0
 800751e:	f040 8209 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007522:	ac25      	add	r4, sp, #148	; 0x94
 8007524:	3d10      	subs	r5, #16
 8007526:	4623      	mov	r3, r4
 8007528:	e7b8      	b.n	800749c <_svfprintf_r+0xe6c>
 800752a:	bf00      	nop
 800752c:	0800bcca 	.word	0x0800bcca
 8007530:	0800bcdc 	.word	0x0800bcdc
 8007534:	9f05      	ldr	r7, [sp, #20]
 8007536:	42af      	cmp	r7, r5
 8007538:	bfa8      	it	ge
 800753a:	462f      	movge	r7, r5
 800753c:	2f00      	cmp	r7, #0
 800753e:	dd0a      	ble.n	8007556 <_svfprintf_r+0xf26>
 8007540:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007542:	3301      	adds	r3, #1
 8007544:	443e      	add	r6, r7
 8007546:	2b07      	cmp	r3, #7
 8007548:	e9c4 9700 	strd	r9, r7, [r4]
 800754c:	9624      	str	r6, [sp, #144]	; 0x90
 800754e:	9323      	str	r3, [sp, #140]	; 0x8c
 8007550:	f300 8085 	bgt.w	800765e <_svfprintf_r+0x102e>
 8007554:	3408      	adds	r4, #8
 8007556:	2f00      	cmp	r7, #0
 8007558:	bfac      	ite	ge
 800755a:	1bee      	subge	r6, r5, r7
 800755c:	462e      	movlt	r6, r5
 800755e:	2e00      	cmp	r6, #0
 8007560:	dd19      	ble.n	8007596 <_svfprintf_r+0xf66>
 8007562:	4f97      	ldr	r7, [pc, #604]	; (80077c0 <_svfprintf_r+0x1190>)
 8007564:	6027      	str	r7, [r4, #0]
 8007566:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800756a:	2e10      	cmp	r6, #16
 800756c:	f103 0301 	add.w	r3, r3, #1
 8007570:	f104 0108 	add.w	r1, r4, #8
 8007574:	dc7d      	bgt.n	8007672 <_svfprintf_r+0x1042>
 8007576:	6066      	str	r6, [r4, #4]
 8007578:	2b07      	cmp	r3, #7
 800757a:	4416      	add	r6, r2
 800757c:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007580:	f340 808a 	ble.w	8007698 <_svfprintf_r+0x1068>
 8007584:	aa22      	add	r2, sp, #136	; 0x88
 8007586:	4641      	mov	r1, r8
 8007588:	4650      	mov	r0, sl
 800758a:	f002 fca0 	bl	8009ece <__ssprint_r>
 800758e:	2800      	cmp	r0, #0
 8007590:	f040 81d0 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007594:	ac25      	add	r4, sp, #148	; 0x94
 8007596:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800759a:	444d      	add	r5, r9
 800759c:	d00a      	beq.n	80075b4 <_svfprintf_r+0xf84>
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d17b      	bne.n	800769c <_svfprintf_r+0x106c>
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d17b      	bne.n	80076a2 <_svfprintf_r+0x1072>
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	444b      	add	r3, r9
 80075ae:	429d      	cmp	r5, r3
 80075b0:	bf28      	it	cs
 80075b2:	461d      	movcs	r5, r3
 80075b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80075b6:	9a05      	ldr	r2, [sp, #20]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	db02      	blt.n	80075c2 <_svfprintf_r+0xf92>
 80075bc:	f01b 0f01 	tst.w	fp, #1
 80075c0:	d00e      	beq.n	80075e0 <_svfprintf_r+0xfb0>
 80075c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075ca:	6063      	str	r3, [r4, #4]
 80075cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075ce:	4413      	add	r3, r2
 80075d0:	9324      	str	r3, [sp, #144]	; 0x90
 80075d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075d4:	3301      	adds	r3, #1
 80075d6:	2b07      	cmp	r3, #7
 80075d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80075da:	f300 80dd 	bgt.w	8007798 <_svfprintf_r+0x1168>
 80075de:	3408      	adds	r4, #8
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80075e4:	eb09 0203 	add.w	r2, r9, r3
 80075e8:	1b9e      	subs	r6, r3, r6
 80075ea:	1b52      	subs	r2, r2, r5
 80075ec:	4296      	cmp	r6, r2
 80075ee:	bfa8      	it	ge
 80075f0:	4616      	movge	r6, r2
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	dd0b      	ble.n	800760e <_svfprintf_r+0xfde>
 80075f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075f8:	4433      	add	r3, r6
 80075fa:	9324      	str	r3, [sp, #144]	; 0x90
 80075fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075fe:	3301      	adds	r3, #1
 8007600:	2b07      	cmp	r3, #7
 8007602:	e9c4 5600 	strd	r5, r6, [r4]
 8007606:	9323      	str	r3, [sp, #140]	; 0x8c
 8007608:	f300 80d0 	bgt.w	80077ac <_svfprintf_r+0x117c>
 800760c:	3408      	adds	r4, #8
 800760e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007610:	9b05      	ldr	r3, [sp, #20]
 8007612:	2e00      	cmp	r6, #0
 8007614:	eba3 0505 	sub.w	r5, r3, r5
 8007618:	bfa8      	it	ge
 800761a:	1bad      	subge	r5, r5, r6
 800761c:	2d00      	cmp	r5, #0
 800761e:	f77f abed 	ble.w	8006dfc <_svfprintf_r+0x7cc>
 8007622:	4e67      	ldr	r6, [pc, #412]	; (80077c0 <_svfprintf_r+0x1190>)
 8007624:	2710      	movs	r7, #16
 8007626:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800762a:	2d10      	cmp	r5, #16
 800762c:	f103 0301 	add.w	r3, r3, #1
 8007630:	f104 0108 	add.w	r1, r4, #8
 8007634:	6026      	str	r6, [r4, #0]
 8007636:	f77f aecf 	ble.w	80073d8 <_svfprintf_r+0xda8>
 800763a:	3210      	adds	r2, #16
 800763c:	2b07      	cmp	r3, #7
 800763e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007642:	6067      	str	r7, [r4, #4]
 8007644:	dd08      	ble.n	8007658 <_svfprintf_r+0x1028>
 8007646:	aa22      	add	r2, sp, #136	; 0x88
 8007648:	4641      	mov	r1, r8
 800764a:	4650      	mov	r0, sl
 800764c:	f002 fc3f 	bl	8009ece <__ssprint_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	f040 816f 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007656:	a925      	add	r1, sp, #148	; 0x94
 8007658:	3d10      	subs	r5, #16
 800765a:	460c      	mov	r4, r1
 800765c:	e7e3      	b.n	8007626 <_svfprintf_r+0xff6>
 800765e:	aa22      	add	r2, sp, #136	; 0x88
 8007660:	4641      	mov	r1, r8
 8007662:	4650      	mov	r0, sl
 8007664:	f002 fc33 	bl	8009ece <__ssprint_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	f040 8163 	bne.w	8007934 <_svfprintf_r+0x1304>
 800766e:	ac25      	add	r4, sp, #148	; 0x94
 8007670:	e771      	b.n	8007556 <_svfprintf_r+0xf26>
 8007672:	2010      	movs	r0, #16
 8007674:	4402      	add	r2, r0
 8007676:	2b07      	cmp	r3, #7
 8007678:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800767c:	6060      	str	r0, [r4, #4]
 800767e:	dd08      	ble.n	8007692 <_svfprintf_r+0x1062>
 8007680:	aa22      	add	r2, sp, #136	; 0x88
 8007682:	4641      	mov	r1, r8
 8007684:	4650      	mov	r0, sl
 8007686:	f002 fc22 	bl	8009ece <__ssprint_r>
 800768a:	2800      	cmp	r0, #0
 800768c:	f040 8152 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007690:	a925      	add	r1, sp, #148	; 0x94
 8007692:	3e10      	subs	r6, #16
 8007694:	460c      	mov	r4, r1
 8007696:	e765      	b.n	8007564 <_svfprintf_r+0xf34>
 8007698:	460c      	mov	r4, r1
 800769a:	e77c      	b.n	8007596 <_svfprintf_r+0xf66>
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04a      	beq.n	8007738 <_svfprintf_r+0x1108>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076b0:	6063      	str	r3, [r4, #4]
 80076b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076b4:	4413      	add	r3, r2
 80076b6:	9324      	str	r3, [sp, #144]	; 0x90
 80076b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ba:	3301      	adds	r3, #1
 80076bc:	2b07      	cmp	r3, #7
 80076be:	9323      	str	r3, [sp, #140]	; 0x8c
 80076c0:	dc41      	bgt.n	8007746 <_svfprintf_r+0x1116>
 80076c2:	3408      	adds	r4, #8
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c8:	eb09 0703 	add.w	r7, r9, r3
 80076cc:	1b7b      	subs	r3, r7, r5
 80076ce:	7817      	ldrb	r7, [r2, #0]
 80076d0:	429f      	cmp	r7, r3
 80076d2:	bfa8      	it	ge
 80076d4:	461f      	movge	r7, r3
 80076d6:	2f00      	cmp	r7, #0
 80076d8:	dd0a      	ble.n	80076f0 <_svfprintf_r+0x10c0>
 80076da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076dc:	443b      	add	r3, r7
 80076de:	9324      	str	r3, [sp, #144]	; 0x90
 80076e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076e2:	3301      	adds	r3, #1
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	e9c4 5700 	strd	r5, r7, [r4]
 80076ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80076ec:	dc35      	bgt.n	800775a <_svfprintf_r+0x112a>
 80076ee:	3408      	adds	r4, #8
 80076f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f2:	781e      	ldrb	r6, [r3, #0]
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	bfa8      	it	ge
 80076f8:	1bf6      	subge	r6, r6, r7
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	dd18      	ble.n	8007730 <_svfprintf_r+0x1100>
 80076fe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007702:	482f      	ldr	r0, [pc, #188]	; (80077c0 <_svfprintf_r+0x1190>)
 8007704:	6020      	str	r0, [r4, #0]
 8007706:	2e10      	cmp	r6, #16
 8007708:	f103 0301 	add.w	r3, r3, #1
 800770c:	f104 0108 	add.w	r1, r4, #8
 8007710:	dc2d      	bgt.n	800776e <_svfprintf_r+0x113e>
 8007712:	4432      	add	r2, r6
 8007714:	2b07      	cmp	r3, #7
 8007716:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800771a:	6066      	str	r6, [r4, #4]
 800771c:	dd3a      	ble.n	8007794 <_svfprintf_r+0x1164>
 800771e:	aa22      	add	r2, sp, #136	; 0x88
 8007720:	4641      	mov	r1, r8
 8007722:	4650      	mov	r0, sl
 8007724:	f002 fbd3 	bl	8009ece <__ssprint_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 8103 	bne.w	8007934 <_svfprintf_r+0x1304>
 800772e:	ac25      	add	r4, sp, #148	; 0x94
 8007730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	441d      	add	r5, r3
 8007736:	e732      	b.n	800759e <_svfprintf_r+0xf6e>
 8007738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773a:	3b01      	subs	r3, #1
 800773c:	930a      	str	r3, [sp, #40]	; 0x28
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	3b01      	subs	r3, #1
 8007742:	9309      	str	r3, [sp, #36]	; 0x24
 8007744:	e7b0      	b.n	80076a8 <_svfprintf_r+0x1078>
 8007746:	aa22      	add	r2, sp, #136	; 0x88
 8007748:	4641      	mov	r1, r8
 800774a:	4650      	mov	r0, sl
 800774c:	f002 fbbf 	bl	8009ece <__ssprint_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	f040 80ef 	bne.w	8007934 <_svfprintf_r+0x1304>
 8007756:	ac25      	add	r4, sp, #148	; 0x94
 8007758:	e7b4      	b.n	80076c4 <_svfprintf_r+0x1094>
 800775a:	aa22      	add	r2, sp, #136	; 0x88
 800775c:	4641      	mov	r1, r8
 800775e:	4650      	mov	r0, sl
 8007760:	f002 fbb5 	bl	8009ece <__ssprint_r>
 8007764:	2800      	cmp	r0, #0
 8007766:	f040 80e5 	bne.w	8007934 <_svfprintf_r+0x1304>
 800776a:	ac25      	add	r4, sp, #148	; 0x94
 800776c:	e7c0      	b.n	80076f0 <_svfprintf_r+0x10c0>
 800776e:	2010      	movs	r0, #16
 8007770:	4402      	add	r2, r0
 8007772:	2b07      	cmp	r3, #7
 8007774:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007778:	6060      	str	r0, [r4, #4]
 800777a:	dd08      	ble.n	800778e <_svfprintf_r+0x115e>
 800777c:	aa22      	add	r2, sp, #136	; 0x88
 800777e:	4641      	mov	r1, r8
 8007780:	4650      	mov	r0, sl
 8007782:	f002 fba4 	bl	8009ece <__ssprint_r>
 8007786:	2800      	cmp	r0, #0
 8007788:	f040 80d4 	bne.w	8007934 <_svfprintf_r+0x1304>
 800778c:	a925      	add	r1, sp, #148	; 0x94
 800778e:	3e10      	subs	r6, #16
 8007790:	460c      	mov	r4, r1
 8007792:	e7b4      	b.n	80076fe <_svfprintf_r+0x10ce>
 8007794:	460c      	mov	r4, r1
 8007796:	e7cb      	b.n	8007730 <_svfprintf_r+0x1100>
 8007798:	aa22      	add	r2, sp, #136	; 0x88
 800779a:	4641      	mov	r1, r8
 800779c:	4650      	mov	r0, sl
 800779e:	f002 fb96 	bl	8009ece <__ssprint_r>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f040 80c6 	bne.w	8007934 <_svfprintf_r+0x1304>
 80077a8:	ac25      	add	r4, sp, #148	; 0x94
 80077aa:	e719      	b.n	80075e0 <_svfprintf_r+0xfb0>
 80077ac:	aa22      	add	r2, sp, #136	; 0x88
 80077ae:	4641      	mov	r1, r8
 80077b0:	4650      	mov	r0, sl
 80077b2:	f002 fb8c 	bl	8009ece <__ssprint_r>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f040 80bc 	bne.w	8007934 <_svfprintf_r+0x1304>
 80077bc:	ac25      	add	r4, sp, #148	; 0x94
 80077be:	e726      	b.n	800760e <_svfprintf_r+0xfde>
 80077c0:	0800bcdc 	.word	0x0800bcdc
 80077c4:	9a05      	ldr	r2, [sp, #20]
 80077c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c8:	2a01      	cmp	r2, #1
 80077ca:	f106 0601 	add.w	r6, r6, #1
 80077ce:	f103 0301 	add.w	r3, r3, #1
 80077d2:	f104 0508 	add.w	r5, r4, #8
 80077d6:	dc02      	bgt.n	80077de <_svfprintf_r+0x11ae>
 80077d8:	f01b 0f01 	tst.w	fp, #1
 80077dc:	d07e      	beq.n	80078dc <_svfprintf_r+0x12ac>
 80077de:	2201      	movs	r2, #1
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80077e6:	f8c4 9000 	str.w	r9, [r4]
 80077ea:	6062      	str	r2, [r4, #4]
 80077ec:	dd08      	ble.n	8007800 <_svfprintf_r+0x11d0>
 80077ee:	aa22      	add	r2, sp, #136	; 0x88
 80077f0:	4641      	mov	r1, r8
 80077f2:	4650      	mov	r0, sl
 80077f4:	f002 fb6b 	bl	8009ece <__ssprint_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f040 809b 	bne.w	8007934 <_svfprintf_r+0x1304>
 80077fe:	ad25      	add	r5, sp, #148	; 0x94
 8007800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007808:	606b      	str	r3, [r5, #4]
 800780a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800780c:	4413      	add	r3, r2
 800780e:	9324      	str	r3, [sp, #144]	; 0x90
 8007810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007812:	3301      	adds	r3, #1
 8007814:	2b07      	cmp	r3, #7
 8007816:	9323      	str	r3, [sp, #140]	; 0x8c
 8007818:	dc32      	bgt.n	8007880 <_svfprintf_r+0x1250>
 800781a:	3508      	adds	r5, #8
 800781c:	9b05      	ldr	r3, [sp, #20]
 800781e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007822:	1e5c      	subs	r4, r3, #1
 8007824:	2200      	movs	r2, #0
 8007826:	2300      	movs	r3, #0
 8007828:	f7f9 f95e 	bl	8000ae8 <__aeabi_dcmpeq>
 800782c:	2800      	cmp	r0, #0
 800782e:	d130      	bne.n	8007892 <_svfprintf_r+0x1262>
 8007830:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007834:	9a05      	ldr	r2, [sp, #20]
 8007836:	3101      	adds	r1, #1
 8007838:	3b01      	subs	r3, #1
 800783a:	f109 0001 	add.w	r0, r9, #1
 800783e:	4413      	add	r3, r2
 8007840:	2907      	cmp	r1, #7
 8007842:	e9c5 0400 	strd	r0, r4, [r5]
 8007846:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800784a:	dd50      	ble.n	80078ee <_svfprintf_r+0x12be>
 800784c:	aa22      	add	r2, sp, #136	; 0x88
 800784e:	4641      	mov	r1, r8
 8007850:	4650      	mov	r0, sl
 8007852:	f002 fb3c 	bl	8009ece <__ssprint_r>
 8007856:	2800      	cmp	r0, #0
 8007858:	d16c      	bne.n	8007934 <_svfprintf_r+0x1304>
 800785a:	ad25      	add	r5, sp, #148	; 0x94
 800785c:	ab1e      	add	r3, sp, #120	; 0x78
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007862:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007864:	606b      	str	r3, [r5, #4]
 8007866:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007868:	4413      	add	r3, r2
 800786a:	9324      	str	r3, [sp, #144]	; 0x90
 800786c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800786e:	3301      	adds	r3, #1
 8007870:	2b07      	cmp	r3, #7
 8007872:	9323      	str	r3, [sp, #140]	; 0x8c
 8007874:	f73f adb7 	bgt.w	80073e6 <_svfprintf_r+0xdb6>
 8007878:	f105 0408 	add.w	r4, r5, #8
 800787c:	f7ff babe 	b.w	8006dfc <_svfprintf_r+0x7cc>
 8007880:	aa22      	add	r2, sp, #136	; 0x88
 8007882:	4641      	mov	r1, r8
 8007884:	4650      	mov	r0, sl
 8007886:	f002 fb22 	bl	8009ece <__ssprint_r>
 800788a:	2800      	cmp	r0, #0
 800788c:	d152      	bne.n	8007934 <_svfprintf_r+0x1304>
 800788e:	ad25      	add	r5, sp, #148	; 0x94
 8007890:	e7c4      	b.n	800781c <_svfprintf_r+0x11ec>
 8007892:	2c00      	cmp	r4, #0
 8007894:	dde2      	ble.n	800785c <_svfprintf_r+0x122c>
 8007896:	4e56      	ldr	r6, [pc, #344]	; (80079f0 <_svfprintf_r+0x13c0>)
 8007898:	2710      	movs	r7, #16
 800789a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800789e:	2c10      	cmp	r4, #16
 80078a0:	f103 0301 	add.w	r3, r3, #1
 80078a4:	f105 0108 	add.w	r1, r5, #8
 80078a8:	602e      	str	r6, [r5, #0]
 80078aa:	dc07      	bgt.n	80078bc <_svfprintf_r+0x128c>
 80078ac:	606c      	str	r4, [r5, #4]
 80078ae:	2b07      	cmp	r3, #7
 80078b0:	4414      	add	r4, r2
 80078b2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80078b6:	dcc9      	bgt.n	800784c <_svfprintf_r+0x121c>
 80078b8:	460d      	mov	r5, r1
 80078ba:	e7cf      	b.n	800785c <_svfprintf_r+0x122c>
 80078bc:	3210      	adds	r2, #16
 80078be:	2b07      	cmp	r3, #7
 80078c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80078c4:	606f      	str	r7, [r5, #4]
 80078c6:	dd06      	ble.n	80078d6 <_svfprintf_r+0x12a6>
 80078c8:	aa22      	add	r2, sp, #136	; 0x88
 80078ca:	4641      	mov	r1, r8
 80078cc:	4650      	mov	r0, sl
 80078ce:	f002 fafe 	bl	8009ece <__ssprint_r>
 80078d2:	bb78      	cbnz	r0, 8007934 <_svfprintf_r+0x1304>
 80078d4:	a925      	add	r1, sp, #148	; 0x94
 80078d6:	3c10      	subs	r4, #16
 80078d8:	460d      	mov	r5, r1
 80078da:	e7de      	b.n	800789a <_svfprintf_r+0x126a>
 80078dc:	2201      	movs	r2, #1
 80078de:	2b07      	cmp	r3, #7
 80078e0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80078e4:	f8c4 9000 	str.w	r9, [r4]
 80078e8:	6062      	str	r2, [r4, #4]
 80078ea:	ddb7      	ble.n	800785c <_svfprintf_r+0x122c>
 80078ec:	e7ae      	b.n	800784c <_svfprintf_r+0x121c>
 80078ee:	3508      	adds	r5, #8
 80078f0:	e7b4      	b.n	800785c <_svfprintf_r+0x122c>
 80078f2:	460c      	mov	r4, r1
 80078f4:	f7ff ba82 	b.w	8006dfc <_svfprintf_r+0x7cc>
 80078f8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80078fc:	1a9d      	subs	r5, r3, r2
 80078fe:	2d00      	cmp	r5, #0
 8007900:	f77f aa80 	ble.w	8006e04 <_svfprintf_r+0x7d4>
 8007904:	4e3b      	ldr	r6, [pc, #236]	; (80079f4 <_svfprintf_r+0x13c4>)
 8007906:	2710      	movs	r7, #16
 8007908:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800790c:	2d10      	cmp	r5, #16
 800790e:	f103 0301 	add.w	r3, r3, #1
 8007912:	6026      	str	r6, [r4, #0]
 8007914:	dc18      	bgt.n	8007948 <_svfprintf_r+0x1318>
 8007916:	6065      	str	r5, [r4, #4]
 8007918:	2b07      	cmp	r3, #7
 800791a:	4415      	add	r5, r2
 800791c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007920:	f77f aa70 	ble.w	8006e04 <_svfprintf_r+0x7d4>
 8007924:	aa22      	add	r2, sp, #136	; 0x88
 8007926:	4641      	mov	r1, r8
 8007928:	4650      	mov	r0, sl
 800792a:	f002 fad0 	bl	8009ece <__ssprint_r>
 800792e:	2800      	cmp	r0, #0
 8007930:	f43f aa68 	beq.w	8006e04 <_svfprintf_r+0x7d4>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f43f a887 	beq.w	8006a4a <_svfprintf_r+0x41a>
 800793c:	4619      	mov	r1, r3
 800793e:	4650      	mov	r0, sl
 8007940:	f000 ff34 	bl	80087ac <_free_r>
 8007944:	f7ff b881 	b.w	8006a4a <_svfprintf_r+0x41a>
 8007948:	3210      	adds	r2, #16
 800794a:	2b07      	cmp	r3, #7
 800794c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007950:	6067      	str	r7, [r4, #4]
 8007952:	dc02      	bgt.n	800795a <_svfprintf_r+0x132a>
 8007954:	3408      	adds	r4, #8
 8007956:	3d10      	subs	r5, #16
 8007958:	e7d6      	b.n	8007908 <_svfprintf_r+0x12d8>
 800795a:	aa22      	add	r2, sp, #136	; 0x88
 800795c:	4641      	mov	r1, r8
 800795e:	4650      	mov	r0, sl
 8007960:	f002 fab5 	bl	8009ece <__ssprint_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	d1e5      	bne.n	8007934 <_svfprintf_r+0x1304>
 8007968:	ac25      	add	r4, sp, #148	; 0x94
 800796a:	e7f4      	b.n	8007956 <_svfprintf_r+0x1326>
 800796c:	9903      	ldr	r1, [sp, #12]
 800796e:	4650      	mov	r0, sl
 8007970:	f000 ff1c 	bl	80087ac <_free_r>
 8007974:	f7ff ba5e 	b.w	8006e34 <_svfprintf_r+0x804>
 8007978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800797a:	2b00      	cmp	r3, #0
 800797c:	f43f a865 	beq.w	8006a4a <_svfprintf_r+0x41a>
 8007980:	aa22      	add	r2, sp, #136	; 0x88
 8007982:	4641      	mov	r1, r8
 8007984:	4650      	mov	r0, sl
 8007986:	f002 faa2 	bl	8009ece <__ssprint_r>
 800798a:	f7ff b85e 	b.w	8006a4a <_svfprintf_r+0x41a>
 800798e:	ea56 0205 	orrs.w	r2, r6, r5
 8007992:	465f      	mov	r7, fp
 8007994:	f43f ab78 	beq.w	8007088 <_svfprintf_r+0xa58>
 8007998:	2b01      	cmp	r3, #1
 800799a:	f43f ac15 	beq.w	80071c8 <_svfprintf_r+0xb98>
 800799e:	2b02      	cmp	r3, #2
 80079a0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80079a4:	f43f ac5b 	beq.w	800725e <_svfprintf_r+0xc2e>
 80079a8:	f006 0307 	and.w	r3, r6, #7
 80079ac:	08f6      	lsrs	r6, r6, #3
 80079ae:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 80079b2:	08ed      	lsrs	r5, r5, #3
 80079b4:	3330      	adds	r3, #48	; 0x30
 80079b6:	ea56 0105 	orrs.w	r1, r6, r5
 80079ba:	464a      	mov	r2, r9
 80079bc:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80079c0:	d1f2      	bne.n	80079a8 <_svfprintf_r+0x1378>
 80079c2:	07f9      	lsls	r1, r7, #31
 80079c4:	d506      	bpl.n	80079d4 <_svfprintf_r+0x13a4>
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d004      	beq.n	80079d4 <_svfprintf_r+0x13a4>
 80079ca:	2330      	movs	r3, #48	; 0x30
 80079cc:	f809 3c01 	strb.w	r3, [r9, #-1]
 80079d0:	f1a2 0902 	sub.w	r9, r2, #2
 80079d4:	ab4e      	add	r3, sp, #312	; 0x138
 80079d6:	eba3 0309 	sub.w	r3, r3, r9
 80079da:	9e04      	ldr	r6, [sp, #16]
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	46bb      	mov	fp, r7
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80079e8:	461d      	mov	r5, r3
 80079ea:	f7ff b94d 	b.w	8006c88 <_svfprintf_r+0x658>
 80079ee:	bf00      	nop
 80079f0:	0800bcdc 	.word	0x0800bcdc
 80079f4:	0800bccc 	.word	0x0800bccc

080079f8 <register_fini>:
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <register_fini+0xc>)
 80079fa:	b113      	cbz	r3, 8007a02 <register_fini+0xa>
 80079fc:	4802      	ldr	r0, [pc, #8]	; (8007a08 <register_fini+0x10>)
 80079fe:	f000 b805 	b.w	8007a0c <atexit>
 8007a02:	4770      	bx	lr
 8007a04:	00000000 	.word	0x00000000
 8007a08:	080086dd 	.word	0x080086dd

08007a0c <atexit>:
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4601      	mov	r1, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	4618      	mov	r0, r3
 8007a14:	f002 baf0 	b.w	8009ff8 <__register_exitproc>

08007a18 <quorem>:
 8007a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	6903      	ldr	r3, [r0, #16]
 8007a1e:	690c      	ldr	r4, [r1, #16]
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	4607      	mov	r7, r0
 8007a24:	f2c0 8081 	blt.w	8007b2a <quorem+0x112>
 8007a28:	3c01      	subs	r4, #1
 8007a2a:	f101 0814 	add.w	r8, r1, #20
 8007a2e:	f100 0514 	add.w	r5, r0, #20
 8007a32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a40:	3301      	adds	r3, #1
 8007a42:	429a      	cmp	r2, r3
 8007a44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a50:	d331      	bcc.n	8007ab6 <quorem+0x9e>
 8007a52:	f04f 0e00 	mov.w	lr, #0
 8007a56:	4640      	mov	r0, r8
 8007a58:	46ac      	mov	ip, r5
 8007a5a:	46f2      	mov	sl, lr
 8007a5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a60:	b293      	uxth	r3, r2
 8007a62:	fb06 e303 	mla	r3, r6, r3, lr
 8007a66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a70:	f8dc a000 	ldr.w	sl, [ip]
 8007a74:	0c12      	lsrs	r2, r2, #16
 8007a76:	fa13 f38a 	uxtah	r3, r3, sl
 8007a7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	9b00      	ldr	r3, [sp, #0]
 8007a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a86:	b292      	uxth	r2, r2
 8007a88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a94:	4581      	cmp	r9, r0
 8007a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aa2:	d2db      	bcs.n	8007a5c <quorem+0x44>
 8007aa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa8:	b92b      	cbnz	r3, 8007ab6 <quorem+0x9e>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	3b04      	subs	r3, #4
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	d32e      	bcc.n	8007b12 <quorem+0xfa>
 8007ab4:	613c      	str	r4, [r7, #16]
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f001 ff9c 	bl	80099f4 <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	db24      	blt.n	8007b0a <quorem+0xf2>
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f04f 0c00 	mov.w	ip, #0
 8007ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007acc:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad0:	b293      	uxth	r3, r2
 8007ad2:	ebac 0303 	sub.w	r3, ip, r3
 8007ad6:	0c12      	lsrs	r2, r2, #16
 8007ad8:	fa13 f38e 	uxtah	r3, r3, lr
 8007adc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aea:	45c1      	cmp	r9, r8
 8007aec:	f840 3b04 	str.w	r3, [r0], #4
 8007af0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007af4:	d2e8      	bcs.n	8007ac8 <quorem+0xb0>
 8007af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007afe:	b922      	cbnz	r2, 8007b0a <quorem+0xf2>
 8007b00:	3b04      	subs	r3, #4
 8007b02:	429d      	cmp	r5, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	d30a      	bcc.n	8007b1e <quorem+0x106>
 8007b08:	613c      	str	r4, [r7, #16]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d1cc      	bne.n	8007ab4 <quorem+0x9c>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	e7c7      	b.n	8007aae <quorem+0x96>
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	d1f0      	bne.n	8007b08 <quorem+0xf0>
 8007b26:	3c01      	subs	r4, #1
 8007b28:	e7eb      	b.n	8007b02 <quorem+0xea>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7ee      	b.n	8007b0c <quorem+0xf4>
	...

08007b30 <_dtoa_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	ed2d 8b04 	vpush	{d8-d9}
 8007b38:	b093      	sub	sp, #76	; 0x4c
 8007b3a:	ec57 6b10 	vmov	r6, r7, d0
 8007b3e:	9106      	str	r1, [sp, #24]
 8007b40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007b42:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007b44:	9209      	str	r2, [sp, #36]	; 0x24
 8007b46:	ee10 aa10 	vmov	sl, s0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b4e:	46bb      	mov	fp, r7
 8007b50:	b141      	cbz	r1, 8007b64 <_dtoa_r+0x34>
 8007b52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b54:	604a      	str	r2, [r1, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	4093      	lsls	r3, r2
 8007b5a:	608b      	str	r3, [r1, #8]
 8007b5c:	f001 fcf1 	bl	8009542 <_Bfree>
 8007b60:	2300      	movs	r3, #0
 8007b62:	6423      	str	r3, [r4, #64]	; 0x40
 8007b64:	1e3b      	subs	r3, r7, #0
 8007b66:	bfaa      	itet	ge
 8007b68:	2300      	movge	r3, #0
 8007b6a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b6e:	602b      	strge	r3, [r5, #0]
 8007b70:	4ba3      	ldr	r3, [pc, #652]	; (8007e00 <_dtoa_r+0x2d0>)
 8007b72:	bfbc      	itt	lt
 8007b74:	2201      	movlt	r2, #1
 8007b76:	602a      	strlt	r2, [r5, #0]
 8007b78:	ea33 030b 	bics.w	r3, r3, fp
 8007b7c:	d11b      	bne.n	8007bb6 <_dtoa_r+0x86>
 8007b7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b80:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b8a:	4333      	orrs	r3, r6
 8007b8c:	f000 8590 	beq.w	80086b0 <_dtoa_r+0xb80>
 8007b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b92:	b90b      	cbnz	r3, 8007b98 <_dtoa_r+0x68>
 8007b94:	4b9b      	ldr	r3, [pc, #620]	; (8007e04 <_dtoa_r+0x2d4>)
 8007b96:	e022      	b.n	8007bde <_dtoa_r+0xae>
 8007b98:	4b9a      	ldr	r3, [pc, #616]	; (8007e04 <_dtoa_r+0x2d4>)
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	3303      	adds	r3, #3
 8007b9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	9801      	ldr	r0, [sp, #4]
 8007ba4:	b013      	add	sp, #76	; 0x4c
 8007ba6:	ecbd 8b04 	vpop	{d8-d9}
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	4b96      	ldr	r3, [pc, #600]	; (8007e08 <_dtoa_r+0x2d8>)
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	e7f3      	b.n	8007b9e <_dtoa_r+0x6e>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	f7f8 ff93 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bc2:	ec4b ab19 	vmov	d9, sl, fp
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	b158      	cbz	r0, 8007be2 <_dtoa_r+0xb2>
 8007bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bcc:	2301      	movs	r3, #1
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8569 	beq.w	80086aa <_dtoa_r+0xb7a>
 8007bd8:	488c      	ldr	r0, [pc, #560]	; (8007e0c <_dtoa_r+0x2dc>)
 8007bda:	6018      	str	r0, [r3, #0]
 8007bdc:	1e43      	subs	r3, r0, #1
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	e7df      	b.n	8007ba2 <_dtoa_r+0x72>
 8007be2:	ec4b ab10 	vmov	d0, sl, fp
 8007be6:	aa10      	add	r2, sp, #64	; 0x40
 8007be8:	a911      	add	r1, sp, #68	; 0x44
 8007bea:	4620      	mov	r0, r4
 8007bec:	f002 f824 	bl	8009c38 <__d2b>
 8007bf0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007bf4:	ee08 0a10 	vmov	s16, r0
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	f000 8082 	beq.w	8007d02 <_dtoa_r+0x1d2>
 8007bfe:	ee19 3a90 	vmov	r3, s19
 8007c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c0a:	4656      	mov	r6, sl
 8007c0c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c14:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c18:	4b7d      	ldr	r3, [pc, #500]	; (8007e10 <_dtoa_r+0x2e0>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fb42 	bl	80002a8 <__aeabi_dsub>
 8007c24:	a370      	add	r3, pc, #448	; (adr r3, 8007de8 <_dtoa_r+0x2b8>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fcf5 	bl	8000618 <__aeabi_dmul>
 8007c2e:	a370      	add	r3, pc, #448	; (adr r3, 8007df0 <_dtoa_r+0x2c0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fb3a 	bl	80002ac <__adddf3>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	f7f8 fc81 	bl	8000544 <__aeabi_i2d>
 8007c42:	a36d      	add	r3, pc, #436	; (adr r3, 8007df8 <_dtoa_r+0x2c8>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fce6 	bl	8000618 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fb2a 	bl	80002ac <__adddf3>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	f7f8 ff8c 	bl	8000b78 <__aeabi_d2iz>
 8007c60:	2200      	movs	r2, #0
 8007c62:	9000      	str	r0, [sp, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 ff47 	bl	8000afc <__aeabi_dcmplt>
 8007c6e:	b150      	cbz	r0, 8007c86 <_dtoa_r+0x156>
 8007c70:	9800      	ldr	r0, [sp, #0]
 8007c72:	f7f8 fc67 	bl	8000544 <__aeabi_i2d>
 8007c76:	4632      	mov	r2, r6
 8007c78:	463b      	mov	r3, r7
 8007c7a:	f7f8 ff35 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c7e:	b910      	cbnz	r0, 8007c86 <_dtoa_r+0x156>
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	2b16      	cmp	r3, #22
 8007c8a:	d858      	bhi.n	8007d3e <_dtoa_r+0x20e>
 8007c8c:	9a00      	ldr	r2, [sp, #0]
 8007c8e:	4b61      	ldr	r3, [pc, #388]	; (8007e14 <_dtoa_r+0x2e4>)
 8007c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	ec51 0b19 	vmov	r0, r1, d9
 8007c9c:	f7f8 ff2e 	bl	8000afc <__aeabi_dcmplt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d04e      	beq.n	8007d42 <_dtoa_r+0x212>
 8007ca4:	9b00      	ldr	r3, [sp, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	2300      	movs	r3, #0
 8007cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cb0:	1b5d      	subs	r5, r3, r5
 8007cb2:	1e6b      	subs	r3, r5, #1
 8007cb4:	9305      	str	r3, [sp, #20]
 8007cb6:	bf45      	ittet	mi
 8007cb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cbc:	9304      	strmi	r3, [sp, #16]
 8007cbe:	2300      	movpl	r3, #0
 8007cc0:	2300      	movmi	r3, #0
 8007cc2:	bf4c      	ite	mi
 8007cc4:	9305      	strmi	r3, [sp, #20]
 8007cc6:	9304      	strpl	r3, [sp, #16]
 8007cc8:	9b00      	ldr	r3, [sp, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	db3b      	blt.n	8007d46 <_dtoa_r+0x216>
 8007cce:	9b05      	ldr	r3, [sp, #20]
 8007cd0:	9a00      	ldr	r2, [sp, #0]
 8007cd2:	920a      	str	r2, [sp, #40]	; 0x28
 8007cd4:	4413      	add	r3, r2
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	9b06      	ldr	r3, [sp, #24]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d869      	bhi.n	8007db6 <_dtoa_r+0x286>
 8007ce2:	2b05      	cmp	r3, #5
 8007ce4:	bfc4      	itt	gt
 8007ce6:	3b04      	subgt	r3, #4
 8007ce8:	9306      	strgt	r3, [sp, #24]
 8007cea:	9b06      	ldr	r3, [sp, #24]
 8007cec:	f1a3 0302 	sub.w	r3, r3, #2
 8007cf0:	bfcc      	ite	gt
 8007cf2:	2500      	movgt	r5, #0
 8007cf4:	2501      	movle	r5, #1
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d868      	bhi.n	8007dcc <_dtoa_r+0x29c>
 8007cfa:	e8df f003 	tbb	[pc, r3]
 8007cfe:	3a2d      	.short	0x3a2d
 8007d00:	5a38      	.short	0x5a38
 8007d02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d06:	441d      	add	r5, r3
 8007d08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	bfc1      	itttt	gt
 8007d10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d18:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d20:	bfda      	itte	le
 8007d22:	f1c3 0320 	rsble	r3, r3, #32
 8007d26:	fa06 f003 	lslle.w	r0, r6, r3
 8007d2a:	4318      	orrgt	r0, r3
 8007d2c:	f7f8 fbfa 	bl	8000524 <__aeabi_ui2d>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4606      	mov	r6, r0
 8007d34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d38:	3d01      	subs	r5, #1
 8007d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d3c:	e76c      	b.n	8007c18 <_dtoa_r+0xe8>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e7b4      	b.n	8007cac <_dtoa_r+0x17c>
 8007d42:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d44:	e7b3      	b.n	8007cae <_dtoa_r+0x17e>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	9a00      	ldr	r2, [sp, #0]
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	4253      	negs	r3, r2
 8007d50:	9307      	str	r3, [sp, #28]
 8007d52:	2300      	movs	r3, #0
 8007d54:	930a      	str	r3, [sp, #40]	; 0x28
 8007d56:	e7c1      	b.n	8007cdc <_dtoa_r+0x1ac>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dc37      	bgt.n	8007dd2 <_dtoa_r+0x2a2>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6c:	e00c      	b.n	8007d88 <_dtoa_r+0x258>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7f3      	b.n	8007d5a <_dtoa_r+0x22a>
 8007d72:	2300      	movs	r3, #0
 8007d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d76:	9308      	str	r3, [sp, #32]
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	9302      	str	r3, [sp, #8]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	bfb8      	it	lt
 8007d86:	2301      	movlt	r3, #1
 8007d88:	2200      	movs	r2, #0
 8007d8a:	6462      	str	r2, [r4, #68]	; 0x44
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	f102 0014 	add.w	r0, r2, #20
 8007d92:	4298      	cmp	r0, r3
 8007d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007d96:	d920      	bls.n	8007dda <_dtoa_r+0x2aa>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fbad 	bl	80094f8 <_Balloc>
 8007d9e:	9001      	str	r0, [sp, #4]
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d13d      	bne.n	8007e20 <_dtoa_r+0x2f0>
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <_dtoa_r+0x2e8>)
 8007da6:	4602      	mov	r2, r0
 8007da8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dac:	481b      	ldr	r0, [pc, #108]	; (8007e1c <_dtoa_r+0x2ec>)
 8007dae:	f002 f965 	bl	800a07c <__assert_func>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7de      	b.n	8007d74 <_dtoa_r+0x244>
 8007db6:	2501      	movs	r5, #1
 8007db8:	2300      	movs	r3, #0
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9508      	str	r5, [sp, #32]
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2312      	movs	r3, #18
 8007dca:	e7ce      	b.n	8007d6a <_dtoa_r+0x23a>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	9308      	str	r3, [sp, #32]
 8007dd0:	e7f5      	b.n	8007dbe <_dtoa_r+0x28e>
 8007dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dd8:	e7d6      	b.n	8007d88 <_dtoa_r+0x258>
 8007dda:	3101      	adds	r1, #1
 8007ddc:	6461      	str	r1, [r4, #68]	; 0x44
 8007dde:	0052      	lsls	r2, r2, #1
 8007de0:	e7d5      	b.n	8007d8e <_dtoa_r+0x25e>
 8007de2:	bf00      	nop
 8007de4:	f3af 8000 	nop.w
 8007de8:	636f4361 	.word	0x636f4361
 8007dec:	3fd287a7 	.word	0x3fd287a7
 8007df0:	8b60c8b3 	.word	0x8b60c8b3
 8007df4:	3fc68a28 	.word	0x3fc68a28
 8007df8:	509f79fb 	.word	0x509f79fb
 8007dfc:	3fd34413 	.word	0x3fd34413
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800bded 	.word	0x0800bded
 8007e08:	0800bdf1 	.word	0x0800bdf1
 8007e0c:	0800bccb 	.word	0x0800bccb
 8007e10:	3ff80000 	.word	0x3ff80000
 8007e14:	0800bf68 	.word	0x0800bf68
 8007e18:	0800bdfa 	.word	0x0800bdfa
 8007e1c:	0800be0b 	.word	0x0800be0b
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	6423      	str	r3, [r4, #64]	; 0x40
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	2b0e      	cmp	r3, #14
 8007e28:	f200 809d 	bhi.w	8007f66 <_dtoa_r+0x436>
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	f000 809a 	beq.w	8007f66 <_dtoa_r+0x436>
 8007e32:	9b00      	ldr	r3, [sp, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd32      	ble.n	8007e9e <_dtoa_r+0x36e>
 8007e38:	4ab7      	ldr	r2, [pc, #732]	; (8008118 <_dtoa_r+0x5e8>)
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e46:	9b00      	ldr	r3, [sp, #0]
 8007e48:	05d8      	lsls	r0, r3, #23
 8007e4a:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e4e:	d516      	bpl.n	8007e7e <_dtoa_r+0x34e>
 8007e50:	4bb2      	ldr	r3, [pc, #712]	; (800811c <_dtoa_r+0x5ec>)
 8007e52:	ec51 0b19 	vmov	r0, r1, d9
 8007e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e5a:	f7f8 fd07 	bl	800086c <__aeabi_ddiv>
 8007e5e:	f007 070f 	and.w	r7, r7, #15
 8007e62:	4682      	mov	sl, r0
 8007e64:	468b      	mov	fp, r1
 8007e66:	2503      	movs	r5, #3
 8007e68:	4eac      	ldr	r6, [pc, #688]	; (800811c <_dtoa_r+0x5ec>)
 8007e6a:	b957      	cbnz	r7, 8007e82 <_dtoa_r+0x352>
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	f7f8 fcfa 	bl	800086c <__aeabi_ddiv>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	e028      	b.n	8007ed0 <_dtoa_r+0x3a0>
 8007e7e:	2502      	movs	r5, #2
 8007e80:	e7f2      	b.n	8007e68 <_dtoa_r+0x338>
 8007e82:	07f9      	lsls	r1, r7, #31
 8007e84:	d508      	bpl.n	8007e98 <_dtoa_r+0x368>
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e8e:	f7f8 fbc3 	bl	8000618 <__aeabi_dmul>
 8007e92:	3501      	adds	r5, #1
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	107f      	asrs	r7, r7, #1
 8007e9a:	3608      	adds	r6, #8
 8007e9c:	e7e5      	b.n	8007e6a <_dtoa_r+0x33a>
 8007e9e:	f000 809b 	beq.w	8007fd8 <_dtoa_r+0x4a8>
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	4f9d      	ldr	r7, [pc, #628]	; (800811c <_dtoa_r+0x5ec>)
 8007ea6:	425e      	negs	r6, r3
 8007ea8:	4b9b      	ldr	r3, [pc, #620]	; (8008118 <_dtoa_r+0x5e8>)
 8007eaa:	f006 020f 	and.w	r2, r6, #15
 8007eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	ec51 0b19 	vmov	r0, r1, d9
 8007eba:	f7f8 fbad 	bl	8000618 <__aeabi_dmul>
 8007ebe:	1136      	asrs	r6, r6, #4
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2502      	movs	r5, #2
 8007ec8:	2e00      	cmp	r6, #0
 8007eca:	d17a      	bne.n	8007fc2 <_dtoa_r+0x492>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1d3      	bne.n	8007e78 <_dtoa_r+0x348>
 8007ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 8082 	beq.w	8007fdc <_dtoa_r+0x4ac>
 8007ed8:	4b91      	ldr	r3, [pc, #580]	; (8008120 <_dtoa_r+0x5f0>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 fe0c 	bl	8000afc <__aeabi_dcmplt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d079      	beq.n	8007fdc <_dtoa_r+0x4ac>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d076      	beq.n	8007fdc <_dtoa_r+0x4ac>
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd36      	ble.n	8007f62 <_dtoa_r+0x432>
 8007ef4:	9b00      	ldr	r3, [sp, #0]
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	4659      	mov	r1, fp
 8007efa:	1e5f      	subs	r7, r3, #1
 8007efc:	2200      	movs	r2, #0
 8007efe:	4b89      	ldr	r3, [pc, #548]	; (8008124 <_dtoa_r+0x5f4>)
 8007f00:	f7f8 fb8a 	bl	8000618 <__aeabi_dmul>
 8007f04:	9e02      	ldr	r6, [sp, #8]
 8007f06:	4682      	mov	sl, r0
 8007f08:	468b      	mov	fp, r1
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	f7f8 fb19 	bl	8000544 <__aeabi_i2d>
 8007f12:	4652      	mov	r2, sl
 8007f14:	465b      	mov	r3, fp
 8007f16:	f7f8 fb7f 	bl	8000618 <__aeabi_dmul>
 8007f1a:	4b83      	ldr	r3, [pc, #524]	; (8008128 <_dtoa_r+0x5f8>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f7f8 f9c5 	bl	80002ac <__adddf3>
 8007f22:	46d0      	mov	r8, sl
 8007f24:	46d9      	mov	r9, fp
 8007f26:	4682      	mov	sl, r0
 8007f28:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f2c:	2e00      	cmp	r6, #0
 8007f2e:	d158      	bne.n	8007fe2 <_dtoa_r+0x4b2>
 8007f30:	4b7e      	ldr	r3, [pc, #504]	; (800812c <_dtoa_r+0x5fc>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 f9b6 	bl	80002a8 <__aeabi_dsub>
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	465b      	mov	r3, fp
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	f7f8 fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f040 8296 	bne.w	800847a <_dtoa_r+0x94a>
 8007f4e:	4652      	mov	r2, sl
 8007f50:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f040 828a 	bne.w	8008476 <_dtoa_r+0x946>
 8007f62:	ec5b ab19 	vmov	sl, fp, d9
 8007f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f2c0 8149 	blt.w	8008200 <_dtoa_r+0x6d0>
 8007f6e:	9a00      	ldr	r2, [sp, #0]
 8007f70:	2a0e      	cmp	r2, #14
 8007f72:	f300 8145 	bgt.w	8008200 <_dtoa_r+0x6d0>
 8007f76:	4b68      	ldr	r3, [pc, #416]	; (8008118 <_dtoa_r+0x5e8>)
 8007f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f280 80d6 	bge.w	8008134 <_dtoa_r+0x604>
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f300 80d2 	bgt.w	8008134 <_dtoa_r+0x604>
 8007f90:	f040 8270 	bne.w	8008474 <_dtoa_r+0x944>
 8007f94:	4b65      	ldr	r3, [pc, #404]	; (800812c <_dtoa_r+0x5fc>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	4640      	mov	r0, r8
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	f7f8 fb3c 	bl	8000618 <__aeabi_dmul>
 8007fa0:	4652      	mov	r2, sl
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	f7f8 fdbe 	bl	8000b24 <__aeabi_dcmpge>
 8007fa8:	9e03      	ldr	r6, [sp, #12]
 8007faa:	4637      	mov	r7, r6
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 8246 	bne.w	800843e <_dtoa_r+0x90e>
 8007fb2:	9d01      	ldr	r5, [sp, #4]
 8007fb4:	2331      	movs	r3, #49	; 0x31
 8007fb6:	f805 3b01 	strb.w	r3, [r5], #1
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	e241      	b.n	8008446 <_dtoa_r+0x916>
 8007fc2:	07f2      	lsls	r2, r6, #31
 8007fc4:	d505      	bpl.n	8007fd2 <_dtoa_r+0x4a2>
 8007fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fca:	f7f8 fb25 	bl	8000618 <__aeabi_dmul>
 8007fce:	3501      	adds	r5, #1
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	1076      	asrs	r6, r6, #1
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	e777      	b.n	8007ec8 <_dtoa_r+0x398>
 8007fd8:	2502      	movs	r5, #2
 8007fda:	e779      	b.n	8007ed0 <_dtoa_r+0x3a0>
 8007fdc:	9f00      	ldr	r7, [sp, #0]
 8007fde:	9e03      	ldr	r6, [sp, #12]
 8007fe0:	e794      	b.n	8007f0c <_dtoa_r+0x3dc>
 8007fe2:	9901      	ldr	r1, [sp, #4]
 8007fe4:	4b4c      	ldr	r3, [pc, #304]	; (8008118 <_dtoa_r+0x5e8>)
 8007fe6:	4431      	add	r1, r6
 8007fe8:	910d      	str	r1, [sp, #52]	; 0x34
 8007fea:	9908      	ldr	r1, [sp, #32]
 8007fec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ff0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d043      	beq.n	8008080 <_dtoa_r+0x550>
 8007ff8:	494d      	ldr	r1, [pc, #308]	; (8008130 <_dtoa_r+0x600>)
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f7f8 fc36 	bl	800086c <__aeabi_ddiv>
 8008000:	4652      	mov	r2, sl
 8008002:	465b      	mov	r3, fp
 8008004:	f7f8 f950 	bl	80002a8 <__aeabi_dsub>
 8008008:	9d01      	ldr	r5, [sp, #4]
 800800a:	4682      	mov	sl, r0
 800800c:	468b      	mov	fp, r1
 800800e:	4649      	mov	r1, r9
 8008010:	4640      	mov	r0, r8
 8008012:	f7f8 fdb1 	bl	8000b78 <__aeabi_d2iz>
 8008016:	4606      	mov	r6, r0
 8008018:	f7f8 fa94 	bl	8000544 <__aeabi_i2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 f940 	bl	80002a8 <__aeabi_dsub>
 8008028:	3630      	adds	r6, #48	; 0x30
 800802a:	f805 6b01 	strb.w	r6, [r5], #1
 800802e:	4652      	mov	r2, sl
 8008030:	465b      	mov	r3, fp
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	f7f8 fd61 	bl	8000afc <__aeabi_dcmplt>
 800803a:	2800      	cmp	r0, #0
 800803c:	d163      	bne.n	8008106 <_dtoa_r+0x5d6>
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	4937      	ldr	r1, [pc, #220]	; (8008120 <_dtoa_r+0x5f0>)
 8008044:	2000      	movs	r0, #0
 8008046:	f7f8 f92f 	bl	80002a8 <__aeabi_dsub>
 800804a:	4652      	mov	r2, sl
 800804c:	465b      	mov	r3, fp
 800804e:	f7f8 fd55 	bl	8000afc <__aeabi_dcmplt>
 8008052:	2800      	cmp	r0, #0
 8008054:	f040 80b6 	bne.w	80081c4 <_dtoa_r+0x694>
 8008058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800805a:	429d      	cmp	r5, r3
 800805c:	d081      	beq.n	8007f62 <_dtoa_r+0x432>
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <_dtoa_r+0x5f4>)
 8008060:	2200      	movs	r2, #0
 8008062:	4650      	mov	r0, sl
 8008064:	4659      	mov	r1, fp
 8008066:	f7f8 fad7 	bl	8000618 <__aeabi_dmul>
 800806a:	4b2e      	ldr	r3, [pc, #184]	; (8008124 <_dtoa_r+0x5f4>)
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	2200      	movs	r2, #0
 8008076:	f7f8 facf 	bl	8000618 <__aeabi_dmul>
 800807a:	4680      	mov	r8, r0
 800807c:	4689      	mov	r9, r1
 800807e:	e7c6      	b.n	800800e <_dtoa_r+0x4de>
 8008080:	4650      	mov	r0, sl
 8008082:	4659      	mov	r1, fp
 8008084:	f7f8 fac8 	bl	8000618 <__aeabi_dmul>
 8008088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808a:	9d01      	ldr	r5, [sp, #4]
 800808c:	930f      	str	r3, [sp, #60]	; 0x3c
 800808e:	4682      	mov	sl, r0
 8008090:	468b      	mov	fp, r1
 8008092:	4649      	mov	r1, r9
 8008094:	4640      	mov	r0, r8
 8008096:	f7f8 fd6f 	bl	8000b78 <__aeabi_d2iz>
 800809a:	4606      	mov	r6, r0
 800809c:	f7f8 fa52 	bl	8000544 <__aeabi_i2d>
 80080a0:	3630      	adds	r6, #48	; 0x30
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 f8fd 	bl	80002a8 <__aeabi_dsub>
 80080ae:	f805 6b01 	strb.w	r6, [r5], #1
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	429d      	cmp	r5, r3
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	d124      	bne.n	800810a <_dtoa_r+0x5da>
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <_dtoa_r+0x600>)
 80080c2:	4650      	mov	r0, sl
 80080c4:	4659      	mov	r1, fp
 80080c6:	f7f8 f8f1 	bl	80002ac <__adddf3>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4640      	mov	r0, r8
 80080d0:	4649      	mov	r1, r9
 80080d2:	f7f8 fd31 	bl	8000b38 <__aeabi_dcmpgt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d174      	bne.n	80081c4 <_dtoa_r+0x694>
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	4914      	ldr	r1, [pc, #80]	; (8008130 <_dtoa_r+0x600>)
 80080e0:	2000      	movs	r0, #0
 80080e2:	f7f8 f8e1 	bl	80002a8 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	f7f8 fd05 	bl	8000afc <__aeabi_dcmplt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f43f af35 	beq.w	8007f62 <_dtoa_r+0x432>
 80080f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080fa:	1e6b      	subs	r3, r5, #1
 80080fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008102:	2b30      	cmp	r3, #48	; 0x30
 8008104:	d0f8      	beq.n	80080f8 <_dtoa_r+0x5c8>
 8008106:	9700      	str	r7, [sp, #0]
 8008108:	e04a      	b.n	80081a0 <_dtoa_r+0x670>
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <_dtoa_r+0x5f4>)
 800810c:	f7f8 fa84 	bl	8000618 <__aeabi_dmul>
 8008110:	4680      	mov	r8, r0
 8008112:	4689      	mov	r9, r1
 8008114:	e7bd      	b.n	8008092 <_dtoa_r+0x562>
 8008116:	bf00      	nop
 8008118:	0800bf68 	.word	0x0800bf68
 800811c:	0800bf40 	.word	0x0800bf40
 8008120:	3ff00000 	.word	0x3ff00000
 8008124:	40240000 	.word	0x40240000
 8008128:	401c0000 	.word	0x401c0000
 800812c:	40140000 	.word	0x40140000
 8008130:	3fe00000 	.word	0x3fe00000
 8008134:	9d01      	ldr	r5, [sp, #4]
 8008136:	4656      	mov	r6, sl
 8008138:	465f      	mov	r7, fp
 800813a:	4642      	mov	r2, r8
 800813c:	464b      	mov	r3, r9
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 fb93 	bl	800086c <__aeabi_ddiv>
 8008146:	f7f8 fd17 	bl	8000b78 <__aeabi_d2iz>
 800814a:	4682      	mov	sl, r0
 800814c:	f7f8 f9fa 	bl	8000544 <__aeabi_i2d>
 8008150:	4642      	mov	r2, r8
 8008152:	464b      	mov	r3, r9
 8008154:	f7f8 fa60 	bl	8000618 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008164:	f7f8 f8a0 	bl	80002a8 <__aeabi_dsub>
 8008168:	f805 6b01 	strb.w	r6, [r5], #1
 800816c:	9e01      	ldr	r6, [sp, #4]
 800816e:	9f03      	ldr	r7, [sp, #12]
 8008170:	1bae      	subs	r6, r5, r6
 8008172:	42b7      	cmp	r7, r6
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	d135      	bne.n	80081e6 <_dtoa_r+0x6b6>
 800817a:	f7f8 f897 	bl	80002ac <__adddf3>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	f7f8 fcd7 	bl	8000b38 <__aeabi_dcmpgt>
 800818a:	b9d0      	cbnz	r0, 80081c2 <_dtoa_r+0x692>
 800818c:	4642      	mov	r2, r8
 800818e:	464b      	mov	r3, r9
 8008190:	4630      	mov	r0, r6
 8008192:	4639      	mov	r1, r7
 8008194:	f7f8 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008198:	b110      	cbz	r0, 80081a0 <_dtoa_r+0x670>
 800819a:	f01a 0f01 	tst.w	sl, #1
 800819e:	d110      	bne.n	80081c2 <_dtoa_r+0x692>
 80081a0:	4620      	mov	r0, r4
 80081a2:	ee18 1a10 	vmov	r1, s16
 80081a6:	f001 f9cc 	bl	8009542 <_Bfree>
 80081aa:	2300      	movs	r3, #0
 80081ac:	9800      	ldr	r0, [sp, #0]
 80081ae:	702b      	strb	r3, [r5, #0]
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	3001      	adds	r0, #1
 80081b4:	6018      	str	r0, [r3, #0]
 80081b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f43f acf2 	beq.w	8007ba2 <_dtoa_r+0x72>
 80081be:	601d      	str	r5, [r3, #0]
 80081c0:	e4ef      	b.n	8007ba2 <_dtoa_r+0x72>
 80081c2:	9f00      	ldr	r7, [sp, #0]
 80081c4:	462b      	mov	r3, r5
 80081c6:	461d      	mov	r5, r3
 80081c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081cc:	2a39      	cmp	r2, #57	; 0x39
 80081ce:	d106      	bne.n	80081de <_dtoa_r+0x6ae>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d1f7      	bne.n	80081c6 <_dtoa_r+0x696>
 80081d6:	9901      	ldr	r1, [sp, #4]
 80081d8:	2230      	movs	r2, #48	; 0x30
 80081da:	3701      	adds	r7, #1
 80081dc:	700a      	strb	r2, [r1, #0]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	3201      	adds	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e78f      	b.n	8008106 <_dtoa_r+0x5d6>
 80081e6:	4ba6      	ldr	r3, [pc, #664]	; (8008480 <_dtoa_r+0x950>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	f7f8 fa15 	bl	8000618 <__aeabi_dmul>
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	f7f8 fc77 	bl	8000ae8 <__aeabi_dcmpeq>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d09d      	beq.n	800813a <_dtoa_r+0x60a>
 80081fe:	e7cf      	b.n	80081a0 <_dtoa_r+0x670>
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	2a00      	cmp	r2, #0
 8008204:	f000 80d7 	beq.w	80083b6 <_dtoa_r+0x886>
 8008208:	9a06      	ldr	r2, [sp, #24]
 800820a:	2a01      	cmp	r2, #1
 800820c:	f300 80ba 	bgt.w	8008384 <_dtoa_r+0x854>
 8008210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008212:	2a00      	cmp	r2, #0
 8008214:	f000 80b2 	beq.w	800837c <_dtoa_r+0x84c>
 8008218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800821c:	9e07      	ldr	r6, [sp, #28]
 800821e:	9d04      	ldr	r5, [sp, #16]
 8008220:	9a04      	ldr	r2, [sp, #16]
 8008222:	441a      	add	r2, r3
 8008224:	9204      	str	r2, [sp, #16]
 8008226:	9a05      	ldr	r2, [sp, #20]
 8008228:	2101      	movs	r1, #1
 800822a:	441a      	add	r2, r3
 800822c:	4620      	mov	r0, r4
 800822e:	9205      	str	r2, [sp, #20]
 8008230:	f001 fa70 	bl	8009714 <__i2b>
 8008234:	4607      	mov	r7, r0
 8008236:	2d00      	cmp	r5, #0
 8008238:	dd0c      	ble.n	8008254 <_dtoa_r+0x724>
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd09      	ble.n	8008254 <_dtoa_r+0x724>
 8008240:	42ab      	cmp	r3, r5
 8008242:	9a04      	ldr	r2, [sp, #16]
 8008244:	bfa8      	it	ge
 8008246:	462b      	movge	r3, r5
 8008248:	1ad2      	subs	r2, r2, r3
 800824a:	9204      	str	r2, [sp, #16]
 800824c:	9a05      	ldr	r2, [sp, #20]
 800824e:	1aed      	subs	r5, r5, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	b31b      	cbz	r3, 80082a0 <_dtoa_r+0x770>
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80af 	beq.w	80083be <_dtoa_r+0x88e>
 8008260:	2e00      	cmp	r6, #0
 8008262:	dd13      	ble.n	800828c <_dtoa_r+0x75c>
 8008264:	4639      	mov	r1, r7
 8008266:	4632      	mov	r2, r6
 8008268:	4620      	mov	r0, r4
 800826a:	f001 fb13 	bl	8009894 <__pow5mult>
 800826e:	ee18 2a10 	vmov	r2, s16
 8008272:	4601      	mov	r1, r0
 8008274:	4607      	mov	r7, r0
 8008276:	4620      	mov	r0, r4
 8008278:	f001 fa62 	bl	8009740 <__multiply>
 800827c:	ee18 1a10 	vmov	r1, s16
 8008280:	4680      	mov	r8, r0
 8008282:	4620      	mov	r0, r4
 8008284:	f001 f95d 	bl	8009542 <_Bfree>
 8008288:	ee08 8a10 	vmov	s16, r8
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	1b9a      	subs	r2, r3, r6
 8008290:	d006      	beq.n	80082a0 <_dtoa_r+0x770>
 8008292:	ee18 1a10 	vmov	r1, s16
 8008296:	4620      	mov	r0, r4
 8008298:	f001 fafc 	bl	8009894 <__pow5mult>
 800829c:	ee08 0a10 	vmov	s16, r0
 80082a0:	2101      	movs	r1, #1
 80082a2:	4620      	mov	r0, r4
 80082a4:	f001 fa36 	bl	8009714 <__i2b>
 80082a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	4606      	mov	r6, r0
 80082ae:	f340 8088 	ble.w	80083c2 <_dtoa_r+0x892>
 80082b2:	461a      	mov	r2, r3
 80082b4:	4601      	mov	r1, r0
 80082b6:	4620      	mov	r0, r4
 80082b8:	f001 faec 	bl	8009894 <__pow5mult>
 80082bc:	9b06      	ldr	r3, [sp, #24]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	4606      	mov	r6, r0
 80082c2:	f340 8081 	ble.w	80083c8 <_dtoa_r+0x898>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	6933      	ldr	r3, [r6, #16]
 80082cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082d0:	6918      	ldr	r0, [r3, #16]
 80082d2:	f001 f9cf 	bl	8009674 <__hi0bits>
 80082d6:	f1c0 0020 	rsb	r0, r0, #32
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	4418      	add	r0, r3
 80082de:	f010 001f 	ands.w	r0, r0, #31
 80082e2:	f000 8092 	beq.w	800840a <_dtoa_r+0x8da>
 80082e6:	f1c0 0320 	rsb	r3, r0, #32
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	f340 808a 	ble.w	8008404 <_dtoa_r+0x8d4>
 80082f0:	f1c0 001c 	rsb	r0, r0, #28
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	4403      	add	r3, r0
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	4403      	add	r3, r0
 80082fe:	4405      	add	r5, r0
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dd07      	ble.n	8008318 <_dtoa_r+0x7e8>
 8008308:	ee18 1a10 	vmov	r1, s16
 800830c:	461a      	mov	r2, r3
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fb00 	bl	8009914 <__lshift>
 8008314:	ee08 0a10 	vmov	s16, r0
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd05      	ble.n	800832a <_dtoa_r+0x7fa>
 800831e:	4631      	mov	r1, r6
 8008320:	461a      	mov	r2, r3
 8008322:	4620      	mov	r0, r4
 8008324:	f001 faf6 	bl	8009914 <__lshift>
 8008328:	4606      	mov	r6, r0
 800832a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d06e      	beq.n	800840e <_dtoa_r+0x8de>
 8008330:	ee18 0a10 	vmov	r0, s16
 8008334:	4631      	mov	r1, r6
 8008336:	f001 fb5d 	bl	80099f4 <__mcmp>
 800833a:	2800      	cmp	r0, #0
 800833c:	da67      	bge.n	800840e <_dtoa_r+0x8de>
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	220a      	movs	r2, #10
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	f001 f901 	bl	8009554 <__multadd>
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	ee08 0a10 	vmov	s16, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 81b0 	beq.w	80086be <_dtoa_r+0xb8e>
 800835e:	2300      	movs	r3, #0
 8008360:	4639      	mov	r1, r7
 8008362:	220a      	movs	r2, #10
 8008364:	4620      	mov	r0, r4
 8008366:	f001 f8f5 	bl	8009554 <__multadd>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	4607      	mov	r7, r0
 8008370:	f300 808e 	bgt.w	8008490 <_dtoa_r+0x960>
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	2b02      	cmp	r3, #2
 8008378:	dc51      	bgt.n	800841e <_dtoa_r+0x8ee>
 800837a:	e089      	b.n	8008490 <_dtoa_r+0x960>
 800837c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800837e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008382:	e74b      	b.n	800821c <_dtoa_r+0x6ec>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	1e5e      	subs	r6, r3, #1
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	42b3      	cmp	r3, r6
 800838c:	bfbf      	itttt	lt
 800838e:	9b07      	ldrlt	r3, [sp, #28]
 8008390:	9607      	strlt	r6, [sp, #28]
 8008392:	1af2      	sublt	r2, r6, r3
 8008394:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008396:	bfb6      	itet	lt
 8008398:	189b      	addlt	r3, r3, r2
 800839a:	1b9e      	subge	r6, r3, r6
 800839c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	bfb8      	it	lt
 80083a2:	2600      	movlt	r6, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bfb7      	itett	lt
 80083a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083b0:	1a9d      	sublt	r5, r3, r2
 80083b2:	2300      	movlt	r3, #0
 80083b4:	e734      	b.n	8008220 <_dtoa_r+0x6f0>
 80083b6:	9e07      	ldr	r6, [sp, #28]
 80083b8:	9d04      	ldr	r5, [sp, #16]
 80083ba:	9f08      	ldr	r7, [sp, #32]
 80083bc:	e73b      	b.n	8008236 <_dtoa_r+0x706>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	e767      	b.n	8008292 <_dtoa_r+0x762>
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	dc18      	bgt.n	80083fa <_dtoa_r+0x8ca>
 80083c8:	f1ba 0f00 	cmp.w	sl, #0
 80083cc:	d115      	bne.n	80083fa <_dtoa_r+0x8ca>
 80083ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d2:	b993      	cbnz	r3, 80083fa <_dtoa_r+0x8ca>
 80083d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083d8:	0d1b      	lsrs	r3, r3, #20
 80083da:	051b      	lsls	r3, r3, #20
 80083dc:	b183      	cbz	r3, 8008400 <_dtoa_r+0x8d0>
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	3301      	adds	r3, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	3301      	adds	r3, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	f04f 0801 	mov.w	r8, #1
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f af6a 	bne.w	80082ca <_dtoa_r+0x79a>
 80083f6:	2001      	movs	r0, #1
 80083f8:	e76f      	b.n	80082da <_dtoa_r+0x7aa>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	e7f6      	b.n	80083ee <_dtoa_r+0x8be>
 8008400:	4698      	mov	r8, r3
 8008402:	e7f4      	b.n	80083ee <_dtoa_r+0x8be>
 8008404:	f43f af7d 	beq.w	8008302 <_dtoa_r+0x7d2>
 8008408:	4618      	mov	r0, r3
 800840a:	301c      	adds	r0, #28
 800840c:	e772      	b.n	80082f4 <_dtoa_r+0x7c4>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc37      	bgt.n	8008484 <_dtoa_r+0x954>
 8008414:	9b06      	ldr	r3, [sp, #24]
 8008416:	2b02      	cmp	r3, #2
 8008418:	dd34      	ble.n	8008484 <_dtoa_r+0x954>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	b96b      	cbnz	r3, 800843e <_dtoa_r+0x90e>
 8008422:	4631      	mov	r1, r6
 8008424:	2205      	movs	r2, #5
 8008426:	4620      	mov	r0, r4
 8008428:	f001 f894 	bl	8009554 <__multadd>
 800842c:	4601      	mov	r1, r0
 800842e:	4606      	mov	r6, r0
 8008430:	ee18 0a10 	vmov	r0, s16
 8008434:	f001 fade 	bl	80099f4 <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	f73f adba 	bgt.w	8007fb2 <_dtoa_r+0x482>
 800843e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008440:	9d01      	ldr	r5, [sp, #4]
 8008442:	43db      	mvns	r3, r3
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f04f 0800 	mov.w	r8, #0
 800844a:	4631      	mov	r1, r6
 800844c:	4620      	mov	r0, r4
 800844e:	f001 f878 	bl	8009542 <_Bfree>
 8008452:	2f00      	cmp	r7, #0
 8008454:	f43f aea4 	beq.w	80081a0 <_dtoa_r+0x670>
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	d005      	beq.n	800846a <_dtoa_r+0x93a>
 800845e:	45b8      	cmp	r8, r7
 8008460:	d003      	beq.n	800846a <_dtoa_r+0x93a>
 8008462:	4641      	mov	r1, r8
 8008464:	4620      	mov	r0, r4
 8008466:	f001 f86c 	bl	8009542 <_Bfree>
 800846a:	4639      	mov	r1, r7
 800846c:	4620      	mov	r0, r4
 800846e:	f001 f868 	bl	8009542 <_Bfree>
 8008472:	e695      	b.n	80081a0 <_dtoa_r+0x670>
 8008474:	2600      	movs	r6, #0
 8008476:	4637      	mov	r7, r6
 8008478:	e7e1      	b.n	800843e <_dtoa_r+0x90e>
 800847a:	9700      	str	r7, [sp, #0]
 800847c:	4637      	mov	r7, r6
 800847e:	e598      	b.n	8007fb2 <_dtoa_r+0x482>
 8008480:	40240000 	.word	0x40240000
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80c9 	beq.w	800861e <_dtoa_r+0xaee>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	2d00      	cmp	r5, #0
 8008492:	dd05      	ble.n	80084a0 <_dtoa_r+0x970>
 8008494:	4639      	mov	r1, r7
 8008496:	462a      	mov	r2, r5
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fa3b 	bl	8009914 <__lshift>
 800849e:	4607      	mov	r7, r0
 80084a0:	f1b8 0f00 	cmp.w	r8, #0
 80084a4:	d05a      	beq.n	800855c <_dtoa_r+0xa2c>
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4620      	mov	r0, r4
 80084aa:	f001 f825 	bl	80094f8 <_Balloc>
 80084ae:	4605      	mov	r5, r0
 80084b0:	b920      	cbnz	r0, 80084bc <_dtoa_r+0x98c>
 80084b2:	4b87      	ldr	r3, [pc, #540]	; (80086d0 <_dtoa_r+0xba0>)
 80084b4:	4602      	mov	r2, r0
 80084b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ba:	e477      	b.n	8007dac <_dtoa_r+0x27c>
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	3202      	adds	r2, #2
 80084c0:	0092      	lsls	r2, r2, #2
 80084c2:	f107 010c 	add.w	r1, r7, #12
 80084c6:	300c      	adds	r0, #12
 80084c8:	f000 fffc 	bl	80094c4 <memcpy>
 80084cc:	2201      	movs	r2, #1
 80084ce:	4629      	mov	r1, r5
 80084d0:	4620      	mov	r0, r4
 80084d2:	f001 fa1f 	bl	8009914 <__lshift>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	f103 0901 	add.w	r9, r3, #1
 80084dc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	9305      	str	r3, [sp, #20]
 80084e4:	f00a 0301 	and.w	r3, sl, #1
 80084e8:	46b8      	mov	r8, r7
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	4607      	mov	r7, r0
 80084ee:	4631      	mov	r1, r6
 80084f0:	ee18 0a10 	vmov	r0, s16
 80084f4:	f7ff fa90 	bl	8007a18 <quorem>
 80084f8:	4641      	mov	r1, r8
 80084fa:	9002      	str	r0, [sp, #8]
 80084fc:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008500:	ee18 0a10 	vmov	r0, s16
 8008504:	f001 fa76 	bl	80099f4 <__mcmp>
 8008508:	463a      	mov	r2, r7
 800850a:	9003      	str	r0, [sp, #12]
 800850c:	4631      	mov	r1, r6
 800850e:	4620      	mov	r0, r4
 8008510:	f001 fa8c 	bl	8009a2c <__mdiff>
 8008514:	68c2      	ldr	r2, [r0, #12]
 8008516:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800851a:	4605      	mov	r5, r0
 800851c:	bb02      	cbnz	r2, 8008560 <_dtoa_r+0xa30>
 800851e:	4601      	mov	r1, r0
 8008520:	ee18 0a10 	vmov	r0, s16
 8008524:	f001 fa66 	bl	80099f4 <__mcmp>
 8008528:	4602      	mov	r2, r0
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	9207      	str	r2, [sp, #28]
 8008530:	f001 f807 	bl	8009542 <_Bfree>
 8008534:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008538:	ea43 0102 	orr.w	r1, r3, r2
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	430b      	orrs	r3, r1
 8008540:	464d      	mov	r5, r9
 8008542:	d10f      	bne.n	8008564 <_dtoa_r+0xa34>
 8008544:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008548:	d02a      	beq.n	80085a0 <_dtoa_r+0xa70>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd02      	ble.n	8008556 <_dtoa_r+0xa26>
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008556:	f88b a000 	strb.w	sl, [fp]
 800855a:	e776      	b.n	800844a <_dtoa_r+0x91a>
 800855c:	4638      	mov	r0, r7
 800855e:	e7ba      	b.n	80084d6 <_dtoa_r+0x9a6>
 8008560:	2201      	movs	r2, #1
 8008562:	e7e2      	b.n	800852a <_dtoa_r+0x9fa>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	db04      	blt.n	8008574 <_dtoa_r+0xa44>
 800856a:	9906      	ldr	r1, [sp, #24]
 800856c:	430b      	orrs	r3, r1
 800856e:	9904      	ldr	r1, [sp, #16]
 8008570:	430b      	orrs	r3, r1
 8008572:	d122      	bne.n	80085ba <_dtoa_r+0xa8a>
 8008574:	2a00      	cmp	r2, #0
 8008576:	ddee      	ble.n	8008556 <_dtoa_r+0xa26>
 8008578:	ee18 1a10 	vmov	r1, s16
 800857c:	2201      	movs	r2, #1
 800857e:	4620      	mov	r0, r4
 8008580:	f001 f9c8 	bl	8009914 <__lshift>
 8008584:	4631      	mov	r1, r6
 8008586:	ee08 0a10 	vmov	s16, r0
 800858a:	f001 fa33 	bl	80099f4 <__mcmp>
 800858e:	2800      	cmp	r0, #0
 8008590:	dc03      	bgt.n	800859a <_dtoa_r+0xa6a>
 8008592:	d1e0      	bne.n	8008556 <_dtoa_r+0xa26>
 8008594:	f01a 0f01 	tst.w	sl, #1
 8008598:	d0dd      	beq.n	8008556 <_dtoa_r+0xa26>
 800859a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800859e:	d1d7      	bne.n	8008550 <_dtoa_r+0xa20>
 80085a0:	2339      	movs	r3, #57	; 0x39
 80085a2:	f88b 3000 	strb.w	r3, [fp]
 80085a6:	462b      	mov	r3, r5
 80085a8:	461d      	mov	r5, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085b0:	2a39      	cmp	r2, #57	; 0x39
 80085b2:	d071      	beq.n	8008698 <_dtoa_r+0xb68>
 80085b4:	3201      	adds	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	e747      	b.n	800844a <_dtoa_r+0x91a>
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	dd07      	ble.n	80085ce <_dtoa_r+0xa9e>
 80085be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c2:	d0ed      	beq.n	80085a0 <_dtoa_r+0xa70>
 80085c4:	f10a 0301 	add.w	r3, sl, #1
 80085c8:	f88b 3000 	strb.w	r3, [fp]
 80085cc:	e73d      	b.n	800844a <_dtoa_r+0x91a>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085d4:	4599      	cmp	r9, r3
 80085d6:	d047      	beq.n	8008668 <_dtoa_r+0xb38>
 80085d8:	ee18 1a10 	vmov	r1, s16
 80085dc:	2300      	movs	r3, #0
 80085de:	220a      	movs	r2, #10
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 ffb7 	bl	8009554 <__multadd>
 80085e6:	45b8      	cmp	r8, r7
 80085e8:	ee08 0a10 	vmov	s16, r0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	f04f 020a 	mov.w	r2, #10
 80085f4:	4641      	mov	r1, r8
 80085f6:	4620      	mov	r0, r4
 80085f8:	d106      	bne.n	8008608 <_dtoa_r+0xad8>
 80085fa:	f000 ffab 	bl	8009554 <__multadd>
 80085fe:	4680      	mov	r8, r0
 8008600:	4607      	mov	r7, r0
 8008602:	f109 0901 	add.w	r9, r9, #1
 8008606:	e772      	b.n	80084ee <_dtoa_r+0x9be>
 8008608:	f000 ffa4 	bl	8009554 <__multadd>
 800860c:	4639      	mov	r1, r7
 800860e:	4680      	mov	r8, r0
 8008610:	2300      	movs	r3, #0
 8008612:	220a      	movs	r2, #10
 8008614:	4620      	mov	r0, r4
 8008616:	f000 ff9d 	bl	8009554 <__multadd>
 800861a:	4607      	mov	r7, r0
 800861c:	e7f1      	b.n	8008602 <_dtoa_r+0xad2>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	9d01      	ldr	r5, [sp, #4]
 8008624:	ee18 0a10 	vmov	r0, s16
 8008628:	4631      	mov	r1, r6
 800862a:	f7ff f9f5 	bl	8007a18 <quorem>
 800862e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	f805 ab01 	strb.w	sl, [r5], #1
 8008638:	1aea      	subs	r2, r5, r3
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	4293      	cmp	r3, r2
 800863e:	dd09      	ble.n	8008654 <_dtoa_r+0xb24>
 8008640:	ee18 1a10 	vmov	r1, s16
 8008644:	2300      	movs	r3, #0
 8008646:	220a      	movs	r2, #10
 8008648:	4620      	mov	r0, r4
 800864a:	f000 ff83 	bl	8009554 <__multadd>
 800864e:	ee08 0a10 	vmov	s16, r0
 8008652:	e7e7      	b.n	8008624 <_dtoa_r+0xaf4>
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfc8      	it	gt
 800865a:	461d      	movgt	r5, r3
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	bfd8      	it	le
 8008660:	2501      	movle	r5, #1
 8008662:	441d      	add	r5, r3
 8008664:	f04f 0800 	mov.w	r8, #0
 8008668:	ee18 1a10 	vmov	r1, s16
 800866c:	2201      	movs	r2, #1
 800866e:	4620      	mov	r0, r4
 8008670:	f001 f950 	bl	8009914 <__lshift>
 8008674:	4631      	mov	r1, r6
 8008676:	ee08 0a10 	vmov	s16, r0
 800867a:	f001 f9bb 	bl	80099f4 <__mcmp>
 800867e:	2800      	cmp	r0, #0
 8008680:	dc91      	bgt.n	80085a6 <_dtoa_r+0xa76>
 8008682:	d102      	bne.n	800868a <_dtoa_r+0xb5a>
 8008684:	f01a 0f01 	tst.w	sl, #1
 8008688:	d18d      	bne.n	80085a6 <_dtoa_r+0xa76>
 800868a:	462b      	mov	r3, r5
 800868c:	461d      	mov	r5, r3
 800868e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008692:	2a30      	cmp	r2, #48	; 0x30
 8008694:	d0fa      	beq.n	800868c <_dtoa_r+0xb5c>
 8008696:	e6d8      	b.n	800844a <_dtoa_r+0x91a>
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d184      	bne.n	80085a8 <_dtoa_r+0xa78>
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	2331      	movs	r3, #49	; 0x31
 80086a6:	7013      	strb	r3, [r2, #0]
 80086a8:	e6cf      	b.n	800844a <_dtoa_r+0x91a>
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <_dtoa_r+0xba4>)
 80086ac:	f7ff ba97 	b.w	8007bde <_dtoa_r+0xae>
 80086b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f47f aa7b 	bne.w	8007bae <_dtoa_r+0x7e>
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <_dtoa_r+0xba8>)
 80086ba:	f7ff ba90 	b.w	8007bde <_dtoa_r+0xae>
 80086be:	9b02      	ldr	r3, [sp, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dcae      	bgt.n	8008622 <_dtoa_r+0xaf2>
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	f73f aea9 	bgt.w	800841e <_dtoa_r+0x8ee>
 80086cc:	e7a9      	b.n	8008622 <_dtoa_r+0xaf2>
 80086ce:	bf00      	nop
 80086d0:	0800bdfa 	.word	0x0800bdfa
 80086d4:	0800bcca 	.word	0x0800bcca
 80086d8:	0800bdf1 	.word	0x0800bdf1

080086dc <__libc_fini_array>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d07      	ldr	r5, [pc, #28]	; (80086fc <__libc_fini_array+0x20>)
 80086e0:	4c07      	ldr	r4, [pc, #28]	; (8008700 <__libc_fini_array+0x24>)
 80086e2:	1b64      	subs	r4, r4, r5
 80086e4:	10a4      	asrs	r4, r4, #2
 80086e6:	b91c      	cbnz	r4, 80086f0 <__libc_fini_array+0x14>
 80086e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ec:	f003 b964 	b.w	800b9b8 <_fini>
 80086f0:	3c01      	subs	r4, #1
 80086f2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80086f6:	4798      	blx	r3
 80086f8:	e7f5      	b.n	80086e6 <__libc_fini_array+0xa>
 80086fa:	bf00      	nop
 80086fc:	0800c0a8 	.word	0x0800c0a8
 8008700:	0800c0ac 	.word	0x0800c0ac

08008704 <_malloc_trim_r>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	4606      	mov	r6, r0
 800870a:	2008      	movs	r0, #8
 800870c:	460c      	mov	r4, r1
 800870e:	f001 fc59 	bl	8009fc4 <sysconf>
 8008712:	4f23      	ldr	r7, [pc, #140]	; (80087a0 <_malloc_trim_r+0x9c>)
 8008714:	4680      	mov	r8, r0
 8008716:	4630      	mov	r0, r6
 8008718:	f000 fee2 	bl	80094e0 <__malloc_lock>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	685d      	ldr	r5, [r3, #4]
 8008720:	f025 0503 	bic.w	r5, r5, #3
 8008724:	1b2c      	subs	r4, r5, r4
 8008726:	3c11      	subs	r4, #17
 8008728:	4444      	add	r4, r8
 800872a:	fbb4 f4f8 	udiv	r4, r4, r8
 800872e:	3c01      	subs	r4, #1
 8008730:	fb08 f404 	mul.w	r4, r8, r4
 8008734:	45a0      	cmp	r8, r4
 8008736:	dd05      	ble.n	8008744 <_malloc_trim_r+0x40>
 8008738:	4630      	mov	r0, r6
 800873a:	f000 fed7 	bl	80094ec <__malloc_unlock>
 800873e:	2000      	movs	r0, #0
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	2100      	movs	r1, #0
 8008746:	4630      	mov	r0, r6
 8008748:	f001 fb8a 	bl	8009e60 <_sbrk_r>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	442b      	add	r3, r5
 8008750:	4298      	cmp	r0, r3
 8008752:	d1f1      	bne.n	8008738 <_malloc_trim_r+0x34>
 8008754:	4261      	negs	r1, r4
 8008756:	4630      	mov	r0, r6
 8008758:	f001 fb82 	bl	8009e60 <_sbrk_r>
 800875c:	3001      	adds	r0, #1
 800875e:	d110      	bne.n	8008782 <_malloc_trim_r+0x7e>
 8008760:	2100      	movs	r1, #0
 8008762:	4630      	mov	r0, r6
 8008764:	f001 fb7c 	bl	8009e60 <_sbrk_r>
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	1a83      	subs	r3, r0, r2
 800876c:	2b0f      	cmp	r3, #15
 800876e:	dde3      	ble.n	8008738 <_malloc_trim_r+0x34>
 8008770:	490c      	ldr	r1, [pc, #48]	; (80087a4 <_malloc_trim_r+0xa0>)
 8008772:	6809      	ldr	r1, [r1, #0]
 8008774:	1a40      	subs	r0, r0, r1
 8008776:	490c      	ldr	r1, [pc, #48]	; (80087a8 <_malloc_trim_r+0xa4>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	6008      	str	r0, [r1, #0]
 800877e:	6053      	str	r3, [r2, #4]
 8008780:	e7da      	b.n	8008738 <_malloc_trim_r+0x34>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <_malloc_trim_r+0xa4>)
 8008786:	1b2d      	subs	r5, r5, r4
 8008788:	f045 0501 	orr.w	r5, r5, #1
 800878c:	605d      	str	r5, [r3, #4]
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	4630      	mov	r0, r6
 8008792:	1b1b      	subs	r3, r3, r4
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	f000 fea9 	bl	80094ec <__malloc_unlock>
 800879a:	2001      	movs	r0, #1
 800879c:	e7d0      	b.n	8008740 <_malloc_trim_r+0x3c>
 800879e:	bf00      	nop
 80087a0:	200005b4 	.word	0x200005b4
 80087a4:	200009bc 	.word	0x200009bc
 80087a8:	20000bb4 	.word	0x20000bb4

080087ac <_free_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	4605      	mov	r5, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	2900      	cmp	r1, #0
 80087b4:	f000 80b1 	beq.w	800891a <_free_r+0x16e>
 80087b8:	f000 fe92 	bl	80094e0 <__malloc_lock>
 80087bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80087c0:	4856      	ldr	r0, [pc, #344]	; (800891c <_free_r+0x170>)
 80087c2:	f022 0401 	bic.w	r4, r2, #1
 80087c6:	f1a7 0308 	sub.w	r3, r7, #8
 80087ca:	eb03 0c04 	add.w	ip, r3, r4
 80087ce:	6881      	ldr	r1, [r0, #8]
 80087d0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80087d4:	4561      	cmp	r1, ip
 80087d6:	f026 0603 	bic.w	r6, r6, #3
 80087da:	f002 0201 	and.w	r2, r2, #1
 80087de:	d11b      	bne.n	8008818 <_free_r+0x6c>
 80087e0:	4434      	add	r4, r6
 80087e2:	b93a      	cbnz	r2, 80087f4 <_free_r+0x48>
 80087e4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	4414      	add	r4, r2
 80087ec:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80087f0:	60ca      	str	r2, [r1, #12]
 80087f2:	6091      	str	r1, [r2, #8]
 80087f4:	f044 0201 	orr.w	r2, r4, #1
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	6083      	str	r3, [r0, #8]
 80087fc:	4b48      	ldr	r3, [pc, #288]	; (8008920 <_free_r+0x174>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	42a3      	cmp	r3, r4
 8008802:	d804      	bhi.n	800880e <_free_r+0x62>
 8008804:	4b47      	ldr	r3, [pc, #284]	; (8008924 <_free_r+0x178>)
 8008806:	4628      	mov	r0, r5
 8008808:	6819      	ldr	r1, [r3, #0]
 800880a:	f7ff ff7b 	bl	8008704 <_malloc_trim_r>
 800880e:	4628      	mov	r0, r5
 8008810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008814:	f000 be6a 	b.w	80094ec <__malloc_unlock>
 8008818:	f8cc 6004 	str.w	r6, [ip, #4]
 800881c:	2a00      	cmp	r2, #0
 800881e:	d138      	bne.n	8008892 <_free_r+0xe6>
 8008820:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008824:	1a5b      	subs	r3, r3, r1
 8008826:	440c      	add	r4, r1
 8008828:	6899      	ldr	r1, [r3, #8]
 800882a:	f100 0708 	add.w	r7, r0, #8
 800882e:	42b9      	cmp	r1, r7
 8008830:	d031      	beq.n	8008896 <_free_r+0xea>
 8008832:	68df      	ldr	r7, [r3, #12]
 8008834:	60cf      	str	r7, [r1, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	eb0c 0106 	add.w	r1, ip, r6
 800883c:	6849      	ldr	r1, [r1, #4]
 800883e:	07c9      	lsls	r1, r1, #31
 8008840:	d40b      	bmi.n	800885a <_free_r+0xae>
 8008842:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008846:	4434      	add	r4, r6
 8008848:	bb3a      	cbnz	r2, 800889a <_free_r+0xee>
 800884a:	4e37      	ldr	r6, [pc, #220]	; (8008928 <_free_r+0x17c>)
 800884c:	42b1      	cmp	r1, r6
 800884e:	d124      	bne.n	800889a <_free_r+0xee>
 8008850:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008854:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008858:	2201      	movs	r2, #1
 800885a:	f044 0101 	orr.w	r1, r4, #1
 800885e:	6059      	str	r1, [r3, #4]
 8008860:	511c      	str	r4, [r3, r4]
 8008862:	2a00      	cmp	r2, #0
 8008864:	d1d3      	bne.n	800880e <_free_r+0x62>
 8008866:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800886a:	d21b      	bcs.n	80088a4 <_free_r+0xf8>
 800886c:	0961      	lsrs	r1, r4, #5
 800886e:	08e2      	lsrs	r2, r4, #3
 8008870:	2401      	movs	r4, #1
 8008872:	408c      	lsls	r4, r1
 8008874:	6841      	ldr	r1, [r0, #4]
 8008876:	3201      	adds	r2, #1
 8008878:	430c      	orrs	r4, r1
 800887a:	6044      	str	r4, [r0, #4]
 800887c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008880:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008884:	3908      	subs	r1, #8
 8008886:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800888a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800888e:	60e3      	str	r3, [r4, #12]
 8008890:	e7bd      	b.n	800880e <_free_r+0x62>
 8008892:	2200      	movs	r2, #0
 8008894:	e7d0      	b.n	8008838 <_free_r+0x8c>
 8008896:	2201      	movs	r2, #1
 8008898:	e7ce      	b.n	8008838 <_free_r+0x8c>
 800889a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800889e:	60ce      	str	r6, [r1, #12]
 80088a0:	60b1      	str	r1, [r6, #8]
 80088a2:	e7da      	b.n	800885a <_free_r+0xae>
 80088a4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80088a8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80088ac:	d214      	bcs.n	80088d8 <_free_r+0x12c>
 80088ae:	09a2      	lsrs	r2, r4, #6
 80088b0:	3238      	adds	r2, #56	; 0x38
 80088b2:	1c51      	adds	r1, r2, #1
 80088b4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80088b8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80088bc:	428e      	cmp	r6, r1
 80088be:	d125      	bne.n	800890c <_free_r+0x160>
 80088c0:	2401      	movs	r4, #1
 80088c2:	1092      	asrs	r2, r2, #2
 80088c4:	fa04 f202 	lsl.w	r2, r4, r2
 80088c8:	6844      	ldr	r4, [r0, #4]
 80088ca:	4322      	orrs	r2, r4
 80088cc:	6042      	str	r2, [r0, #4]
 80088ce:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80088d2:	60b3      	str	r3, [r6, #8]
 80088d4:	60cb      	str	r3, [r1, #12]
 80088d6:	e79a      	b.n	800880e <_free_r+0x62>
 80088d8:	2a14      	cmp	r2, #20
 80088da:	d801      	bhi.n	80088e0 <_free_r+0x134>
 80088dc:	325b      	adds	r2, #91	; 0x5b
 80088de:	e7e8      	b.n	80088b2 <_free_r+0x106>
 80088e0:	2a54      	cmp	r2, #84	; 0x54
 80088e2:	d802      	bhi.n	80088ea <_free_r+0x13e>
 80088e4:	0b22      	lsrs	r2, r4, #12
 80088e6:	326e      	adds	r2, #110	; 0x6e
 80088e8:	e7e3      	b.n	80088b2 <_free_r+0x106>
 80088ea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80088ee:	d802      	bhi.n	80088f6 <_free_r+0x14a>
 80088f0:	0be2      	lsrs	r2, r4, #15
 80088f2:	3277      	adds	r2, #119	; 0x77
 80088f4:	e7dd      	b.n	80088b2 <_free_r+0x106>
 80088f6:	f240 5154 	movw	r1, #1364	; 0x554
 80088fa:	428a      	cmp	r2, r1
 80088fc:	bf9a      	itte	ls
 80088fe:	0ca2      	lsrls	r2, r4, #18
 8008900:	327c      	addls	r2, #124	; 0x7c
 8008902:	227e      	movhi	r2, #126	; 0x7e
 8008904:	e7d5      	b.n	80088b2 <_free_r+0x106>
 8008906:	6889      	ldr	r1, [r1, #8]
 8008908:	428e      	cmp	r6, r1
 800890a:	d004      	beq.n	8008916 <_free_r+0x16a>
 800890c:	684a      	ldr	r2, [r1, #4]
 800890e:	f022 0203 	bic.w	r2, r2, #3
 8008912:	42a2      	cmp	r2, r4
 8008914:	d8f7      	bhi.n	8008906 <_free_r+0x15a>
 8008916:	68ce      	ldr	r6, [r1, #12]
 8008918:	e7d9      	b.n	80088ce <_free_r+0x122>
 800891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891c:	200005b4 	.word	0x200005b4
 8008920:	200009c0 	.word	0x200009c0
 8008924:	20000be4 	.word	0x20000be4
 8008928:	200005bc 	.word	0x200005bc

0800892c <rshift>:
 800892c:	6903      	ldr	r3, [r0, #16]
 800892e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800893a:	f100 0414 	add.w	r4, r0, #20
 800893e:	dd45      	ble.n	80089cc <rshift+0xa0>
 8008940:	f011 011f 	ands.w	r1, r1, #31
 8008944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800894c:	d10c      	bne.n	8008968 <rshift+0x3c>
 800894e:	f100 0710 	add.w	r7, r0, #16
 8008952:	4629      	mov	r1, r5
 8008954:	42b1      	cmp	r1, r6
 8008956:	d334      	bcc.n	80089c2 <rshift+0x96>
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	1eea      	subs	r2, r5, #3
 800895e:	4296      	cmp	r6, r2
 8008960:	bf38      	it	cc
 8008962:	2300      	movcc	r3, #0
 8008964:	4423      	add	r3, r4
 8008966:	e015      	b.n	8008994 <rshift+0x68>
 8008968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800896c:	f1c1 0820 	rsb	r8, r1, #32
 8008970:	40cf      	lsrs	r7, r1
 8008972:	f105 0e04 	add.w	lr, r5, #4
 8008976:	46a1      	mov	r9, r4
 8008978:	4576      	cmp	r6, lr
 800897a:	46f4      	mov	ip, lr
 800897c:	d815      	bhi.n	80089aa <rshift+0x7e>
 800897e:	1a9a      	subs	r2, r3, r2
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	3a04      	subs	r2, #4
 8008984:	3501      	adds	r5, #1
 8008986:	42ae      	cmp	r6, r5
 8008988:	bf38      	it	cc
 800898a:	2200      	movcc	r2, #0
 800898c:	18a3      	adds	r3, r4, r2
 800898e:	50a7      	str	r7, [r4, r2]
 8008990:	b107      	cbz	r7, 8008994 <rshift+0x68>
 8008992:	3304      	adds	r3, #4
 8008994:	1b1a      	subs	r2, r3, r4
 8008996:	42a3      	cmp	r3, r4
 8008998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800899c:	bf08      	it	eq
 800899e:	2300      	moveq	r3, #0
 80089a0:	6102      	str	r2, [r0, #16]
 80089a2:	bf08      	it	eq
 80089a4:	6143      	streq	r3, [r0, #20]
 80089a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089aa:	f8dc c000 	ldr.w	ip, [ip]
 80089ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80089b2:	ea4c 0707 	orr.w	r7, ip, r7
 80089b6:	f849 7b04 	str.w	r7, [r9], #4
 80089ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089be:	40cf      	lsrs	r7, r1
 80089c0:	e7da      	b.n	8008978 <rshift+0x4c>
 80089c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80089c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80089ca:	e7c3      	b.n	8008954 <rshift+0x28>
 80089cc:	4623      	mov	r3, r4
 80089ce:	e7e1      	b.n	8008994 <rshift+0x68>

080089d0 <__hexdig_fun>:
 80089d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d802      	bhi.n	80089de <__hexdig_fun+0xe>
 80089d8:	3820      	subs	r0, #32
 80089da:	b2c0      	uxtb	r0, r0
 80089dc:	4770      	bx	lr
 80089de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d801      	bhi.n	80089ea <__hexdig_fun+0x1a>
 80089e6:	3847      	subs	r0, #71	; 0x47
 80089e8:	e7f7      	b.n	80089da <__hexdig_fun+0xa>
 80089ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d801      	bhi.n	80089f6 <__hexdig_fun+0x26>
 80089f2:	3827      	subs	r0, #39	; 0x27
 80089f4:	e7f1      	b.n	80089da <__hexdig_fun+0xa>
 80089f6:	2000      	movs	r0, #0
 80089f8:	4770      	bx	lr
	...

080089fc <__gethex>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	ed2d 8b02 	vpush	{d8}
 8008a04:	b089      	sub	sp, #36	; 0x24
 8008a06:	ee08 0a10 	vmov	s16, r0
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	4bb4      	ldr	r3, [pc, #720]	; (8008ce0 <__gethex+0x2e4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	4618      	mov	r0, r3
 8008a14:	468b      	mov	fp, r1
 8008a16:	4690      	mov	r8, r2
 8008a18:	f7f7 fbe4 	bl	80001e4 <strlen>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	f8db 2000 	ldr.w	r2, [fp]
 8008a22:	4403      	add	r3, r0
 8008a24:	4682      	mov	sl, r0
 8008a26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	1c93      	adds	r3, r2, #2
 8008a2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a36:	32fe      	adds	r2, #254	; 0xfe
 8008a38:	18d1      	adds	r1, r2, r3
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a40:	9100      	str	r1, [sp, #0]
 8008a42:	2830      	cmp	r0, #48	; 0x30
 8008a44:	d0f8      	beq.n	8008a38 <__gethex+0x3c>
 8008a46:	f7ff ffc3 	bl	80089d0 <__hexdig_fun>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d13a      	bne.n	8008ac6 <__gethex+0xca>
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	4652      	mov	r2, sl
 8008a54:	4638      	mov	r0, r7
 8008a56:	f001 fa13 	bl	8009e80 <strncmp>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d168      	bne.n	8008b32 <__gethex+0x136>
 8008a60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a64:	eb07 060a 	add.w	r6, r7, sl
 8008a68:	f7ff ffb2 	bl	80089d0 <__hexdig_fun>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d062      	beq.n	8008b36 <__gethex+0x13a>
 8008a70:	4633      	mov	r3, r6
 8008a72:	7818      	ldrb	r0, [r3, #0]
 8008a74:	2830      	cmp	r0, #48	; 0x30
 8008a76:	461f      	mov	r7, r3
 8008a78:	f103 0301 	add.w	r3, r3, #1
 8008a7c:	d0f9      	beq.n	8008a72 <__gethex+0x76>
 8008a7e:	f7ff ffa7 	bl	80089d0 <__hexdig_fun>
 8008a82:	2301      	movs	r3, #1
 8008a84:	fab0 f480 	clz	r4, r0
 8008a88:	0964      	lsrs	r4, r4, #5
 8008a8a:	4635      	mov	r5, r6
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	463a      	mov	r2, r7
 8008a90:	4616      	mov	r6, r2
 8008a92:	3201      	adds	r2, #1
 8008a94:	7830      	ldrb	r0, [r6, #0]
 8008a96:	f7ff ff9b 	bl	80089d0 <__hexdig_fun>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1f8      	bne.n	8008a90 <__gethex+0x94>
 8008a9e:	9901      	ldr	r1, [sp, #4]
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f001 f9ec 	bl	8009e80 <strncmp>
 8008aa8:	b980      	cbnz	r0, 8008acc <__gethex+0xd0>
 8008aaa:	b94d      	cbnz	r5, 8008ac0 <__gethex+0xc4>
 8008aac:	eb06 050a 	add.w	r5, r6, sl
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	7830      	ldrb	r0, [r6, #0]
 8008ab8:	f7ff ff8a 	bl	80089d0 <__hexdig_fun>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1f8      	bne.n	8008ab2 <__gethex+0xb6>
 8008ac0:	1bad      	subs	r5, r5, r6
 8008ac2:	00ad      	lsls	r5, r5, #2
 8008ac4:	e004      	b.n	8008ad0 <__gethex+0xd4>
 8008ac6:	2400      	movs	r4, #0
 8008ac8:	4625      	mov	r5, r4
 8008aca:	e7e0      	b.n	8008a8e <__gethex+0x92>
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	d1f7      	bne.n	8008ac0 <__gethex+0xc4>
 8008ad0:	7833      	ldrb	r3, [r6, #0]
 8008ad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ad6:	2b50      	cmp	r3, #80	; 0x50
 8008ad8:	d13b      	bne.n	8008b52 <__gethex+0x156>
 8008ada:	7873      	ldrb	r3, [r6, #1]
 8008adc:	2b2b      	cmp	r3, #43	; 0x2b
 8008ade:	d02c      	beq.n	8008b3a <__gethex+0x13e>
 8008ae0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ae2:	d02e      	beq.n	8008b42 <__gethex+0x146>
 8008ae4:	1c71      	adds	r1, r6, #1
 8008ae6:	f04f 0900 	mov.w	r9, #0
 8008aea:	7808      	ldrb	r0, [r1, #0]
 8008aec:	f7ff ff70 	bl	80089d0 <__hexdig_fun>
 8008af0:	1e43      	subs	r3, r0, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b18      	cmp	r3, #24
 8008af6:	d82c      	bhi.n	8008b52 <__gethex+0x156>
 8008af8:	f1a0 0210 	sub.w	r2, r0, #16
 8008afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b00:	f7ff ff66 	bl	80089d0 <__hexdig_fun>
 8008b04:	1e43      	subs	r3, r0, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b18      	cmp	r3, #24
 8008b0a:	d91d      	bls.n	8008b48 <__gethex+0x14c>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	d000      	beq.n	8008b14 <__gethex+0x118>
 8008b12:	4252      	negs	r2, r2
 8008b14:	4415      	add	r5, r2
 8008b16:	f8cb 1000 	str.w	r1, [fp]
 8008b1a:	b1e4      	cbz	r4, 8008b56 <__gethex+0x15a>
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2700      	movne	r7, #0
 8008b24:	2706      	moveq	r7, #6
 8008b26:	4638      	mov	r0, r7
 8008b28:	b009      	add	sp, #36	; 0x24
 8008b2a:	ecbd 8b02 	vpop	{d8}
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	463e      	mov	r6, r7
 8008b34:	4625      	mov	r5, r4
 8008b36:	2401      	movs	r4, #1
 8008b38:	e7ca      	b.n	8008ad0 <__gethex+0xd4>
 8008b3a:	f04f 0900 	mov.w	r9, #0
 8008b3e:	1cb1      	adds	r1, r6, #2
 8008b40:	e7d3      	b.n	8008aea <__gethex+0xee>
 8008b42:	f04f 0901 	mov.w	r9, #1
 8008b46:	e7fa      	b.n	8008b3e <__gethex+0x142>
 8008b48:	230a      	movs	r3, #10
 8008b4a:	fb03 0202 	mla	r2, r3, r2, r0
 8008b4e:	3a10      	subs	r2, #16
 8008b50:	e7d4      	b.n	8008afc <__gethex+0x100>
 8008b52:	4631      	mov	r1, r6
 8008b54:	e7df      	b.n	8008b16 <__gethex+0x11a>
 8008b56:	1bf3      	subs	r3, r6, r7
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	dc0b      	bgt.n	8008b78 <__gethex+0x17c>
 8008b60:	ee18 0a10 	vmov	r0, s16
 8008b64:	f000 fcc8 	bl	80094f8 <_Balloc>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	b940      	cbnz	r0, 8008b7e <__gethex+0x182>
 8008b6c:	4b5d      	ldr	r3, [pc, #372]	; (8008ce4 <__gethex+0x2e8>)
 8008b6e:	4602      	mov	r2, r0
 8008b70:	21de      	movs	r1, #222	; 0xde
 8008b72:	485d      	ldr	r0, [pc, #372]	; (8008ce8 <__gethex+0x2ec>)
 8008b74:	f001 fa82 	bl	800a07c <__assert_func>
 8008b78:	3101      	adds	r1, #1
 8008b7a:	105b      	asrs	r3, r3, #1
 8008b7c:	e7ee      	b.n	8008b5c <__gethex+0x160>
 8008b7e:	f100 0914 	add.w	r9, r0, #20
 8008b82:	f04f 0b00 	mov.w	fp, #0
 8008b86:	f1ca 0301 	rsb	r3, sl, #1
 8008b8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b8e:	f8cd b000 	str.w	fp, [sp]
 8008b92:	9306      	str	r3, [sp, #24]
 8008b94:	42b7      	cmp	r7, r6
 8008b96:	d340      	bcc.n	8008c1a <__gethex+0x21e>
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	eba0 0009 	sub.w	r0, r0, r9
 8008ba4:	1080      	asrs	r0, r0, #2
 8008ba6:	0146      	lsls	r6, r0, #5
 8008ba8:	6120      	str	r0, [r4, #16]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fd62 	bl	8009674 <__hi0bits>
 8008bb0:	1a30      	subs	r0, r6, r0
 8008bb2:	f8d8 6000 	ldr.w	r6, [r8]
 8008bb6:	42b0      	cmp	r0, r6
 8008bb8:	dd63      	ble.n	8008c82 <__gethex+0x286>
 8008bba:	1b87      	subs	r7, r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f001 f8ec 	bl	8009d9c <__any_on>
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	b1a8      	cbz	r0, 8008bf4 <__gethex+0x1f8>
 8008bc8:	1e7b      	subs	r3, r7, #1
 8008bca:	1159      	asrs	r1, r3, #5
 8008bcc:	f003 021f 	and.w	r2, r3, #31
 8008bd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bd4:	f04f 0a01 	mov.w	sl, #1
 8008bd8:	fa0a f202 	lsl.w	r2, sl, r2
 8008bdc:	420a      	tst	r2, r1
 8008bde:	d009      	beq.n	8008bf4 <__gethex+0x1f8>
 8008be0:	4553      	cmp	r3, sl
 8008be2:	dd05      	ble.n	8008bf0 <__gethex+0x1f4>
 8008be4:	1eb9      	subs	r1, r7, #2
 8008be6:	4620      	mov	r0, r4
 8008be8:	f001 f8d8 	bl	8009d9c <__any_on>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d145      	bne.n	8008c7c <__gethex+0x280>
 8008bf0:	f04f 0a02 	mov.w	sl, #2
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff fe98 	bl	800892c <rshift>
 8008bfc:	443d      	add	r5, r7
 8008bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c02:	42ab      	cmp	r3, r5
 8008c04:	da4c      	bge.n	8008ca0 <__gethex+0x2a4>
 8008c06:	ee18 0a10 	vmov	r0, s16
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	f000 fc99 	bl	8009542 <_Bfree>
 8008c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c12:	2300      	movs	r3, #0
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	27a3      	movs	r7, #163	; 0xa3
 8008c18:	e785      	b.n	8008b26 <__gethex+0x12a>
 8008c1a:	1e73      	subs	r3, r6, #1
 8008c1c:	9a05      	ldr	r2, [sp, #20]
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d019      	beq.n	8008c5c <__gethex+0x260>
 8008c28:	f1bb 0f20 	cmp.w	fp, #32
 8008c2c:	d107      	bne.n	8008c3e <__gethex+0x242>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	9a00      	ldr	r2, [sp, #0]
 8008c32:	f843 2b04 	str.w	r2, [r3], #4
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	469b      	mov	fp, r3
 8008c3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c42:	f7ff fec5 	bl	80089d0 <__hexdig_fun>
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	f000 000f 	and.w	r0, r0, #15
 8008c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c50:	4303      	orrs	r3, r0
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	f10b 0b04 	add.w	fp, fp, #4
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	e00d      	b.n	8008c78 <__gethex+0x27c>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	4413      	add	r3, r2
 8008c62:	42bb      	cmp	r3, r7
 8008c64:	d3e0      	bcc.n	8008c28 <__gethex+0x22c>
 8008c66:	4618      	mov	r0, r3
 8008c68:	9901      	ldr	r1, [sp, #4]
 8008c6a:	9307      	str	r3, [sp, #28]
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	f001 f907 	bl	8009e80 <strncmp>
 8008c72:	9b07      	ldr	r3, [sp, #28]
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d1d7      	bne.n	8008c28 <__gethex+0x22c>
 8008c78:	461e      	mov	r6, r3
 8008c7a:	e78b      	b.n	8008b94 <__gethex+0x198>
 8008c7c:	f04f 0a03 	mov.w	sl, #3
 8008c80:	e7b8      	b.n	8008bf4 <__gethex+0x1f8>
 8008c82:	da0a      	bge.n	8008c9a <__gethex+0x29e>
 8008c84:	1a37      	subs	r7, r6, r0
 8008c86:	4621      	mov	r1, r4
 8008c88:	ee18 0a10 	vmov	r0, s16
 8008c8c:	463a      	mov	r2, r7
 8008c8e:	f000 fe41 	bl	8009914 <__lshift>
 8008c92:	1bed      	subs	r5, r5, r7
 8008c94:	4604      	mov	r4, r0
 8008c96:	f100 0914 	add.w	r9, r0, #20
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	e7ae      	b.n	8008bfe <__gethex+0x202>
 8008ca0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ca4:	42a8      	cmp	r0, r5
 8008ca6:	dd72      	ble.n	8008d8e <__gethex+0x392>
 8008ca8:	1b45      	subs	r5, r0, r5
 8008caa:	42ae      	cmp	r6, r5
 8008cac:	dc36      	bgt.n	8008d1c <__gethex+0x320>
 8008cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d02a      	beq.n	8008d0c <__gethex+0x310>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d02c      	beq.n	8008d14 <__gethex+0x318>
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d11c      	bne.n	8008cf8 <__gethex+0x2fc>
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	d11a      	bne.n	8008cf8 <__gethex+0x2fc>
 8008cc2:	2e01      	cmp	r6, #1
 8008cc4:	d112      	bne.n	8008cec <__gethex+0x2f0>
 8008cc6:	9a04      	ldr	r2, [sp, #16]
 8008cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	f8c9 3000 	str.w	r3, [r9]
 8008cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cd8:	2762      	movs	r7, #98	; 0x62
 8008cda:	601c      	str	r4, [r3, #0]
 8008cdc:	e723      	b.n	8008b26 <__gethex+0x12a>
 8008cde:	bf00      	nop
 8008ce0:	0800becc 	.word	0x0800becc
 8008ce4:	0800bdfa 	.word	0x0800bdfa
 8008ce8:	0800be66 	.word	0x0800be66
 8008cec:	1e71      	subs	r1, r6, #1
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f001 f854 	bl	8009d9c <__any_on>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <__gethex+0x2ca>
 8008cf8:	ee18 0a10 	vmov	r0, s16
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f000 fc20 	bl	8009542 <_Bfree>
 8008d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d04:	2300      	movs	r3, #0
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	2750      	movs	r7, #80	; 0x50
 8008d0a:	e70c      	b.n	8008b26 <__gethex+0x12a>
 8008d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f2      	bne.n	8008cf8 <__gethex+0x2fc>
 8008d12:	e7d8      	b.n	8008cc6 <__gethex+0x2ca>
 8008d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d5      	bne.n	8008cc6 <__gethex+0x2ca>
 8008d1a:	e7ed      	b.n	8008cf8 <__gethex+0x2fc>
 8008d1c:	1e6f      	subs	r7, r5, #1
 8008d1e:	f1ba 0f00 	cmp.w	sl, #0
 8008d22:	d131      	bne.n	8008d88 <__gethex+0x38c>
 8008d24:	b127      	cbz	r7, 8008d30 <__gethex+0x334>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f001 f837 	bl	8009d9c <__any_on>
 8008d2e:	4682      	mov	sl, r0
 8008d30:	117b      	asrs	r3, r7, #5
 8008d32:	2101      	movs	r1, #1
 8008d34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d38:	f007 071f 	and.w	r7, r7, #31
 8008d3c:	fa01 f707 	lsl.w	r7, r1, r7
 8008d40:	421f      	tst	r7, r3
 8008d42:	4629      	mov	r1, r5
 8008d44:	4620      	mov	r0, r4
 8008d46:	bf18      	it	ne
 8008d48:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d4c:	1b76      	subs	r6, r6, r5
 8008d4e:	f7ff fded 	bl	800892c <rshift>
 8008d52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d56:	2702      	movs	r7, #2
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d048      	beq.n	8008df0 <__gethex+0x3f4>
 8008d5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d015      	beq.n	8008d92 <__gethex+0x396>
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d017      	beq.n	8008d9a <__gethex+0x39e>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d109      	bne.n	8008d82 <__gethex+0x386>
 8008d6e:	f01a 0f02 	tst.w	sl, #2
 8008d72:	d006      	beq.n	8008d82 <__gethex+0x386>
 8008d74:	f8d9 0000 	ldr.w	r0, [r9]
 8008d78:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d7c:	f01a 0f01 	tst.w	sl, #1
 8008d80:	d10e      	bne.n	8008da0 <__gethex+0x3a4>
 8008d82:	f047 0710 	orr.w	r7, r7, #16
 8008d86:	e033      	b.n	8008df0 <__gethex+0x3f4>
 8008d88:	f04f 0a01 	mov.w	sl, #1
 8008d8c:	e7d0      	b.n	8008d30 <__gethex+0x334>
 8008d8e:	2701      	movs	r7, #1
 8008d90:	e7e2      	b.n	8008d58 <__gethex+0x35c>
 8008d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d94:	f1c3 0301 	rsb	r3, r3, #1
 8008d98:	9315      	str	r3, [sp, #84]	; 0x54
 8008d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <__gethex+0x386>
 8008da0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008da4:	f104 0314 	add.w	r3, r4, #20
 8008da8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008db0:	f04f 0c00 	mov.w	ip, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008dbe:	d01c      	beq.n	8008dfa <__gethex+0x3fe>
 8008dc0:	3201      	adds	r2, #1
 8008dc2:	6002      	str	r2, [r0, #0]
 8008dc4:	2f02      	cmp	r7, #2
 8008dc6:	f104 0314 	add.w	r3, r4, #20
 8008dca:	d13f      	bne.n	8008e4c <__gethex+0x450>
 8008dcc:	f8d8 2000 	ldr.w	r2, [r8]
 8008dd0:	3a01      	subs	r2, #1
 8008dd2:	42b2      	cmp	r2, r6
 8008dd4:	d10a      	bne.n	8008dec <__gethex+0x3f0>
 8008dd6:	1171      	asrs	r1, r6, #5
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dde:	f006 061f 	and.w	r6, r6, #31
 8008de2:	fa02 f606 	lsl.w	r6, r2, r6
 8008de6:	421e      	tst	r6, r3
 8008de8:	bf18      	it	ne
 8008dea:	4617      	movne	r7, r2
 8008dec:	f047 0720 	orr.w	r7, r7, #32
 8008df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df2:	601c      	str	r4, [r3, #0]
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	601d      	str	r5, [r3, #0]
 8008df8:	e695      	b.n	8008b26 <__gethex+0x12a>
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e00:	d8d8      	bhi.n	8008db4 <__gethex+0x3b8>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	459b      	cmp	fp, r3
 8008e06:	db19      	blt.n	8008e3c <__gethex+0x440>
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	ee18 0a10 	vmov	r0, s16
 8008e0e:	3101      	adds	r1, #1
 8008e10:	f000 fb72 	bl	80094f8 <_Balloc>
 8008e14:	4681      	mov	r9, r0
 8008e16:	b918      	cbnz	r0, 8008e20 <__gethex+0x424>
 8008e18:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <__gethex+0x488>)
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	2184      	movs	r1, #132	; 0x84
 8008e1e:	e6a8      	b.n	8008b72 <__gethex+0x176>
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	3202      	adds	r2, #2
 8008e24:	f104 010c 	add.w	r1, r4, #12
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	300c      	adds	r0, #12
 8008e2c:	f000 fb4a 	bl	80094c4 <memcpy>
 8008e30:	4621      	mov	r1, r4
 8008e32:	ee18 0a10 	vmov	r0, s16
 8008e36:	f000 fb84 	bl	8009542 <_Bfree>
 8008e3a:	464c      	mov	r4, r9
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e44:	6122      	str	r2, [r4, #16]
 8008e46:	2201      	movs	r2, #1
 8008e48:	615a      	str	r2, [r3, #20]
 8008e4a:	e7bb      	b.n	8008dc4 <__gethex+0x3c8>
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	455a      	cmp	r2, fp
 8008e50:	dd0b      	ble.n	8008e6a <__gethex+0x46e>
 8008e52:	2101      	movs	r1, #1
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff fd69 	bl	800892c <rshift>
 8008e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e5e:	3501      	adds	r5, #1
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	f6ff aed0 	blt.w	8008c06 <__gethex+0x20a>
 8008e66:	2701      	movs	r7, #1
 8008e68:	e7c0      	b.n	8008dec <__gethex+0x3f0>
 8008e6a:	f016 061f 	ands.w	r6, r6, #31
 8008e6e:	d0fa      	beq.n	8008e66 <__gethex+0x46a>
 8008e70:	4453      	add	r3, sl
 8008e72:	f1c6 0620 	rsb	r6, r6, #32
 8008e76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e7a:	f000 fbfb 	bl	8009674 <__hi0bits>
 8008e7e:	42b0      	cmp	r0, r6
 8008e80:	dbe7      	blt.n	8008e52 <__gethex+0x456>
 8008e82:	e7f0      	b.n	8008e66 <__gethex+0x46a>
 8008e84:	0800bdfa 	.word	0x0800bdfa

08008e88 <L_shift>:
 8008e88:	f1c2 0208 	rsb	r2, r2, #8
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	b570      	push	{r4, r5, r6, lr}
 8008e90:	f1c2 0620 	rsb	r6, r2, #32
 8008e94:	6843      	ldr	r3, [r0, #4]
 8008e96:	6804      	ldr	r4, [r0, #0]
 8008e98:	fa03 f506 	lsl.w	r5, r3, r6
 8008e9c:	432c      	orrs	r4, r5
 8008e9e:	40d3      	lsrs	r3, r2
 8008ea0:	6004      	str	r4, [r0, #0]
 8008ea2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ea6:	4288      	cmp	r0, r1
 8008ea8:	d3f4      	bcc.n	8008e94 <L_shift+0xc>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}

08008eac <__match>:
 8008eac:	b530      	push	{r4, r5, lr}
 8008eae:	6803      	ldr	r3, [r0, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb6:	b914      	cbnz	r4, 8008ebe <__match+0x12>
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	2001      	movs	r0, #1
 8008ebc:	bd30      	pop	{r4, r5, pc}
 8008ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ec6:	2d19      	cmp	r5, #25
 8008ec8:	bf98      	it	ls
 8008eca:	3220      	addls	r2, #32
 8008ecc:	42a2      	cmp	r2, r4
 8008ece:	d0f0      	beq.n	8008eb2 <__match+0x6>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7f3      	b.n	8008ebc <__match+0x10>

08008ed4 <__hexnan>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	680b      	ldr	r3, [r1, #0]
 8008eda:	115e      	asrs	r6, r3, #5
 8008edc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ee0:	f013 031f 	ands.w	r3, r3, #31
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	bf18      	it	ne
 8008ee8:	3604      	addne	r6, #4
 8008eea:	2500      	movs	r5, #0
 8008eec:	1f37      	subs	r7, r6, #4
 8008eee:	4690      	mov	r8, r2
 8008ef0:	6802      	ldr	r2, [r0, #0]
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008efa:	46b9      	mov	r9, r7
 8008efc:	463c      	mov	r4, r7
 8008efe:	9502      	str	r5, [sp, #8]
 8008f00:	46ab      	mov	fp, r5
 8008f02:	7851      	ldrb	r1, [r2, #1]
 8008f04:	1c53      	adds	r3, r2, #1
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	b341      	cbz	r1, 8008f5c <__hexnan+0x88>
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	9205      	str	r2, [sp, #20]
 8008f0e:	9104      	str	r1, [sp, #16]
 8008f10:	f7ff fd5e 	bl	80089d0 <__hexdig_fun>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d14f      	bne.n	8008fb8 <__hexnan+0xe4>
 8008f18:	9904      	ldr	r1, [sp, #16]
 8008f1a:	9a05      	ldr	r2, [sp, #20]
 8008f1c:	2920      	cmp	r1, #32
 8008f1e:	d818      	bhi.n	8008f52 <__hexnan+0x7e>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	459b      	cmp	fp, r3
 8008f24:	dd13      	ble.n	8008f4e <__hexnan+0x7a>
 8008f26:	454c      	cmp	r4, r9
 8008f28:	d206      	bcs.n	8008f38 <__hexnan+0x64>
 8008f2a:	2d07      	cmp	r5, #7
 8008f2c:	dc04      	bgt.n	8008f38 <__hexnan+0x64>
 8008f2e:	462a      	mov	r2, r5
 8008f30:	4649      	mov	r1, r9
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff ffa8 	bl	8008e88 <L_shift>
 8008f38:	4544      	cmp	r4, r8
 8008f3a:	d950      	bls.n	8008fde <__hexnan+0x10a>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f46:	f8cd b008 	str.w	fp, [sp, #8]
 8008f4a:	464c      	mov	r4, r9
 8008f4c:	461d      	mov	r5, r3
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	e7d7      	b.n	8008f02 <__hexnan+0x2e>
 8008f52:	2929      	cmp	r1, #41	; 0x29
 8008f54:	d156      	bne.n	8009004 <__hexnan+0x130>
 8008f56:	3202      	adds	r2, #2
 8008f58:	f8ca 2000 	str.w	r2, [sl]
 8008f5c:	f1bb 0f00 	cmp.w	fp, #0
 8008f60:	d050      	beq.n	8009004 <__hexnan+0x130>
 8008f62:	454c      	cmp	r4, r9
 8008f64:	d206      	bcs.n	8008f74 <__hexnan+0xa0>
 8008f66:	2d07      	cmp	r5, #7
 8008f68:	dc04      	bgt.n	8008f74 <__hexnan+0xa0>
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7ff ff8a 	bl	8008e88 <L_shift>
 8008f74:	4544      	cmp	r4, r8
 8008f76:	d934      	bls.n	8008fe2 <__hexnan+0x10e>
 8008f78:	f1a8 0204 	sub.w	r2, r8, #4
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f82:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f86:	429f      	cmp	r7, r3
 8008f88:	d2f9      	bcs.n	8008f7e <__hexnan+0xaa>
 8008f8a:	1b3b      	subs	r3, r7, r4
 8008f8c:	f023 0303 	bic.w	r3, r3, #3
 8008f90:	3304      	adds	r3, #4
 8008f92:	3401      	adds	r4, #1
 8008f94:	3e03      	subs	r6, #3
 8008f96:	42b4      	cmp	r4, r6
 8008f98:	bf88      	it	hi
 8008f9a:	2304      	movhi	r3, #4
 8008f9c:	4443      	add	r3, r8
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f843 2b04 	str.w	r2, [r3], #4
 8008fa4:	429f      	cmp	r7, r3
 8008fa6:	d2fb      	bcs.n	8008fa0 <__hexnan+0xcc>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	b91b      	cbnz	r3, 8008fb4 <__hexnan+0xe0>
 8008fac:	4547      	cmp	r7, r8
 8008fae:	d127      	bne.n	8009000 <__hexnan+0x12c>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	2005      	movs	r0, #5
 8008fb6:	e026      	b.n	8009006 <__hexnan+0x132>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	2d08      	cmp	r5, #8
 8008fbc:	f10b 0b01 	add.w	fp, fp, #1
 8008fc0:	dd06      	ble.n	8008fd0 <__hexnan+0xfc>
 8008fc2:	4544      	cmp	r4, r8
 8008fc4:	d9c3      	bls.n	8008f4e <__hexnan+0x7a>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fcc:	2501      	movs	r5, #1
 8008fce:	3c04      	subs	r4, #4
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	f000 000f 	and.w	r0, r0, #15
 8008fd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	e7b7      	b.n	8008f4e <__hexnan+0x7a>
 8008fde:	2508      	movs	r5, #8
 8008fe0:	e7b5      	b.n	8008f4e <__hexnan+0x7a>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0df      	beq.n	8008fa8 <__hexnan+0xd4>
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fec:	f1c3 0320 	rsb	r3, r3, #32
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ff8:	401a      	ands	r2, r3
 8008ffa:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ffe:	e7d3      	b.n	8008fa8 <__hexnan+0xd4>
 8009000:	3f04      	subs	r7, #4
 8009002:	e7d1      	b.n	8008fa8 <__hexnan+0xd4>
 8009004:	2004      	movs	r0, #4
 8009006:	b007      	add	sp, #28
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800900c <__locale_mb_cur_max>:
 800900c:	4b01      	ldr	r3, [pc, #4]	; (8009014 <__locale_mb_cur_max+0x8>)
 800900e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009012:	4770      	bx	lr
 8009014:	20000448 	.word	0x20000448

08009018 <_localeconv_r>:
 8009018:	4800      	ldr	r0, [pc, #0]	; (800901c <_localeconv_r+0x4>)
 800901a:	4770      	bx	lr
 800901c:	20000538 	.word	0x20000538

08009020 <__retarget_lock_init_recursive>:
 8009020:	4770      	bx	lr

08009022 <__retarget_lock_close_recursive>:
 8009022:	4770      	bx	lr

08009024 <__retarget_lock_acquire_recursive>:
 8009024:	4770      	bx	lr

08009026 <__retarget_lock_release_recursive>:
 8009026:	4770      	bx	lr

08009028 <_malloc_r>:
 8009028:	f101 030b 	add.w	r3, r1, #11
 800902c:	2b16      	cmp	r3, #22
 800902e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009032:	4605      	mov	r5, r0
 8009034:	d906      	bls.n	8009044 <_malloc_r+0x1c>
 8009036:	f033 0707 	bics.w	r7, r3, #7
 800903a:	d504      	bpl.n	8009046 <_malloc_r+0x1e>
 800903c:	230c      	movs	r3, #12
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	2400      	movs	r4, #0
 8009042:	e1a5      	b.n	8009390 <_malloc_r+0x368>
 8009044:	2710      	movs	r7, #16
 8009046:	42b9      	cmp	r1, r7
 8009048:	d8f8      	bhi.n	800903c <_malloc_r+0x14>
 800904a:	4628      	mov	r0, r5
 800904c:	f000 fa48 	bl	80094e0 <__malloc_lock>
 8009050:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009054:	4eb0      	ldr	r6, [pc, #704]	; (8009318 <_malloc_r+0x2f0>)
 8009056:	d237      	bcs.n	80090c8 <_malloc_r+0xa0>
 8009058:	f107 0208 	add.w	r2, r7, #8
 800905c:	4432      	add	r2, r6
 800905e:	f1a2 0108 	sub.w	r1, r2, #8
 8009062:	6854      	ldr	r4, [r2, #4]
 8009064:	428c      	cmp	r4, r1
 8009066:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800906a:	d102      	bne.n	8009072 <_malloc_r+0x4a>
 800906c:	68d4      	ldr	r4, [r2, #12]
 800906e:	42a2      	cmp	r2, r4
 8009070:	d010      	beq.n	8009094 <_malloc_r+0x6c>
 8009072:	6863      	ldr	r3, [r4, #4]
 8009074:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	60ca      	str	r2, [r1, #12]
 800907e:	4423      	add	r3, r4
 8009080:	6091      	str	r1, [r2, #8]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	f042 0201 	orr.w	r2, r2, #1
 8009088:	605a      	str	r2, [r3, #4]
 800908a:	4628      	mov	r0, r5
 800908c:	f000 fa2e 	bl	80094ec <__malloc_unlock>
 8009090:	3408      	adds	r4, #8
 8009092:	e17d      	b.n	8009390 <_malloc_r+0x368>
 8009094:	3302      	adds	r3, #2
 8009096:	6934      	ldr	r4, [r6, #16]
 8009098:	49a0      	ldr	r1, [pc, #640]	; (800931c <_malloc_r+0x2f4>)
 800909a:	428c      	cmp	r4, r1
 800909c:	d077      	beq.n	800918e <_malloc_r+0x166>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	f022 0c03 	bic.w	ip, r2, #3
 80090a4:	ebac 0007 	sub.w	r0, ip, r7
 80090a8:	280f      	cmp	r0, #15
 80090aa:	dd48      	ble.n	800913e <_malloc_r+0x116>
 80090ac:	19e2      	adds	r2, r4, r7
 80090ae:	f040 0301 	orr.w	r3, r0, #1
 80090b2:	f047 0701 	orr.w	r7, r7, #1
 80090b6:	6067      	str	r7, [r4, #4]
 80090b8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80090bc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80090c0:	6053      	str	r3, [r2, #4]
 80090c2:	f844 000c 	str.w	r0, [r4, ip]
 80090c6:	e7e0      	b.n	800908a <_malloc_r+0x62>
 80090c8:	0a7b      	lsrs	r3, r7, #9
 80090ca:	d02a      	beq.n	8009122 <_malloc_r+0xfa>
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d812      	bhi.n	80090f6 <_malloc_r+0xce>
 80090d0:	09bb      	lsrs	r3, r7, #6
 80090d2:	3338      	adds	r3, #56	; 0x38
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80090da:	f1a2 0c08 	sub.w	ip, r2, #8
 80090de:	6854      	ldr	r4, [r2, #4]
 80090e0:	4564      	cmp	r4, ip
 80090e2:	d006      	beq.n	80090f2 <_malloc_r+0xca>
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	f022 0203 	bic.w	r2, r2, #3
 80090ea:	1bd0      	subs	r0, r2, r7
 80090ec:	280f      	cmp	r0, #15
 80090ee:	dd1c      	ble.n	800912a <_malloc_r+0x102>
 80090f0:	3b01      	subs	r3, #1
 80090f2:	3301      	adds	r3, #1
 80090f4:	e7cf      	b.n	8009096 <_malloc_r+0x6e>
 80090f6:	2b14      	cmp	r3, #20
 80090f8:	d801      	bhi.n	80090fe <_malloc_r+0xd6>
 80090fa:	335b      	adds	r3, #91	; 0x5b
 80090fc:	e7ea      	b.n	80090d4 <_malloc_r+0xac>
 80090fe:	2b54      	cmp	r3, #84	; 0x54
 8009100:	d802      	bhi.n	8009108 <_malloc_r+0xe0>
 8009102:	0b3b      	lsrs	r3, r7, #12
 8009104:	336e      	adds	r3, #110	; 0x6e
 8009106:	e7e5      	b.n	80090d4 <_malloc_r+0xac>
 8009108:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800910c:	d802      	bhi.n	8009114 <_malloc_r+0xec>
 800910e:	0bfb      	lsrs	r3, r7, #15
 8009110:	3377      	adds	r3, #119	; 0x77
 8009112:	e7df      	b.n	80090d4 <_malloc_r+0xac>
 8009114:	f240 5254 	movw	r2, #1364	; 0x554
 8009118:	4293      	cmp	r3, r2
 800911a:	d804      	bhi.n	8009126 <_malloc_r+0xfe>
 800911c:	0cbb      	lsrs	r3, r7, #18
 800911e:	337c      	adds	r3, #124	; 0x7c
 8009120:	e7d8      	b.n	80090d4 <_malloc_r+0xac>
 8009122:	233f      	movs	r3, #63	; 0x3f
 8009124:	e7d6      	b.n	80090d4 <_malloc_r+0xac>
 8009126:	237e      	movs	r3, #126	; 0x7e
 8009128:	e7d4      	b.n	80090d4 <_malloc_r+0xac>
 800912a:	2800      	cmp	r0, #0
 800912c:	68e1      	ldr	r1, [r4, #12]
 800912e:	db04      	blt.n	800913a <_malloc_r+0x112>
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	60d9      	str	r1, [r3, #12]
 8009134:	608b      	str	r3, [r1, #8]
 8009136:	18a3      	adds	r3, r4, r2
 8009138:	e7a3      	b.n	8009082 <_malloc_r+0x5a>
 800913a:	460c      	mov	r4, r1
 800913c:	e7d0      	b.n	80090e0 <_malloc_r+0xb8>
 800913e:	2800      	cmp	r0, #0
 8009140:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009144:	db07      	blt.n	8009156 <_malloc_r+0x12e>
 8009146:	44a4      	add	ip, r4
 8009148:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800914c:	f043 0301 	orr.w	r3, r3, #1
 8009150:	f8cc 3004 	str.w	r3, [ip, #4]
 8009154:	e799      	b.n	800908a <_malloc_r+0x62>
 8009156:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800915a:	6870      	ldr	r0, [r6, #4]
 800915c:	f080 8096 	bcs.w	800928c <_malloc_r+0x264>
 8009160:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009164:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009168:	f04f 0c01 	mov.w	ip, #1
 800916c:	3201      	adds	r2, #1
 800916e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009172:	ea4c 0000 	orr.w	r0, ip, r0
 8009176:	6070      	str	r0, [r6, #4]
 8009178:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800917c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009180:	3808      	subs	r0, #8
 8009182:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009186:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800918a:	f8cc 400c 	str.w	r4, [ip, #12]
 800918e:	2001      	movs	r0, #1
 8009190:	109a      	asrs	r2, r3, #2
 8009192:	fa00 f202 	lsl.w	r2, r0, r2
 8009196:	6870      	ldr	r0, [r6, #4]
 8009198:	4290      	cmp	r0, r2
 800919a:	d326      	bcc.n	80091ea <_malloc_r+0x1c2>
 800919c:	4210      	tst	r0, r2
 800919e:	d106      	bne.n	80091ae <_malloc_r+0x186>
 80091a0:	f023 0303 	bic.w	r3, r3, #3
 80091a4:	0052      	lsls	r2, r2, #1
 80091a6:	4210      	tst	r0, r2
 80091a8:	f103 0304 	add.w	r3, r3, #4
 80091ac:	d0fa      	beq.n	80091a4 <_malloc_r+0x17c>
 80091ae:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80091b2:	46c1      	mov	r9, r8
 80091b4:	469e      	mov	lr, r3
 80091b6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80091ba:	454c      	cmp	r4, r9
 80091bc:	f040 80ba 	bne.w	8009334 <_malloc_r+0x30c>
 80091c0:	f10e 0e01 	add.w	lr, lr, #1
 80091c4:	f01e 0f03 	tst.w	lr, #3
 80091c8:	f109 0908 	add.w	r9, r9, #8
 80091cc:	d1f3      	bne.n	80091b6 <_malloc_r+0x18e>
 80091ce:	0798      	lsls	r0, r3, #30
 80091d0:	f040 80e4 	bne.w	800939c <_malloc_r+0x374>
 80091d4:	6873      	ldr	r3, [r6, #4]
 80091d6:	ea23 0302 	bic.w	r3, r3, r2
 80091da:	6073      	str	r3, [r6, #4]
 80091dc:	6870      	ldr	r0, [r6, #4]
 80091de:	0052      	lsls	r2, r2, #1
 80091e0:	4290      	cmp	r0, r2
 80091e2:	d302      	bcc.n	80091ea <_malloc_r+0x1c2>
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	f040 80e6 	bne.w	80093b6 <_malloc_r+0x38e>
 80091ea:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80091ee:	f8da 3004 	ldr.w	r3, [sl, #4]
 80091f2:	f023 0903 	bic.w	r9, r3, #3
 80091f6:	45b9      	cmp	r9, r7
 80091f8:	d304      	bcc.n	8009204 <_malloc_r+0x1dc>
 80091fa:	eba9 0207 	sub.w	r2, r9, r7
 80091fe:	2a0f      	cmp	r2, #15
 8009200:	f300 8142 	bgt.w	8009488 <_malloc_r+0x460>
 8009204:	4b46      	ldr	r3, [pc, #280]	; (8009320 <_malloc_r+0x2f8>)
 8009206:	6819      	ldr	r1, [r3, #0]
 8009208:	3110      	adds	r1, #16
 800920a:	4439      	add	r1, r7
 800920c:	2008      	movs	r0, #8
 800920e:	9101      	str	r1, [sp, #4]
 8009210:	f000 fed8 	bl	8009fc4 <sysconf>
 8009214:	4a43      	ldr	r2, [pc, #268]	; (8009324 <_malloc_r+0x2fc>)
 8009216:	9901      	ldr	r1, [sp, #4]
 8009218:	6813      	ldr	r3, [r2, #0]
 800921a:	3301      	adds	r3, #1
 800921c:	bf1f      	itttt	ne
 800921e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 8009222:	1809      	addne	r1, r1, r0
 8009224:	4243      	negne	r3, r0
 8009226:	4019      	andne	r1, r3
 8009228:	4680      	mov	r8, r0
 800922a:	4628      	mov	r0, r5
 800922c:	9101      	str	r1, [sp, #4]
 800922e:	f000 fe17 	bl	8009e60 <_sbrk_r>
 8009232:	1c42      	adds	r2, r0, #1
 8009234:	eb0a 0b09 	add.w	fp, sl, r9
 8009238:	4604      	mov	r4, r0
 800923a:	f000 80f8 	beq.w	800942e <_malloc_r+0x406>
 800923e:	4583      	cmp	fp, r0
 8009240:	9901      	ldr	r1, [sp, #4]
 8009242:	4a38      	ldr	r2, [pc, #224]	; (8009324 <_malloc_r+0x2fc>)
 8009244:	d902      	bls.n	800924c <_malloc_r+0x224>
 8009246:	45b2      	cmp	sl, r6
 8009248:	f040 80f1 	bne.w	800942e <_malloc_r+0x406>
 800924c:	4b36      	ldr	r3, [pc, #216]	; (8009328 <_malloc_r+0x300>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	45a3      	cmp	fp, r4
 8009252:	eb00 0e01 	add.w	lr, r0, r1
 8009256:	f8c3 e000 	str.w	lr, [r3]
 800925a:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800925e:	f040 80ac 	bne.w	80093ba <_malloc_r+0x392>
 8009262:	ea1b 0f0c 	tst.w	fp, ip
 8009266:	f040 80a8 	bne.w	80093ba <_malloc_r+0x392>
 800926a:	68b2      	ldr	r2, [r6, #8]
 800926c:	4449      	add	r1, r9
 800926e:	f041 0101 	orr.w	r1, r1, #1
 8009272:	6051      	str	r1, [r2, #4]
 8009274:	4a2d      	ldr	r2, [pc, #180]	; (800932c <_malloc_r+0x304>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6811      	ldr	r1, [r2, #0]
 800927a:	428b      	cmp	r3, r1
 800927c:	bf88      	it	hi
 800927e:	6013      	strhi	r3, [r2, #0]
 8009280:	4a2b      	ldr	r2, [pc, #172]	; (8009330 <_malloc_r+0x308>)
 8009282:	6811      	ldr	r1, [r2, #0]
 8009284:	428b      	cmp	r3, r1
 8009286:	bf88      	it	hi
 8009288:	6013      	strhi	r3, [r2, #0]
 800928a:	e0d0      	b.n	800942e <_malloc_r+0x406>
 800928c:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009290:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009294:	d218      	bcs.n	80092c8 <_malloc_r+0x2a0>
 8009296:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800929a:	3238      	adds	r2, #56	; 0x38
 800929c:	f102 0e01 	add.w	lr, r2, #1
 80092a0:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80092a4:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80092a8:	45f0      	cmp	r8, lr
 80092aa:	d12b      	bne.n	8009304 <_malloc_r+0x2dc>
 80092ac:	1092      	asrs	r2, r2, #2
 80092ae:	f04f 0c01 	mov.w	ip, #1
 80092b2:	fa0c f202 	lsl.w	r2, ip, r2
 80092b6:	4310      	orrs	r0, r2
 80092b8:	6070      	str	r0, [r6, #4]
 80092ba:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80092be:	f8c8 4008 	str.w	r4, [r8, #8]
 80092c2:	f8ce 400c 	str.w	r4, [lr, #12]
 80092c6:	e762      	b.n	800918e <_malloc_r+0x166>
 80092c8:	2a14      	cmp	r2, #20
 80092ca:	d801      	bhi.n	80092d0 <_malloc_r+0x2a8>
 80092cc:	325b      	adds	r2, #91	; 0x5b
 80092ce:	e7e5      	b.n	800929c <_malloc_r+0x274>
 80092d0:	2a54      	cmp	r2, #84	; 0x54
 80092d2:	d803      	bhi.n	80092dc <_malloc_r+0x2b4>
 80092d4:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80092d8:	326e      	adds	r2, #110	; 0x6e
 80092da:	e7df      	b.n	800929c <_malloc_r+0x274>
 80092dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80092e0:	d803      	bhi.n	80092ea <_malloc_r+0x2c2>
 80092e2:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80092e6:	3277      	adds	r2, #119	; 0x77
 80092e8:	e7d8      	b.n	800929c <_malloc_r+0x274>
 80092ea:	f240 5e54 	movw	lr, #1364	; 0x554
 80092ee:	4572      	cmp	r2, lr
 80092f0:	bf9a      	itte	ls
 80092f2:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80092f6:	327c      	addls	r2, #124	; 0x7c
 80092f8:	227e      	movhi	r2, #126	; 0x7e
 80092fa:	e7cf      	b.n	800929c <_malloc_r+0x274>
 80092fc:	f8de e008 	ldr.w	lr, [lr, #8]
 8009300:	45f0      	cmp	r8, lr
 8009302:	d005      	beq.n	8009310 <_malloc_r+0x2e8>
 8009304:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	4562      	cmp	r2, ip
 800930e:	d8f5      	bhi.n	80092fc <_malloc_r+0x2d4>
 8009310:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009314:	e7d1      	b.n	80092ba <_malloc_r+0x292>
 8009316:	bf00      	nop
 8009318:	200005b4 	.word	0x200005b4
 800931c:	200005bc 	.word	0x200005bc
 8009320:	20000be4 	.word	0x20000be4
 8009324:	200009bc 	.word	0x200009bc
 8009328:	20000bb4 	.word	0x20000bb4
 800932c:	20000bdc 	.word	0x20000bdc
 8009330:	20000be0 	.word	0x20000be0
 8009334:	6860      	ldr	r0, [r4, #4]
 8009336:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800933a:	f020 0003 	bic.w	r0, r0, #3
 800933e:	eba0 0a07 	sub.w	sl, r0, r7
 8009342:	f1ba 0f0f 	cmp.w	sl, #15
 8009346:	dd12      	ble.n	800936e <_malloc_r+0x346>
 8009348:	68a3      	ldr	r3, [r4, #8]
 800934a:	19e2      	adds	r2, r4, r7
 800934c:	f047 0701 	orr.w	r7, r7, #1
 8009350:	6067      	str	r7, [r4, #4]
 8009352:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009356:	f8cc 3008 	str.w	r3, [ip, #8]
 800935a:	f04a 0301 	orr.w	r3, sl, #1
 800935e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009362:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009366:	6053      	str	r3, [r2, #4]
 8009368:	f844 a000 	str.w	sl, [r4, r0]
 800936c:	e68d      	b.n	800908a <_malloc_r+0x62>
 800936e:	f1ba 0f00 	cmp.w	sl, #0
 8009372:	db11      	blt.n	8009398 <_malloc_r+0x370>
 8009374:	4420      	add	r0, r4
 8009376:	6843      	ldr	r3, [r0, #4]
 8009378:	f043 0301 	orr.w	r3, r3, #1
 800937c:	6043      	str	r3, [r0, #4]
 800937e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009382:	4628      	mov	r0, r5
 8009384:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009388:	f8cc 3008 	str.w	r3, [ip, #8]
 800938c:	f000 f8ae 	bl	80094ec <__malloc_unlock>
 8009390:	4620      	mov	r0, r4
 8009392:	b003      	add	sp, #12
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	4664      	mov	r4, ip
 800939a:	e70e      	b.n	80091ba <_malloc_r+0x192>
 800939c:	f858 0908 	ldr.w	r0, [r8], #-8
 80093a0:	4540      	cmp	r0, r8
 80093a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80093a6:	f43f af12 	beq.w	80091ce <_malloc_r+0x1a6>
 80093aa:	e717      	b.n	80091dc <_malloc_r+0x1b4>
 80093ac:	3304      	adds	r3, #4
 80093ae:	0052      	lsls	r2, r2, #1
 80093b0:	4210      	tst	r0, r2
 80093b2:	d0fb      	beq.n	80093ac <_malloc_r+0x384>
 80093b4:	e6fb      	b.n	80091ae <_malloc_r+0x186>
 80093b6:	4673      	mov	r3, lr
 80093b8:	e7fa      	b.n	80093b0 <_malloc_r+0x388>
 80093ba:	6810      	ldr	r0, [r2, #0]
 80093bc:	3001      	adds	r0, #1
 80093be:	bf1b      	ittet	ne
 80093c0:	eba4 0b0b 	subne.w	fp, r4, fp
 80093c4:	eb0b 020e 	addne.w	r2, fp, lr
 80093c8:	6014      	streq	r4, [r2, #0]
 80093ca:	601a      	strne	r2, [r3, #0]
 80093cc:	f014 0b07 	ands.w	fp, r4, #7
 80093d0:	bf1a      	itte	ne
 80093d2:	f1cb 0008 	rsbne	r0, fp, #8
 80093d6:	1824      	addne	r4, r4, r0
 80093d8:	4658      	moveq	r0, fp
 80093da:	1862      	adds	r2, r4, r1
 80093dc:	ea02 010c 	and.w	r1, r2, ip
 80093e0:	4480      	add	r8, r0
 80093e2:	eba8 0801 	sub.w	r8, r8, r1
 80093e6:	ea08 080c 	and.w	r8, r8, ip
 80093ea:	4641      	mov	r1, r8
 80093ec:	4628      	mov	r0, r5
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	f000 fd36 	bl	8009e60 <_sbrk_r>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	4b28      	ldr	r3, [pc, #160]	; (800949c <_malloc_r+0x474>)
 80093fa:	d107      	bne.n	800940c <_malloc_r+0x3e4>
 80093fc:	f1bb 0f00 	cmp.w	fp, #0
 8009400:	d023      	beq.n	800944a <_malloc_r+0x422>
 8009402:	f1ab 0008 	sub.w	r0, fp, #8
 8009406:	4410      	add	r0, r2
 8009408:	f04f 0800 	mov.w	r8, #0
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	60b4      	str	r4, [r6, #8]
 8009410:	1b00      	subs	r0, r0, r4
 8009412:	4440      	add	r0, r8
 8009414:	4442      	add	r2, r8
 8009416:	f040 0001 	orr.w	r0, r0, #1
 800941a:	45b2      	cmp	sl, r6
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	6060      	str	r0, [r4, #4]
 8009420:	f43f af28 	beq.w	8009274 <_malloc_r+0x24c>
 8009424:	f1b9 0f0f 	cmp.w	r9, #15
 8009428:	d812      	bhi.n	8009450 <_malloc_r+0x428>
 800942a:	2301      	movs	r3, #1
 800942c:	6063      	str	r3, [r4, #4]
 800942e:	68b3      	ldr	r3, [r6, #8]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	42bb      	cmp	r3, r7
 8009438:	eba3 0207 	sub.w	r2, r3, r7
 800943c:	d301      	bcc.n	8009442 <_malloc_r+0x41a>
 800943e:	2a0f      	cmp	r2, #15
 8009440:	dc22      	bgt.n	8009488 <_malloc_r+0x460>
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f852 	bl	80094ec <__malloc_unlock>
 8009448:	e5fa      	b.n	8009040 <_malloc_r+0x18>
 800944a:	4610      	mov	r0, r2
 800944c:	46d8      	mov	r8, fp
 800944e:	e7dd      	b.n	800940c <_malloc_r+0x3e4>
 8009450:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009454:	f1a9 090c 	sub.w	r9, r9, #12
 8009458:	f029 0907 	bic.w	r9, r9, #7
 800945c:	f002 0201 	and.w	r2, r2, #1
 8009460:	ea42 0209 	orr.w	r2, r2, r9
 8009464:	f8ca 2004 	str.w	r2, [sl, #4]
 8009468:	2105      	movs	r1, #5
 800946a:	eb0a 0209 	add.w	r2, sl, r9
 800946e:	f1b9 0f0f 	cmp.w	r9, #15
 8009472:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009476:	f67f aefd 	bls.w	8009274 <_malloc_r+0x24c>
 800947a:	f10a 0108 	add.w	r1, sl, #8
 800947e:	4628      	mov	r0, r5
 8009480:	f7ff f994 	bl	80087ac <_free_r>
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <_malloc_r+0x474>)
 8009486:	e6f5      	b.n	8009274 <_malloc_r+0x24c>
 8009488:	68b4      	ldr	r4, [r6, #8]
 800948a:	f047 0301 	orr.w	r3, r7, #1
 800948e:	4427      	add	r7, r4
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	60b7      	str	r7, [r6, #8]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	e5f6      	b.n	800908a <_malloc_r+0x62>
 800949c:	20000bb4 	.word	0x20000bb4

080094a0 <__ascii_mbtowc>:
 80094a0:	b082      	sub	sp, #8
 80094a2:	b901      	cbnz	r1, 80094a6 <__ascii_mbtowc+0x6>
 80094a4:	a901      	add	r1, sp, #4
 80094a6:	b142      	cbz	r2, 80094ba <__ascii_mbtowc+0x1a>
 80094a8:	b14b      	cbz	r3, 80094be <__ascii_mbtowc+0x1e>
 80094aa:	7813      	ldrb	r3, [r2, #0]
 80094ac:	600b      	str	r3, [r1, #0]
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	1e10      	subs	r0, r2, #0
 80094b2:	bf18      	it	ne
 80094b4:	2001      	movne	r0, #1
 80094b6:	b002      	add	sp, #8
 80094b8:	4770      	bx	lr
 80094ba:	4610      	mov	r0, r2
 80094bc:	e7fb      	b.n	80094b6 <__ascii_mbtowc+0x16>
 80094be:	f06f 0001 	mvn.w	r0, #1
 80094c2:	e7f8      	b.n	80094b6 <__ascii_mbtowc+0x16>

080094c4 <memcpy>:
 80094c4:	440a      	add	r2, r1
 80094c6:	4291      	cmp	r1, r2
 80094c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094cc:	d100      	bne.n	80094d0 <memcpy+0xc>
 80094ce:	4770      	bx	lr
 80094d0:	b510      	push	{r4, lr}
 80094d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094da:	4291      	cmp	r1, r2
 80094dc:	d1f9      	bne.n	80094d2 <memcpy+0xe>
 80094de:	bd10      	pop	{r4, pc}

080094e0 <__malloc_lock>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__malloc_lock+0x8>)
 80094e2:	f7ff bd9f 	b.w	8009024 <__retarget_lock_acquire_recursive>
 80094e6:	bf00      	nop
 80094e8:	20000bb1 	.word	0x20000bb1

080094ec <__malloc_unlock>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__malloc_unlock+0x8>)
 80094ee:	f7ff bd9a 	b.w	8009026 <__retarget_lock_release_recursive>
 80094f2:	bf00      	nop
 80094f4:	20000bb1 	.word	0x20000bb1

080094f8 <_Balloc>:
 80094f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094fa:	b570      	push	{r4, r5, r6, lr}
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	b17b      	cbz	r3, 8009522 <_Balloc+0x2a>
 8009502:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009504:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009508:	b9a0      	cbnz	r0, 8009534 <_Balloc+0x3c>
 800950a:	2101      	movs	r1, #1
 800950c:	fa01 f604 	lsl.w	r6, r1, r4
 8009510:	1d72      	adds	r2, r6, #5
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	4628      	mov	r0, r5
 8009516:	f000 fdcf 	bl	800a0b8 <_calloc_r>
 800951a:	b148      	cbz	r0, 8009530 <_Balloc+0x38>
 800951c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8009520:	e00b      	b.n	800953a <_Balloc+0x42>
 8009522:	2221      	movs	r2, #33	; 0x21
 8009524:	2104      	movs	r1, #4
 8009526:	f000 fdc7 	bl	800a0b8 <_calloc_r>
 800952a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800952c:	2800      	cmp	r0, #0
 800952e:	d1e8      	bne.n	8009502 <_Balloc+0xa>
 8009530:	2000      	movs	r0, #0
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	6802      	ldr	r2, [r0, #0]
 8009536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800953a:	2300      	movs	r3, #0
 800953c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009540:	e7f7      	b.n	8009532 <_Balloc+0x3a>

08009542 <_Bfree>:
 8009542:	b131      	cbz	r1, 8009552 <_Bfree+0x10>
 8009544:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009546:	684a      	ldr	r2, [r1, #4]
 8009548:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800954c:	6008      	str	r0, [r1, #0]
 800954e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009552:	4770      	bx	lr

08009554 <__multadd>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	690d      	ldr	r5, [r1, #16]
 800955a:	4607      	mov	r7, r0
 800955c:	460c      	mov	r4, r1
 800955e:	461e      	mov	r6, r3
 8009560:	f101 0c14 	add.w	ip, r1, #20
 8009564:	2000      	movs	r0, #0
 8009566:	f8dc 3000 	ldr.w	r3, [ip]
 800956a:	b299      	uxth	r1, r3
 800956c:	fb02 6101 	mla	r1, r2, r1, r6
 8009570:	0c1e      	lsrs	r6, r3, #16
 8009572:	0c0b      	lsrs	r3, r1, #16
 8009574:	fb02 3306 	mla	r3, r2, r6, r3
 8009578:	b289      	uxth	r1, r1
 800957a:	3001      	adds	r0, #1
 800957c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009580:	4285      	cmp	r5, r0
 8009582:	f84c 1b04 	str.w	r1, [ip], #4
 8009586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800958a:	dcec      	bgt.n	8009566 <__multadd+0x12>
 800958c:	b30e      	cbz	r6, 80095d2 <__multadd+0x7e>
 800958e:	68a3      	ldr	r3, [r4, #8]
 8009590:	42ab      	cmp	r3, r5
 8009592:	dc19      	bgt.n	80095c8 <__multadd+0x74>
 8009594:	6861      	ldr	r1, [r4, #4]
 8009596:	4638      	mov	r0, r7
 8009598:	3101      	adds	r1, #1
 800959a:	f7ff ffad 	bl	80094f8 <_Balloc>
 800959e:	4680      	mov	r8, r0
 80095a0:	b928      	cbnz	r0, 80095ae <__multadd+0x5a>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <__multadd+0x84>)
 80095a6:	480d      	ldr	r0, [pc, #52]	; (80095dc <__multadd+0x88>)
 80095a8:	21b5      	movs	r1, #181	; 0xb5
 80095aa:	f000 fd67 	bl	800a07c <__assert_func>
 80095ae:	6922      	ldr	r2, [r4, #16]
 80095b0:	3202      	adds	r2, #2
 80095b2:	f104 010c 	add.w	r1, r4, #12
 80095b6:	0092      	lsls	r2, r2, #2
 80095b8:	300c      	adds	r0, #12
 80095ba:	f7ff ff83 	bl	80094c4 <memcpy>
 80095be:	4621      	mov	r1, r4
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff ffbe 	bl	8009542 <_Bfree>
 80095c6:	4644      	mov	r4, r8
 80095c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095cc:	3501      	adds	r5, #1
 80095ce:	615e      	str	r6, [r3, #20]
 80095d0:	6125      	str	r5, [r4, #16]
 80095d2:	4620      	mov	r0, r4
 80095d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d8:	0800bdfa 	.word	0x0800bdfa
 80095dc:	0800bee0 	.word	0x0800bee0

080095e0 <__s2b>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	460c      	mov	r4, r1
 80095e6:	4615      	mov	r5, r2
 80095e8:	461f      	mov	r7, r3
 80095ea:	2209      	movs	r2, #9
 80095ec:	3308      	adds	r3, #8
 80095ee:	4606      	mov	r6, r0
 80095f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f4:	2100      	movs	r1, #0
 80095f6:	2201      	movs	r2, #1
 80095f8:	429a      	cmp	r2, r3
 80095fa:	db09      	blt.n	8009610 <__s2b+0x30>
 80095fc:	4630      	mov	r0, r6
 80095fe:	f7ff ff7b 	bl	80094f8 <_Balloc>
 8009602:	b940      	cbnz	r0, 8009616 <__s2b+0x36>
 8009604:	4602      	mov	r2, r0
 8009606:	4b19      	ldr	r3, [pc, #100]	; (800966c <__s2b+0x8c>)
 8009608:	4819      	ldr	r0, [pc, #100]	; (8009670 <__s2b+0x90>)
 800960a:	21ce      	movs	r1, #206	; 0xce
 800960c:	f000 fd36 	bl	800a07c <__assert_func>
 8009610:	0052      	lsls	r2, r2, #1
 8009612:	3101      	adds	r1, #1
 8009614:	e7f0      	b.n	80095f8 <__s2b+0x18>
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	6143      	str	r3, [r0, #20]
 800961a:	2d09      	cmp	r5, #9
 800961c:	f04f 0301 	mov.w	r3, #1
 8009620:	6103      	str	r3, [r0, #16]
 8009622:	dd16      	ble.n	8009652 <__s2b+0x72>
 8009624:	f104 0909 	add.w	r9, r4, #9
 8009628:	46c8      	mov	r8, r9
 800962a:	442c      	add	r4, r5
 800962c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009630:	4601      	mov	r1, r0
 8009632:	3b30      	subs	r3, #48	; 0x30
 8009634:	220a      	movs	r2, #10
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff ff8c 	bl	8009554 <__multadd>
 800963c:	45a0      	cmp	r8, r4
 800963e:	d1f5      	bne.n	800962c <__s2b+0x4c>
 8009640:	f1a5 0408 	sub.w	r4, r5, #8
 8009644:	444c      	add	r4, r9
 8009646:	1b2d      	subs	r5, r5, r4
 8009648:	1963      	adds	r3, r4, r5
 800964a:	42bb      	cmp	r3, r7
 800964c:	db04      	blt.n	8009658 <__s2b+0x78>
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	340a      	adds	r4, #10
 8009654:	2509      	movs	r5, #9
 8009656:	e7f6      	b.n	8009646 <__s2b+0x66>
 8009658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800965c:	4601      	mov	r1, r0
 800965e:	3b30      	subs	r3, #48	; 0x30
 8009660:	220a      	movs	r2, #10
 8009662:	4630      	mov	r0, r6
 8009664:	f7ff ff76 	bl	8009554 <__multadd>
 8009668:	e7ee      	b.n	8009648 <__s2b+0x68>
 800966a:	bf00      	nop
 800966c:	0800bdfa 	.word	0x0800bdfa
 8009670:	0800bee0 	.word	0x0800bee0

08009674 <__hi0bits>:
 8009674:	0c03      	lsrs	r3, r0, #16
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	b9d3      	cbnz	r3, 80096b0 <__hi0bits+0x3c>
 800967a:	0400      	lsls	r0, r0, #16
 800967c:	2310      	movs	r3, #16
 800967e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009682:	bf04      	itt	eq
 8009684:	0200      	lsleq	r0, r0, #8
 8009686:	3308      	addeq	r3, #8
 8009688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800968c:	bf04      	itt	eq
 800968e:	0100      	lsleq	r0, r0, #4
 8009690:	3304      	addeq	r3, #4
 8009692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009696:	bf04      	itt	eq
 8009698:	0080      	lsleq	r0, r0, #2
 800969a:	3302      	addeq	r3, #2
 800969c:	2800      	cmp	r0, #0
 800969e:	db05      	blt.n	80096ac <__hi0bits+0x38>
 80096a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096a4:	f103 0301 	add.w	r3, r3, #1
 80096a8:	bf08      	it	eq
 80096aa:	2320      	moveq	r3, #32
 80096ac:	4618      	mov	r0, r3
 80096ae:	4770      	bx	lr
 80096b0:	2300      	movs	r3, #0
 80096b2:	e7e4      	b.n	800967e <__hi0bits+0xa>

080096b4 <__lo0bits>:
 80096b4:	6803      	ldr	r3, [r0, #0]
 80096b6:	f013 0207 	ands.w	r2, r3, #7
 80096ba:	4601      	mov	r1, r0
 80096bc:	d00b      	beq.n	80096d6 <__lo0bits+0x22>
 80096be:	07da      	lsls	r2, r3, #31
 80096c0:	d423      	bmi.n	800970a <__lo0bits+0x56>
 80096c2:	0798      	lsls	r0, r3, #30
 80096c4:	bf49      	itett	mi
 80096c6:	085b      	lsrmi	r3, r3, #1
 80096c8:	089b      	lsrpl	r3, r3, #2
 80096ca:	2001      	movmi	r0, #1
 80096cc:	600b      	strmi	r3, [r1, #0]
 80096ce:	bf5c      	itt	pl
 80096d0:	600b      	strpl	r3, [r1, #0]
 80096d2:	2002      	movpl	r0, #2
 80096d4:	4770      	bx	lr
 80096d6:	b298      	uxth	r0, r3
 80096d8:	b9a8      	cbnz	r0, 8009706 <__lo0bits+0x52>
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	2010      	movs	r0, #16
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	b90a      	cbnz	r2, 80096e6 <__lo0bits+0x32>
 80096e2:	3008      	adds	r0, #8
 80096e4:	0a1b      	lsrs	r3, r3, #8
 80096e6:	071a      	lsls	r2, r3, #28
 80096e8:	bf04      	itt	eq
 80096ea:	091b      	lsreq	r3, r3, #4
 80096ec:	3004      	addeq	r0, #4
 80096ee:	079a      	lsls	r2, r3, #30
 80096f0:	bf04      	itt	eq
 80096f2:	089b      	lsreq	r3, r3, #2
 80096f4:	3002      	addeq	r0, #2
 80096f6:	07da      	lsls	r2, r3, #31
 80096f8:	d403      	bmi.n	8009702 <__lo0bits+0x4e>
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f100 0001 	add.w	r0, r0, #1
 8009700:	d005      	beq.n	800970e <__lo0bits+0x5a>
 8009702:	600b      	str	r3, [r1, #0]
 8009704:	4770      	bx	lr
 8009706:	4610      	mov	r0, r2
 8009708:	e7e9      	b.n	80096de <__lo0bits+0x2a>
 800970a:	2000      	movs	r0, #0
 800970c:	4770      	bx	lr
 800970e:	2020      	movs	r0, #32
 8009710:	4770      	bx	lr
	...

08009714 <__i2b>:
 8009714:	b510      	push	{r4, lr}
 8009716:	460c      	mov	r4, r1
 8009718:	2101      	movs	r1, #1
 800971a:	f7ff feed 	bl	80094f8 <_Balloc>
 800971e:	4602      	mov	r2, r0
 8009720:	b928      	cbnz	r0, 800972e <__i2b+0x1a>
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <__i2b+0x24>)
 8009724:	4805      	ldr	r0, [pc, #20]	; (800973c <__i2b+0x28>)
 8009726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800972a:	f000 fca7 	bl	800a07c <__assert_func>
 800972e:	2301      	movs	r3, #1
 8009730:	6144      	str	r4, [r0, #20]
 8009732:	6103      	str	r3, [r0, #16]
 8009734:	bd10      	pop	{r4, pc}
 8009736:	bf00      	nop
 8009738:	0800bdfa 	.word	0x0800bdfa
 800973c:	0800bee0 	.word	0x0800bee0

08009740 <__multiply>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	4691      	mov	r9, r2
 8009746:	690a      	ldr	r2, [r1, #16]
 8009748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800974c:	429a      	cmp	r2, r3
 800974e:	bfb8      	it	lt
 8009750:	460b      	movlt	r3, r1
 8009752:	460c      	mov	r4, r1
 8009754:	bfbc      	itt	lt
 8009756:	464c      	movlt	r4, r9
 8009758:	4699      	movlt	r9, r3
 800975a:	6927      	ldr	r7, [r4, #16]
 800975c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009760:	68a3      	ldr	r3, [r4, #8]
 8009762:	6861      	ldr	r1, [r4, #4]
 8009764:	eb07 060a 	add.w	r6, r7, sl
 8009768:	42b3      	cmp	r3, r6
 800976a:	b085      	sub	sp, #20
 800976c:	bfb8      	it	lt
 800976e:	3101      	addlt	r1, #1
 8009770:	f7ff fec2 	bl	80094f8 <_Balloc>
 8009774:	b930      	cbnz	r0, 8009784 <__multiply+0x44>
 8009776:	4602      	mov	r2, r0
 8009778:	4b44      	ldr	r3, [pc, #272]	; (800988c <__multiply+0x14c>)
 800977a:	4845      	ldr	r0, [pc, #276]	; (8009890 <__multiply+0x150>)
 800977c:	f240 115d 	movw	r1, #349	; 0x15d
 8009780:	f000 fc7c 	bl	800a07c <__assert_func>
 8009784:	f100 0514 	add.w	r5, r0, #20
 8009788:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800978c:	462b      	mov	r3, r5
 800978e:	2200      	movs	r2, #0
 8009790:	4543      	cmp	r3, r8
 8009792:	d321      	bcc.n	80097d8 <__multiply+0x98>
 8009794:	f104 0314 	add.w	r3, r4, #20
 8009798:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800979c:	f109 0314 	add.w	r3, r9, #20
 80097a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80097a4:	9202      	str	r2, [sp, #8]
 80097a6:	1b3a      	subs	r2, r7, r4
 80097a8:	3a15      	subs	r2, #21
 80097aa:	f022 0203 	bic.w	r2, r2, #3
 80097ae:	3204      	adds	r2, #4
 80097b0:	f104 0115 	add.w	r1, r4, #21
 80097b4:	428f      	cmp	r7, r1
 80097b6:	bf38      	it	cc
 80097b8:	2204      	movcc	r2, #4
 80097ba:	9201      	str	r2, [sp, #4]
 80097bc:	9a02      	ldr	r2, [sp, #8]
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d80c      	bhi.n	80097de <__multiply+0x9e>
 80097c4:	2e00      	cmp	r6, #0
 80097c6:	dd03      	ble.n	80097d0 <__multiply+0x90>
 80097c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d05a      	beq.n	8009886 <__multiply+0x146>
 80097d0:	6106      	str	r6, [r0, #16]
 80097d2:	b005      	add	sp, #20
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	f843 2b04 	str.w	r2, [r3], #4
 80097dc:	e7d8      	b.n	8009790 <__multiply+0x50>
 80097de:	f8b3 a000 	ldrh.w	sl, [r3]
 80097e2:	f1ba 0f00 	cmp.w	sl, #0
 80097e6:	d024      	beq.n	8009832 <__multiply+0xf2>
 80097e8:	f104 0e14 	add.w	lr, r4, #20
 80097ec:	46a9      	mov	r9, r5
 80097ee:	f04f 0c00 	mov.w	ip, #0
 80097f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097f6:	f8d9 1000 	ldr.w	r1, [r9]
 80097fa:	fa1f fb82 	uxth.w	fp, r2
 80097fe:	b289      	uxth	r1, r1
 8009800:	fb0a 110b 	mla	r1, sl, fp, r1
 8009804:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009808:	f8d9 2000 	ldr.w	r2, [r9]
 800980c:	4461      	add	r1, ip
 800980e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009812:	fb0a c20b 	mla	r2, sl, fp, ip
 8009816:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800981a:	b289      	uxth	r1, r1
 800981c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009820:	4577      	cmp	r7, lr
 8009822:	f849 1b04 	str.w	r1, [r9], #4
 8009826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800982a:	d8e2      	bhi.n	80097f2 <__multiply+0xb2>
 800982c:	9a01      	ldr	r2, [sp, #4]
 800982e:	f845 c002 	str.w	ip, [r5, r2]
 8009832:	9a03      	ldr	r2, [sp, #12]
 8009834:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009838:	3304      	adds	r3, #4
 800983a:	f1b9 0f00 	cmp.w	r9, #0
 800983e:	d020      	beq.n	8009882 <__multiply+0x142>
 8009840:	6829      	ldr	r1, [r5, #0]
 8009842:	f104 0c14 	add.w	ip, r4, #20
 8009846:	46ae      	mov	lr, r5
 8009848:	f04f 0a00 	mov.w	sl, #0
 800984c:	f8bc b000 	ldrh.w	fp, [ip]
 8009850:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009854:	fb09 220b 	mla	r2, r9, fp, r2
 8009858:	4492      	add	sl, r2
 800985a:	b289      	uxth	r1, r1
 800985c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009860:	f84e 1b04 	str.w	r1, [lr], #4
 8009864:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009868:	f8be 1000 	ldrh.w	r1, [lr]
 800986c:	0c12      	lsrs	r2, r2, #16
 800986e:	fb09 1102 	mla	r1, r9, r2, r1
 8009872:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009876:	4567      	cmp	r7, ip
 8009878:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800987c:	d8e6      	bhi.n	800984c <__multiply+0x10c>
 800987e:	9a01      	ldr	r2, [sp, #4]
 8009880:	50a9      	str	r1, [r5, r2]
 8009882:	3504      	adds	r5, #4
 8009884:	e79a      	b.n	80097bc <__multiply+0x7c>
 8009886:	3e01      	subs	r6, #1
 8009888:	e79c      	b.n	80097c4 <__multiply+0x84>
 800988a:	bf00      	nop
 800988c:	0800bdfa 	.word	0x0800bdfa
 8009890:	0800bee0 	.word	0x0800bee0

08009894 <__pow5mult>:
 8009894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009898:	4615      	mov	r5, r2
 800989a:	f012 0203 	ands.w	r2, r2, #3
 800989e:	4606      	mov	r6, r0
 80098a0:	460f      	mov	r7, r1
 80098a2:	d007      	beq.n	80098b4 <__pow5mult+0x20>
 80098a4:	4c1a      	ldr	r4, [pc, #104]	; (8009910 <__pow5mult+0x7c>)
 80098a6:	3a01      	subs	r2, #1
 80098a8:	2300      	movs	r3, #0
 80098aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ae:	f7ff fe51 	bl	8009554 <__multadd>
 80098b2:	4607      	mov	r7, r0
 80098b4:	10ad      	asrs	r5, r5, #2
 80098b6:	d027      	beq.n	8009908 <__pow5mult+0x74>
 80098b8:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80098ba:	b944      	cbnz	r4, 80098ce <__pow5mult+0x3a>
 80098bc:	f240 2171 	movw	r1, #625	; 0x271
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7ff ff27 	bl	8009714 <__i2b>
 80098c6:	2300      	movs	r3, #0
 80098c8:	64b0      	str	r0, [r6, #72]	; 0x48
 80098ca:	4604      	mov	r4, r0
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	07eb      	lsls	r3, r5, #31
 80098d4:	d50a      	bpl.n	80098ec <__pow5mult+0x58>
 80098d6:	4639      	mov	r1, r7
 80098d8:	4622      	mov	r2, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff30 	bl	8009740 <__multiply>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4680      	mov	r8, r0
 80098e4:	4630      	mov	r0, r6
 80098e6:	f7ff fe2c 	bl	8009542 <_Bfree>
 80098ea:	4647      	mov	r7, r8
 80098ec:	106d      	asrs	r5, r5, #1
 80098ee:	d00b      	beq.n	8009908 <__pow5mult+0x74>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	b938      	cbnz	r0, 8009904 <__pow5mult+0x70>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4621      	mov	r1, r4
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff ff21 	bl	8009740 <__multiply>
 80098fe:	6020      	str	r0, [r4, #0]
 8009900:	f8c0 9000 	str.w	r9, [r0]
 8009904:	4604      	mov	r4, r0
 8009906:	e7e4      	b.n	80098d2 <__pow5mult+0x3e>
 8009908:	4638      	mov	r0, r7
 800990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990e:	bf00      	nop
 8009910:	0800c030 	.word	0x0800c030

08009914 <__lshift>:
 8009914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	460c      	mov	r4, r1
 800991a:	6849      	ldr	r1, [r1, #4]
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009922:	68a3      	ldr	r3, [r4, #8]
 8009924:	4607      	mov	r7, r0
 8009926:	4691      	mov	r9, r2
 8009928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800992c:	f108 0601 	add.w	r6, r8, #1
 8009930:	42b3      	cmp	r3, r6
 8009932:	db0b      	blt.n	800994c <__lshift+0x38>
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff fddf 	bl	80094f8 <_Balloc>
 800993a:	4605      	mov	r5, r0
 800993c:	b948      	cbnz	r0, 8009952 <__lshift+0x3e>
 800993e:	4602      	mov	r2, r0
 8009940:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <__lshift+0xd8>)
 8009942:	482b      	ldr	r0, [pc, #172]	; (80099f0 <__lshift+0xdc>)
 8009944:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009948:	f000 fb98 	bl	800a07c <__assert_func>
 800994c:	3101      	adds	r1, #1
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	e7ee      	b.n	8009930 <__lshift+0x1c>
 8009952:	2300      	movs	r3, #0
 8009954:	f100 0114 	add.w	r1, r0, #20
 8009958:	f100 0210 	add.w	r2, r0, #16
 800995c:	4618      	mov	r0, r3
 800995e:	4553      	cmp	r3, sl
 8009960:	db37      	blt.n	80099d2 <__lshift+0xbe>
 8009962:	6920      	ldr	r0, [r4, #16]
 8009964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009968:	f104 0314 	add.w	r3, r4, #20
 800996c:	f019 091f 	ands.w	r9, r9, #31
 8009970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009978:	d02f      	beq.n	80099da <__lshift+0xc6>
 800997a:	f1c9 0e20 	rsb	lr, r9, #32
 800997e:	468a      	mov	sl, r1
 8009980:	f04f 0c00 	mov.w	ip, #0
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	fa02 f209 	lsl.w	r2, r2, r9
 800998a:	ea42 020c 	orr.w	r2, r2, ip
 800998e:	f84a 2b04 	str.w	r2, [sl], #4
 8009992:	f853 2b04 	ldr.w	r2, [r3], #4
 8009996:	4298      	cmp	r0, r3
 8009998:	fa22 fc0e 	lsr.w	ip, r2, lr
 800999c:	d8f2      	bhi.n	8009984 <__lshift+0x70>
 800999e:	1b03      	subs	r3, r0, r4
 80099a0:	3b15      	subs	r3, #21
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	3304      	adds	r3, #4
 80099a8:	f104 0215 	add.w	r2, r4, #21
 80099ac:	4290      	cmp	r0, r2
 80099ae:	bf38      	it	cc
 80099b0:	2304      	movcc	r3, #4
 80099b2:	f841 c003 	str.w	ip, [r1, r3]
 80099b6:	f1bc 0f00 	cmp.w	ip, #0
 80099ba:	d001      	beq.n	80099c0 <__lshift+0xac>
 80099bc:	f108 0602 	add.w	r6, r8, #2
 80099c0:	3e01      	subs	r6, #1
 80099c2:	4638      	mov	r0, r7
 80099c4:	612e      	str	r6, [r5, #16]
 80099c6:	4621      	mov	r1, r4
 80099c8:	f7ff fdbb 	bl	8009542 <_Bfree>
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099d6:	3301      	adds	r3, #1
 80099d8:	e7c1      	b.n	800995e <__lshift+0x4a>
 80099da:	3904      	subs	r1, #4
 80099dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80099e4:	4298      	cmp	r0, r3
 80099e6:	d8f9      	bhi.n	80099dc <__lshift+0xc8>
 80099e8:	e7ea      	b.n	80099c0 <__lshift+0xac>
 80099ea:	bf00      	nop
 80099ec:	0800bdfa 	.word	0x0800bdfa
 80099f0:	0800bee0 	.word	0x0800bee0

080099f4 <__mcmp>:
 80099f4:	b530      	push	{r4, r5, lr}
 80099f6:	6902      	ldr	r2, [r0, #16]
 80099f8:	690c      	ldr	r4, [r1, #16]
 80099fa:	1b12      	subs	r2, r2, r4
 80099fc:	d10e      	bne.n	8009a1c <__mcmp+0x28>
 80099fe:	f100 0314 	add.w	r3, r0, #20
 8009a02:	3114      	adds	r1, #20
 8009a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a14:	42a5      	cmp	r5, r4
 8009a16:	d003      	beq.n	8009a20 <__mcmp+0x2c>
 8009a18:	d305      	bcc.n	8009a26 <__mcmp+0x32>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	bd30      	pop	{r4, r5, pc}
 8009a20:	4283      	cmp	r3, r0
 8009a22:	d3f3      	bcc.n	8009a0c <__mcmp+0x18>
 8009a24:	e7fa      	b.n	8009a1c <__mcmp+0x28>
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a2a:	e7f7      	b.n	8009a1c <__mcmp+0x28>

08009a2c <__mdiff>:
 8009a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	460c      	mov	r4, r1
 8009a32:	4606      	mov	r6, r0
 8009a34:	4611      	mov	r1, r2
 8009a36:	4620      	mov	r0, r4
 8009a38:	4690      	mov	r8, r2
 8009a3a:	f7ff ffdb 	bl	80099f4 <__mcmp>
 8009a3e:	1e05      	subs	r5, r0, #0
 8009a40:	d110      	bne.n	8009a64 <__mdiff+0x38>
 8009a42:	4629      	mov	r1, r5
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fd57 	bl	80094f8 <_Balloc>
 8009a4a:	b930      	cbnz	r0, 8009a5a <__mdiff+0x2e>
 8009a4c:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <__mdiff+0x10c>)
 8009a4e:	4602      	mov	r2, r0
 8009a50:	f240 2132 	movw	r1, #562	; 0x232
 8009a54:	4839      	ldr	r0, [pc, #228]	; (8009b3c <__mdiff+0x110>)
 8009a56:	f000 fb11 	bl	800a07c <__assert_func>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	bfa4      	itt	ge
 8009a66:	4643      	movge	r3, r8
 8009a68:	46a0      	movge	r8, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a70:	bfa6      	itte	ge
 8009a72:	461c      	movge	r4, r3
 8009a74:	2500      	movge	r5, #0
 8009a76:	2501      	movlt	r5, #1
 8009a78:	f7ff fd3e 	bl	80094f8 <_Balloc>
 8009a7c:	b920      	cbnz	r0, 8009a88 <__mdiff+0x5c>
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	; (8009b38 <__mdiff+0x10c>)
 8009a80:	4602      	mov	r2, r0
 8009a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a86:	e7e5      	b.n	8009a54 <__mdiff+0x28>
 8009a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a8c:	6926      	ldr	r6, [r4, #16]
 8009a8e:	60c5      	str	r5, [r0, #12]
 8009a90:	f104 0914 	add.w	r9, r4, #20
 8009a94:	f108 0514 	add.w	r5, r8, #20
 8009a98:	f100 0e14 	add.w	lr, r0, #20
 8009a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009aa4:	f108 0210 	add.w	r2, r8, #16
 8009aa8:	46f2      	mov	sl, lr
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ab4:	fa1f f883 	uxth.w	r8, r3
 8009ab8:	fa11 f18b 	uxtah	r1, r1, fp
 8009abc:	0c1b      	lsrs	r3, r3, #16
 8009abe:	eba1 0808 	sub.w	r8, r1, r8
 8009ac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009aca:	fa1f f888 	uxth.w	r8, r8
 8009ace:	1419      	asrs	r1, r3, #16
 8009ad0:	454e      	cmp	r6, r9
 8009ad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8009ada:	d8e7      	bhi.n	8009aac <__mdiff+0x80>
 8009adc:	1b33      	subs	r3, r6, r4
 8009ade:	3b15      	subs	r3, #21
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	3415      	adds	r4, #21
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	bf38      	it	cc
 8009aec:	2304      	movcc	r3, #4
 8009aee:	441d      	add	r5, r3
 8009af0:	4473      	add	r3, lr
 8009af2:	469e      	mov	lr, r3
 8009af4:	462e      	mov	r6, r5
 8009af6:	4566      	cmp	r6, ip
 8009af8:	d30e      	bcc.n	8009b18 <__mdiff+0xec>
 8009afa:	f10c 0203 	add.w	r2, ip, #3
 8009afe:	1b52      	subs	r2, r2, r5
 8009b00:	f022 0203 	bic.w	r2, r2, #3
 8009b04:	3d03      	subs	r5, #3
 8009b06:	45ac      	cmp	ip, r5
 8009b08:	bf38      	it	cc
 8009b0a:	2200      	movcc	r2, #0
 8009b0c:	441a      	add	r2, r3
 8009b0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b12:	b17b      	cbz	r3, 8009b34 <__mdiff+0x108>
 8009b14:	6107      	str	r7, [r0, #16]
 8009b16:	e7a3      	b.n	8009a60 <__mdiff+0x34>
 8009b18:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b1c:	fa11 f288 	uxtah	r2, r1, r8
 8009b20:	1414      	asrs	r4, r2, #16
 8009b22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b26:	b292      	uxth	r2, r2
 8009b28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b2c:	f84e 2b04 	str.w	r2, [lr], #4
 8009b30:	1421      	asrs	r1, r4, #16
 8009b32:	e7e0      	b.n	8009af6 <__mdiff+0xca>
 8009b34:	3f01      	subs	r7, #1
 8009b36:	e7ea      	b.n	8009b0e <__mdiff+0xe2>
 8009b38:	0800bdfa 	.word	0x0800bdfa
 8009b3c:	0800bee0 	.word	0x0800bee0

08009b40 <__ulp>:
 8009b40:	b082      	sub	sp, #8
 8009b42:	ed8d 0b00 	vstr	d0, [sp]
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	4912      	ldr	r1, [pc, #72]	; (8009b94 <__ulp+0x54>)
 8009b4a:	4019      	ands	r1, r3
 8009b4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b50:	2900      	cmp	r1, #0
 8009b52:	dd05      	ble.n	8009b60 <__ulp+0x20>
 8009b54:	2200      	movs	r2, #0
 8009b56:	460b      	mov	r3, r1
 8009b58:	ec43 2b10 	vmov	d0, r2, r3
 8009b5c:	b002      	add	sp, #8
 8009b5e:	4770      	bx	lr
 8009b60:	4249      	negs	r1, r1
 8009b62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	f04f 0300 	mov.w	r3, #0
 8009b72:	da04      	bge.n	8009b7e <__ulp+0x3e>
 8009b74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b78:	fa41 f300 	asr.w	r3, r1, r0
 8009b7c:	e7ec      	b.n	8009b58 <__ulp+0x18>
 8009b7e:	f1a0 0114 	sub.w	r1, r0, #20
 8009b82:	291e      	cmp	r1, #30
 8009b84:	bfda      	itte	le
 8009b86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b8e:	2101      	movgt	r1, #1
 8009b90:	460a      	mov	r2, r1
 8009b92:	e7e1      	b.n	8009b58 <__ulp+0x18>
 8009b94:	7ff00000 	.word	0x7ff00000

08009b98 <__b2d>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	6905      	ldr	r5, [r0, #16]
 8009b9c:	f100 0714 	add.w	r7, r0, #20
 8009ba0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ba4:	1f2e      	subs	r6, r5, #4
 8009ba6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fd62 	bl	8009674 <__hi0bits>
 8009bb0:	f1c0 0320 	rsb	r3, r0, #32
 8009bb4:	280a      	cmp	r0, #10
 8009bb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c34 <__b2d+0x9c>
 8009bba:	600b      	str	r3, [r1, #0]
 8009bbc:	dc14      	bgt.n	8009be8 <__b2d+0x50>
 8009bbe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009bc2:	fa24 f10e 	lsr.w	r1, r4, lr
 8009bc6:	42b7      	cmp	r7, r6
 8009bc8:	ea41 030c 	orr.w	r3, r1, ip
 8009bcc:	bf34      	ite	cc
 8009bce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bd2:	2100      	movcs	r1, #0
 8009bd4:	3015      	adds	r0, #21
 8009bd6:	fa04 f000 	lsl.w	r0, r4, r0
 8009bda:	fa21 f10e 	lsr.w	r1, r1, lr
 8009bde:	ea40 0201 	orr.w	r2, r0, r1
 8009be2:	ec43 2b10 	vmov	d0, r2, r3
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	42b7      	cmp	r7, r6
 8009bea:	bf3a      	itte	cc
 8009bec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009bf4:	2100      	movcs	r1, #0
 8009bf6:	380b      	subs	r0, #11
 8009bf8:	d017      	beq.n	8009c2a <__b2d+0x92>
 8009bfa:	f1c0 0c20 	rsb	ip, r0, #32
 8009bfe:	fa04 f500 	lsl.w	r5, r4, r0
 8009c02:	42be      	cmp	r6, r7
 8009c04:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c08:	ea45 0504 	orr.w	r5, r5, r4
 8009c0c:	bf8c      	ite	hi
 8009c0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c12:	2400      	movls	r4, #0
 8009c14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c18:	fa01 f000 	lsl.w	r0, r1, r0
 8009c1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c24:	ea40 0204 	orr.w	r2, r0, r4
 8009c28:	e7db      	b.n	8009be2 <__b2d+0x4a>
 8009c2a:	ea44 030c 	orr.w	r3, r4, ip
 8009c2e:	460a      	mov	r2, r1
 8009c30:	e7d7      	b.n	8009be2 <__b2d+0x4a>
 8009c32:	bf00      	nop
 8009c34:	3ff00000 	.word	0x3ff00000

08009c38 <__d2b>:
 8009c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	2101      	movs	r1, #1
 8009c40:	ec57 6b10 	vmov	r6, r7, d0
 8009c44:	4690      	mov	r8, r2
 8009c46:	f7ff fc57 	bl	80094f8 <_Balloc>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	b930      	cbnz	r0, 8009c5c <__d2b+0x24>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <__d2b+0xb0>)
 8009c52:	4826      	ldr	r0, [pc, #152]	; (8009cec <__d2b+0xb4>)
 8009c54:	f240 310a 	movw	r1, #778	; 0x30a
 8009c58:	f000 fa10 	bl	800a07c <__assert_func>
 8009c5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c64:	bb35      	cbnz	r5, 8009cb4 <__d2b+0x7c>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	d028      	beq.n	8009cbe <__d2b+0x86>
 8009c6c:	4668      	mov	r0, sp
 8009c6e:	9600      	str	r6, [sp, #0]
 8009c70:	f7ff fd20 	bl	80096b4 <__lo0bits>
 8009c74:	9900      	ldr	r1, [sp, #0]
 8009c76:	b300      	cbz	r0, 8009cba <__d2b+0x82>
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	f1c0 0320 	rsb	r3, r0, #32
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	430b      	orrs	r3, r1
 8009c84:	40c2      	lsrs	r2, r0
 8009c86:	6163      	str	r3, [r4, #20]
 8009c88:	9201      	str	r2, [sp, #4]
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	61a3      	str	r3, [r4, #24]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bf14      	ite	ne
 8009c92:	2202      	movne	r2, #2
 8009c94:	2201      	moveq	r2, #1
 8009c96:	6122      	str	r2, [r4, #16]
 8009c98:	b1d5      	cbz	r5, 8009cd0 <__d2b+0x98>
 8009c9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c9e:	4405      	add	r5, r0
 8009ca0:	f8c9 5000 	str.w	r5, [r9]
 8009ca4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ca8:	f8c8 0000 	str.w	r0, [r8]
 8009cac:	4620      	mov	r0, r4
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cb8:	e7d5      	b.n	8009c66 <__d2b+0x2e>
 8009cba:	6161      	str	r1, [r4, #20]
 8009cbc:	e7e5      	b.n	8009c8a <__d2b+0x52>
 8009cbe:	a801      	add	r0, sp, #4
 8009cc0:	f7ff fcf8 	bl	80096b4 <__lo0bits>
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	6163      	str	r3, [r4, #20]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	6122      	str	r2, [r4, #16]
 8009ccc:	3020      	adds	r0, #32
 8009cce:	e7e3      	b.n	8009c98 <__d2b+0x60>
 8009cd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cd8:	f8c9 0000 	str.w	r0, [r9]
 8009cdc:	6918      	ldr	r0, [r3, #16]
 8009cde:	f7ff fcc9 	bl	8009674 <__hi0bits>
 8009ce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ce6:	e7df      	b.n	8009ca8 <__d2b+0x70>
 8009ce8:	0800bdfa 	.word	0x0800bdfa
 8009cec:	0800bee0 	.word	0x0800bee0

08009cf0 <__ratio>:
 8009cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	4688      	mov	r8, r1
 8009cf6:	4669      	mov	r1, sp
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	f7ff ff4d 	bl	8009b98 <__b2d>
 8009cfe:	a901      	add	r1, sp, #4
 8009d00:	4640      	mov	r0, r8
 8009d02:	ec55 4b10 	vmov	r4, r5, d0
 8009d06:	f7ff ff47 	bl	8009b98 <__b2d>
 8009d0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d12:	eba3 0c02 	sub.w	ip, r3, r2
 8009d16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d20:	ec51 0b10 	vmov	r0, r1, d0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfd6      	itet	le
 8009d28:	460a      	movle	r2, r1
 8009d2a:	462a      	movgt	r2, r5
 8009d2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d30:	468b      	mov	fp, r1
 8009d32:	462f      	mov	r7, r5
 8009d34:	bfd4      	ite	le
 8009d36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d3e:	4620      	mov	r0, r4
 8009d40:	ee10 2a10 	vmov	r2, s0
 8009d44:	465b      	mov	r3, fp
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fd90 	bl	800086c <__aeabi_ddiv>
 8009d4c:	ec41 0b10 	vmov	d0, r0, r1
 8009d50:	b003      	add	sp, #12
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d56 <__copybits>:
 8009d56:	3901      	subs	r1, #1
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	1149      	asrs	r1, r1, #5
 8009d5c:	6914      	ldr	r4, [r2, #16]
 8009d5e:	3101      	adds	r1, #1
 8009d60:	f102 0314 	add.w	r3, r2, #20
 8009d64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d6c:	1f05      	subs	r5, r0, #4
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	d30c      	bcc.n	8009d8c <__copybits+0x36>
 8009d72:	1aa3      	subs	r3, r4, r2
 8009d74:	3b11      	subs	r3, #17
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	3211      	adds	r2, #17
 8009d7c:	42a2      	cmp	r2, r4
 8009d7e:	bf88      	it	hi
 8009d80:	2300      	movhi	r3, #0
 8009d82:	4418      	add	r0, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	4288      	cmp	r0, r1
 8009d88:	d305      	bcc.n	8009d96 <__copybits+0x40>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d90:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d94:	e7eb      	b.n	8009d6e <__copybits+0x18>
 8009d96:	f840 3b04 	str.w	r3, [r0], #4
 8009d9a:	e7f4      	b.n	8009d86 <__copybits+0x30>

08009d9c <__any_on>:
 8009d9c:	f100 0214 	add.w	r2, r0, #20
 8009da0:	6900      	ldr	r0, [r0, #16]
 8009da2:	114b      	asrs	r3, r1, #5
 8009da4:	4298      	cmp	r0, r3
 8009da6:	b510      	push	{r4, lr}
 8009da8:	db11      	blt.n	8009dce <__any_on+0x32>
 8009daa:	dd0a      	ble.n	8009dc2 <__any_on+0x26>
 8009dac:	f011 011f 	ands.w	r1, r1, #31
 8009db0:	d007      	beq.n	8009dc2 <__any_on+0x26>
 8009db2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009db6:	fa24 f001 	lsr.w	r0, r4, r1
 8009dba:	fa00 f101 	lsl.w	r1, r0, r1
 8009dbe:	428c      	cmp	r4, r1
 8009dc0:	d10b      	bne.n	8009dda <__any_on+0x3e>
 8009dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d803      	bhi.n	8009dd2 <__any_on+0x36>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	4603      	mov	r3, r0
 8009dd0:	e7f7      	b.n	8009dc2 <__any_on+0x26>
 8009dd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d0f5      	beq.n	8009dc6 <__any_on+0x2a>
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e7f6      	b.n	8009dcc <__any_on+0x30>
	...

08009de0 <frexp>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	2100      	movs	r1, #0
 8009de4:	ec55 4b10 	vmov	r4, r5, d0
 8009de8:	6001      	str	r1, [r0, #0]
 8009dea:	4916      	ldr	r1, [pc, #88]	; (8009e44 <frexp+0x64>)
 8009dec:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009df0:	428a      	cmp	r2, r1
 8009df2:	4606      	mov	r6, r0
 8009df4:	462b      	mov	r3, r5
 8009df6:	dc22      	bgt.n	8009e3e <frexp+0x5e>
 8009df8:	ee10 1a10 	vmov	r1, s0
 8009dfc:	4311      	orrs	r1, r2
 8009dfe:	d01e      	beq.n	8009e3e <frexp+0x5e>
 8009e00:	4911      	ldr	r1, [pc, #68]	; (8009e48 <frexp+0x68>)
 8009e02:	4029      	ands	r1, r5
 8009e04:	b969      	cbnz	r1, 8009e22 <frexp+0x42>
 8009e06:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <frexp+0x6c>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	ee10 0a10 	vmov	r0, s0
 8009e0e:	4629      	mov	r1, r5
 8009e10:	f7f6 fc02 	bl	8000618 <__aeabi_dmul>
 8009e14:	460b      	mov	r3, r1
 8009e16:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009e1a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8009e1e:	4604      	mov	r4, r0
 8009e20:	6031      	str	r1, [r6, #0]
 8009e22:	6831      	ldr	r1, [r6, #0]
 8009e24:	1512      	asrs	r2, r2, #20
 8009e26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e2a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8009e2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e32:	440a      	add	r2, r1
 8009e34:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8009e38:	6032      	str	r2, [r6, #0]
 8009e3a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009e3e:	ec45 4b10 	vmov	d0, r4, r5
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	7fefffff 	.word	0x7fefffff
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	43500000 	.word	0x43500000

08009e50 <nan>:
 8009e50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e58 <nan+0x8>
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	00000000 	.word	0x00000000
 8009e5c:	7ff80000 	.word	0x7ff80000

08009e60 <_sbrk_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_sbrk_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	f7f7 fece 	bl	8001c0c <_sbrk>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_sbrk_r+0x1a>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_sbrk_r+0x1a>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	20000be8 	.word	0x20000be8

08009e80 <strncmp>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	b17a      	cbz	r2, 8009ea4 <strncmp+0x24>
 8009e84:	4603      	mov	r3, r0
 8009e86:	3901      	subs	r1, #1
 8009e88:	1884      	adds	r4, r0, r2
 8009e8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e92:	4290      	cmp	r0, r2
 8009e94:	d101      	bne.n	8009e9a <strncmp+0x1a>
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	d101      	bne.n	8009e9e <strncmp+0x1e>
 8009e9a:	1a80      	subs	r0, r0, r2
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1f3      	bne.n	8009e8a <strncmp+0xa>
 8009ea2:	e7fa      	b.n	8009e9a <strncmp+0x1a>
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	e7f9      	b.n	8009e9c <strncmp+0x1c>

08009ea8 <strncpy>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	3901      	subs	r1, #1
 8009eac:	4603      	mov	r3, r0
 8009eae:	b132      	cbz	r2, 8009ebe <strncpy+0x16>
 8009eb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009eb4:	f803 4b01 	strb.w	r4, [r3], #1
 8009eb8:	3a01      	subs	r2, #1
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d1f7      	bne.n	8009eae <strncpy+0x6>
 8009ebe:	441a      	add	r2, r3
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d100      	bne.n	8009ec8 <strncpy+0x20>
 8009ec6:	bd10      	pop	{r4, pc}
 8009ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ecc:	e7f9      	b.n	8009ec2 <strncpy+0x1a>

08009ece <__ssprint_r>:
 8009ece:	6893      	ldr	r3, [r2, #8]
 8009ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	4617      	mov	r7, r2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d061      	beq.n	8009fa2 <__ssprint_r+0xd4>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8d2 a000 	ldr.w	sl, [r2]
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	469b      	mov	fp, r3
 8009ee8:	f1bb 0f00 	cmp.w	fp, #0
 8009eec:	d02b      	beq.n	8009f46 <__ssprint_r+0x78>
 8009eee:	68a6      	ldr	r6, [r4, #8]
 8009ef0:	455e      	cmp	r6, fp
 8009ef2:	d844      	bhi.n	8009f7e <__ssprint_r+0xb0>
 8009ef4:	89a2      	ldrh	r2, [r4, #12]
 8009ef6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009efa:	d03e      	beq.n	8009f7a <__ssprint_r+0xac>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	6921      	ldr	r1, [r4, #16]
 8009f00:	6965      	ldr	r5, [r4, #20]
 8009f02:	eba0 0901 	sub.w	r9, r0, r1
 8009f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f0e:	f109 0001 	add.w	r0, r9, #1
 8009f12:	106d      	asrs	r5, r5, #1
 8009f14:	4458      	add	r0, fp
 8009f16:	4285      	cmp	r5, r0
 8009f18:	bf38      	it	cc
 8009f1a:	4605      	movcc	r5, r0
 8009f1c:	0553      	lsls	r3, r2, #21
 8009f1e:	d545      	bpl.n	8009fac <__ssprint_r+0xde>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4640      	mov	r0, r8
 8009f24:	f7ff f880 	bl	8009028 <_malloc_r>
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b9a0      	cbnz	r0, 8009f56 <__ssprint_r+0x88>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	f8c8 3000 	str.w	r3, [r8]
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f44:	e02f      	b.n	8009fa6 <__ssprint_r+0xd8>
 8009f46:	f8da 3000 	ldr.w	r3, [sl]
 8009f4a:	f8da b004 	ldr.w	fp, [sl, #4]
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	f10a 0a08 	add.w	sl, sl, #8
 8009f54:	e7c8      	b.n	8009ee8 <__ssprint_r+0x1a>
 8009f56:	464a      	mov	r2, r9
 8009f58:	6921      	ldr	r1, [r4, #16]
 8009f5a:	f7ff fab3 	bl	80094c4 <memcpy>
 8009f5e:	89a2      	ldrh	r2, [r4, #12]
 8009f60:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009f64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f68:	81a2      	strh	r2, [r4, #12]
 8009f6a:	6126      	str	r6, [r4, #16]
 8009f6c:	6165      	str	r5, [r4, #20]
 8009f6e:	444e      	add	r6, r9
 8009f70:	eba5 0509 	sub.w	r5, r5, r9
 8009f74:	6026      	str	r6, [r4, #0]
 8009f76:	60a5      	str	r5, [r4, #8]
 8009f78:	465e      	mov	r6, fp
 8009f7a:	455e      	cmp	r6, fp
 8009f7c:	d900      	bls.n	8009f80 <__ssprint_r+0xb2>
 8009f7e:	465e      	mov	r6, fp
 8009f80:	4632      	mov	r2, r6
 8009f82:	9901      	ldr	r1, [sp, #4]
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	f000 f8df 	bl	800a148 <memmove>
 8009f8a:	68a2      	ldr	r2, [r4, #8]
 8009f8c:	1b92      	subs	r2, r2, r6
 8009f8e:	60a2      	str	r2, [r4, #8]
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	4432      	add	r2, r6
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	eba2 030b 	sub.w	r3, r2, fp
 8009f9c:	60bb      	str	r3, [r7, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1d1      	bne.n	8009f46 <__ssprint_r+0x78>
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	462a      	mov	r2, r5
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f000 f8e4 	bl	800a17c <_realloc_r>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d1d7      	bne.n	8009f6a <__ssprint_r+0x9c>
 8009fba:	6921      	ldr	r1, [r4, #16]
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f7fe fbf5 	bl	80087ac <_free_r>
 8009fc2:	e7b3      	b.n	8009f2c <__ssprint_r+0x5e>

08009fc4 <sysconf>:
 8009fc4:	2808      	cmp	r0, #8
 8009fc6:	b508      	push	{r3, lr}
 8009fc8:	d006      	beq.n	8009fd8 <sysconf+0x14>
 8009fca:	f7fb fbdf 	bl	800578c <__errno>
 8009fce:	2316      	movs	r3, #22
 8009fd0:	6003      	str	r3, [r0, #0]
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fd6:	bd08      	pop	{r3, pc}
 8009fd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009fdc:	e7fb      	b.n	8009fd6 <sysconf+0x12>

08009fde <__ascii_wctomb>:
 8009fde:	b149      	cbz	r1, 8009ff4 <__ascii_wctomb+0x16>
 8009fe0:	2aff      	cmp	r2, #255	; 0xff
 8009fe2:	bf85      	ittet	hi
 8009fe4:	238a      	movhi	r3, #138	; 0x8a
 8009fe6:	6003      	strhi	r3, [r0, #0]
 8009fe8:	700a      	strbls	r2, [r1, #0]
 8009fea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fee:	bf98      	it	ls
 8009ff0:	2001      	movls	r0, #1
 8009ff2:	4770      	bx	lr
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4770      	bx	lr

08009ff8 <__register_exitproc>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	f8df a078 	ldr.w	sl, [pc, #120]	; 800a078 <__register_exitproc+0x80>
 800a000:	4606      	mov	r6, r0
 800a002:	f8da 0000 	ldr.w	r0, [sl]
 800a006:	4698      	mov	r8, r3
 800a008:	460f      	mov	r7, r1
 800a00a:	4691      	mov	r9, r2
 800a00c:	f7ff f80a 	bl	8009024 <__retarget_lock_acquire_recursive>
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <__register_exitproc+0x7c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a018:	b91c      	cbnz	r4, 800a022 <__register_exitproc+0x2a>
 800a01a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a01e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a022:	6865      	ldr	r5, [r4, #4]
 800a024:	f8da 0000 	ldr.w	r0, [sl]
 800a028:	2d1f      	cmp	r5, #31
 800a02a:	dd05      	ble.n	800a038 <__register_exitproc+0x40>
 800a02c:	f7fe fffb 	bl	8009026 <__retarget_lock_release_recursive>
 800a030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a038:	b19e      	cbz	r6, 800a062 <__register_exitproc+0x6a>
 800a03a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a03e:	2201      	movs	r2, #1
 800a040:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a044:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800a048:	40aa      	lsls	r2, r5
 800a04a:	4313      	orrs	r3, r2
 800a04c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800a050:	2e02      	cmp	r6, #2
 800a052:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a056:	bf02      	ittt	eq
 800a058:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800a05c:	4313      	orreq	r3, r2
 800a05e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800a062:	1c6b      	adds	r3, r5, #1
 800a064:	3502      	adds	r5, #2
 800a066:	6063      	str	r3, [r4, #4]
 800a068:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a06c:	f7fe ffdb 	bl	8009026 <__retarget_lock_release_recursive>
 800a070:	2000      	movs	r0, #0
 800a072:	e7df      	b.n	800a034 <__register_exitproc+0x3c>
 800a074:	0800bc40 	.word	0x0800bc40
 800a078:	20000440 	.word	0x20000440

0800a07c <__assert_func>:
 800a07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a07e:	4614      	mov	r4, r2
 800a080:	461a      	mov	r2, r3
 800a082:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <__assert_func+0x2c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4605      	mov	r5, r0
 800a088:	68d8      	ldr	r0, [r3, #12]
 800a08a:	b14c      	cbz	r4, 800a0a0 <__assert_func+0x24>
 800a08c:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <__assert_func+0x30>)
 800a08e:	9100      	str	r1, [sp, #0]
 800a090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a094:	4906      	ldr	r1, [pc, #24]	; (800a0b0 <__assert_func+0x34>)
 800a096:	462b      	mov	r3, r5
 800a098:	f000 f844 	bl	800a124 <fiprintf>
 800a09c:	f000 ff72 	bl	800af84 <abort>
 800a0a0:	4b04      	ldr	r3, [pc, #16]	; (800a0b4 <__assert_func+0x38>)
 800a0a2:	461c      	mov	r4, r3
 800a0a4:	e7f3      	b.n	800a08e <__assert_func+0x12>
 800a0a6:	bf00      	nop
 800a0a8:	20000014 	.word	0x20000014
 800a0ac:	0800c03c 	.word	0x0800c03c
 800a0b0:	0800c049 	.word	0x0800c049
 800a0b4:	0800c077 	.word	0x0800c077

0800a0b8 <_calloc_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	fba1 1502 	umull	r1, r5, r1, r2
 800a0be:	b92d      	cbnz	r5, 800a0cc <_calloc_r+0x14>
 800a0c0:	f7fe ffb2 	bl	8009028 <_malloc_r>
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	b938      	cbnz	r0, 800a0d8 <_calloc_r+0x20>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	f7fb fb5e 	bl	800578c <__errno>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	6003      	str	r3, [r0, #0]
 800a0d4:	2400      	movs	r4, #0
 800a0d6:	e7f7      	b.n	800a0c8 <_calloc_r+0x10>
 800a0d8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a0dc:	f022 0203 	bic.w	r2, r2, #3
 800a0e0:	3a04      	subs	r2, #4
 800a0e2:	2a24      	cmp	r2, #36	; 0x24
 800a0e4:	d819      	bhi.n	800a11a <_calloc_r+0x62>
 800a0e6:	2a13      	cmp	r2, #19
 800a0e8:	d915      	bls.n	800a116 <_calloc_r+0x5e>
 800a0ea:	2a1b      	cmp	r2, #27
 800a0ec:	e9c0 5500 	strd	r5, r5, [r0]
 800a0f0:	d806      	bhi.n	800a100 <_calloc_r+0x48>
 800a0f2:	f100 0308 	add.w	r3, r0, #8
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	e9c3 2200 	strd	r2, r2, [r3]
 800a0fc:	609a      	str	r2, [r3, #8]
 800a0fe:	e7e3      	b.n	800a0c8 <_calloc_r+0x10>
 800a100:	2a24      	cmp	r2, #36	; 0x24
 800a102:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800a106:	bf11      	iteee	ne
 800a108:	f100 0310 	addne.w	r3, r0, #16
 800a10c:	6105      	streq	r5, [r0, #16]
 800a10e:	f100 0318 	addeq.w	r3, r0, #24
 800a112:	6145      	streq	r5, [r0, #20]
 800a114:	e7ef      	b.n	800a0f6 <_calloc_r+0x3e>
 800a116:	4603      	mov	r3, r0
 800a118:	e7ed      	b.n	800a0f6 <_calloc_r+0x3e>
 800a11a:	4629      	mov	r1, r5
 800a11c:	f7fb fb60 	bl	80057e0 <memset>
 800a120:	e7d2      	b.n	800a0c8 <_calloc_r+0x10>
	...

0800a124 <fiprintf>:
 800a124:	b40e      	push	{r1, r2, r3}
 800a126:	b503      	push	{r0, r1, lr}
 800a128:	4601      	mov	r1, r0
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	4805      	ldr	r0, [pc, #20]	; (800a144 <fiprintf+0x20>)
 800a12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a132:	6800      	ldr	r0, [r0, #0]
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	f000 f9f7 	bl	800a528 <_vfiprintf_r>
 800a13a:	b002      	add	sp, #8
 800a13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a140:	b003      	add	sp, #12
 800a142:	4770      	bx	lr
 800a144:	20000014 	.word	0x20000014

0800a148 <memmove>:
 800a148:	4288      	cmp	r0, r1
 800a14a:	b510      	push	{r4, lr}
 800a14c:	eb01 0402 	add.w	r4, r1, r2
 800a150:	d902      	bls.n	800a158 <memmove+0x10>
 800a152:	4284      	cmp	r4, r0
 800a154:	4623      	mov	r3, r4
 800a156:	d807      	bhi.n	800a168 <memmove+0x20>
 800a158:	1e43      	subs	r3, r0, #1
 800a15a:	42a1      	cmp	r1, r4
 800a15c:	d008      	beq.n	800a170 <memmove+0x28>
 800a15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a166:	e7f8      	b.n	800a15a <memmove+0x12>
 800a168:	4402      	add	r2, r0
 800a16a:	4601      	mov	r1, r0
 800a16c:	428a      	cmp	r2, r1
 800a16e:	d100      	bne.n	800a172 <memmove+0x2a>
 800a170:	bd10      	pop	{r4, pc}
 800a172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a17a:	e7f7      	b.n	800a16c <memmove+0x24>

0800a17c <_realloc_r>:
 800a17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	4681      	mov	r9, r0
 800a182:	460c      	mov	r4, r1
 800a184:	b929      	cbnz	r1, 800a192 <_realloc_r+0x16>
 800a186:	4611      	mov	r1, r2
 800a188:	b003      	add	sp, #12
 800a18a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18e:	f7fe bf4b 	b.w	8009028 <_malloc_r>
 800a192:	9201      	str	r2, [sp, #4]
 800a194:	f7ff f9a4 	bl	80094e0 <__malloc_lock>
 800a198:	9a01      	ldr	r2, [sp, #4]
 800a19a:	f102 080b 	add.w	r8, r2, #11
 800a19e:	f1b8 0f16 	cmp.w	r8, #22
 800a1a2:	d90b      	bls.n	800a1bc <_realloc_r+0x40>
 800a1a4:	f038 0807 	bics.w	r8, r8, #7
 800a1a8:	d50a      	bpl.n	800a1c0 <_realloc_r+0x44>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	f8c9 3000 	str.w	r3, [r9]
 800a1b0:	f04f 0b00 	mov.w	fp, #0
 800a1b4:	4658      	mov	r0, fp
 800a1b6:	b003      	add	sp, #12
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	f04f 0810 	mov.w	r8, #16
 800a1c0:	4590      	cmp	r8, r2
 800a1c2:	d3f2      	bcc.n	800a1aa <_realloc_r+0x2e>
 800a1c4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a1c8:	f025 0603 	bic.w	r6, r5, #3
 800a1cc:	45b0      	cmp	r8, r6
 800a1ce:	f1a4 0a08 	sub.w	sl, r4, #8
 800a1d2:	f340 816e 	ble.w	800a4b2 <_realloc_r+0x336>
 800a1d6:	499b      	ldr	r1, [pc, #620]	; (800a444 <_realloc_r+0x2c8>)
 800a1d8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a1dc:	eb0a 0306 	add.w	r3, sl, r6
 800a1e0:	459c      	cmp	ip, r3
 800a1e2:	6859      	ldr	r1, [r3, #4]
 800a1e4:	d005      	beq.n	800a1f2 <_realloc_r+0x76>
 800a1e6:	f021 0001 	bic.w	r0, r1, #1
 800a1ea:	4418      	add	r0, r3
 800a1ec:	6840      	ldr	r0, [r0, #4]
 800a1ee:	07c7      	lsls	r7, r0, #31
 800a1f0:	d427      	bmi.n	800a242 <_realloc_r+0xc6>
 800a1f2:	f021 0103 	bic.w	r1, r1, #3
 800a1f6:	459c      	cmp	ip, r3
 800a1f8:	eb06 0701 	add.w	r7, r6, r1
 800a1fc:	d119      	bne.n	800a232 <_realloc_r+0xb6>
 800a1fe:	f108 0010 	add.w	r0, r8, #16
 800a202:	42b8      	cmp	r0, r7
 800a204:	dc1f      	bgt.n	800a246 <_realloc_r+0xca>
 800a206:	eb0a 0308 	add.w	r3, sl, r8
 800a20a:	4a8e      	ldr	r2, [pc, #568]	; (800a444 <_realloc_r+0x2c8>)
 800a20c:	eba7 0708 	sub.w	r7, r7, r8
 800a210:	f047 0701 	orr.w	r7, r7, #1
 800a214:	6093      	str	r3, [r2, #8]
 800a216:	605f      	str	r7, [r3, #4]
 800a218:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	ea43 0308 	orr.w	r3, r3, r8
 800a224:	f844 3c04 	str.w	r3, [r4, #-4]
 800a228:	4648      	mov	r0, r9
 800a22a:	f7ff f95f 	bl	80094ec <__malloc_unlock>
 800a22e:	46a3      	mov	fp, r4
 800a230:	e7c0      	b.n	800a1b4 <_realloc_r+0x38>
 800a232:	45b8      	cmp	r8, r7
 800a234:	dc07      	bgt.n	800a246 <_realloc_r+0xca>
 800a236:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a23a:	60da      	str	r2, [r3, #12]
 800a23c:	6093      	str	r3, [r2, #8]
 800a23e:	4655      	mov	r5, sl
 800a240:	e07f      	b.n	800a342 <_realloc_r+0x1c6>
 800a242:	2100      	movs	r1, #0
 800a244:	460b      	mov	r3, r1
 800a246:	07e8      	lsls	r0, r5, #31
 800a248:	f100 80e5 	bmi.w	800a416 <_realloc_r+0x29a>
 800a24c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a250:	ebaa 0505 	sub.w	r5, sl, r5
 800a254:	6868      	ldr	r0, [r5, #4]
 800a256:	f020 0003 	bic.w	r0, r0, #3
 800a25a:	eb00 0b06 	add.w	fp, r0, r6
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80a5 	beq.w	800a3ae <_realloc_r+0x232>
 800a264:	459c      	cmp	ip, r3
 800a266:	eb01 070b 	add.w	r7, r1, fp
 800a26a:	d14a      	bne.n	800a302 <_realloc_r+0x186>
 800a26c:	f108 0310 	add.w	r3, r8, #16
 800a270:	42bb      	cmp	r3, r7
 800a272:	f300 809c 	bgt.w	800a3ae <_realloc_r+0x232>
 800a276:	46ab      	mov	fp, r5
 800a278:	68eb      	ldr	r3, [r5, #12]
 800a27a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a27e:	60d3      	str	r3, [r2, #12]
 800a280:	609a      	str	r2, [r3, #8]
 800a282:	1f32      	subs	r2, r6, #4
 800a284:	2a24      	cmp	r2, #36	; 0x24
 800a286:	d837      	bhi.n	800a2f8 <_realloc_r+0x17c>
 800a288:	2a13      	cmp	r2, #19
 800a28a:	d933      	bls.n	800a2f4 <_realloc_r+0x178>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	60ab      	str	r3, [r5, #8]
 800a290:	6863      	ldr	r3, [r4, #4]
 800a292:	60eb      	str	r3, [r5, #12]
 800a294:	2a1b      	cmp	r2, #27
 800a296:	d81b      	bhi.n	800a2d0 <_realloc_r+0x154>
 800a298:	3408      	adds	r4, #8
 800a29a:	f105 0310 	add.w	r3, r5, #16
 800a29e:	6822      	ldr	r2, [r4, #0]
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	6862      	ldr	r2, [r4, #4]
 800a2a4:	605a      	str	r2, [r3, #4]
 800a2a6:	68a2      	ldr	r2, [r4, #8]
 800a2a8:	609a      	str	r2, [r3, #8]
 800a2aa:	eb05 0308 	add.w	r3, r5, r8
 800a2ae:	4a65      	ldr	r2, [pc, #404]	; (800a444 <_realloc_r+0x2c8>)
 800a2b0:	eba7 0708 	sub.w	r7, r7, r8
 800a2b4:	f047 0701 	orr.w	r7, r7, #1
 800a2b8:	6093      	str	r3, [r2, #8]
 800a2ba:	605f      	str	r7, [r3, #4]
 800a2bc:	686b      	ldr	r3, [r5, #4]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	ea43 0308 	orr.w	r3, r3, r8
 800a2c6:	606b      	str	r3, [r5, #4]
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f7ff f90f 	bl	80094ec <__malloc_unlock>
 800a2ce:	e771      	b.n	800a1b4 <_realloc_r+0x38>
 800a2d0:	68a3      	ldr	r3, [r4, #8]
 800a2d2:	612b      	str	r3, [r5, #16]
 800a2d4:	68e3      	ldr	r3, [r4, #12]
 800a2d6:	616b      	str	r3, [r5, #20]
 800a2d8:	2a24      	cmp	r2, #36	; 0x24
 800a2da:	bf01      	itttt	eq
 800a2dc:	6923      	ldreq	r3, [r4, #16]
 800a2de:	61ab      	streq	r3, [r5, #24]
 800a2e0:	6962      	ldreq	r2, [r4, #20]
 800a2e2:	61ea      	streq	r2, [r5, #28]
 800a2e4:	bf19      	ittee	ne
 800a2e6:	3410      	addne	r4, #16
 800a2e8:	f105 0318 	addne.w	r3, r5, #24
 800a2ec:	f105 0320 	addeq.w	r3, r5, #32
 800a2f0:	3418      	addeq	r4, #24
 800a2f2:	e7d4      	b.n	800a29e <_realloc_r+0x122>
 800a2f4:	465b      	mov	r3, fp
 800a2f6:	e7d2      	b.n	800a29e <_realloc_r+0x122>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f7ff ff24 	bl	800a148 <memmove>
 800a300:	e7d3      	b.n	800a2aa <_realloc_r+0x12e>
 800a302:	45b8      	cmp	r8, r7
 800a304:	dc53      	bgt.n	800a3ae <_realloc_r+0x232>
 800a306:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a30a:	4628      	mov	r0, r5
 800a30c:	60da      	str	r2, [r3, #12]
 800a30e:	6093      	str	r3, [r2, #8]
 800a310:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a314:	68eb      	ldr	r3, [r5, #12]
 800a316:	60d3      	str	r3, [r2, #12]
 800a318:	609a      	str	r2, [r3, #8]
 800a31a:	1f32      	subs	r2, r6, #4
 800a31c:	2a24      	cmp	r2, #36	; 0x24
 800a31e:	d842      	bhi.n	800a3a6 <_realloc_r+0x22a>
 800a320:	2a13      	cmp	r2, #19
 800a322:	d908      	bls.n	800a336 <_realloc_r+0x1ba>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	60ab      	str	r3, [r5, #8]
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	60eb      	str	r3, [r5, #12]
 800a32c:	2a1b      	cmp	r2, #27
 800a32e:	d828      	bhi.n	800a382 <_realloc_r+0x206>
 800a330:	3408      	adds	r4, #8
 800a332:	f105 0010 	add.w	r0, r5, #16
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	6043      	str	r3, [r0, #4]
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	6083      	str	r3, [r0, #8]
 800a342:	686b      	ldr	r3, [r5, #4]
 800a344:	eba7 0008 	sub.w	r0, r7, r8
 800a348:	280f      	cmp	r0, #15
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	eb05 0207 	add.w	r2, r5, r7
 800a352:	f240 80b0 	bls.w	800a4b6 <_realloc_r+0x33a>
 800a356:	eb05 0108 	add.w	r1, r5, r8
 800a35a:	ea48 0303 	orr.w	r3, r8, r3
 800a35e:	f040 0001 	orr.w	r0, r0, #1
 800a362:	606b      	str	r3, [r5, #4]
 800a364:	6048      	str	r0, [r1, #4]
 800a366:	6853      	ldr	r3, [r2, #4]
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	6053      	str	r3, [r2, #4]
 800a36e:	3108      	adds	r1, #8
 800a370:	4648      	mov	r0, r9
 800a372:	f7fe fa1b 	bl	80087ac <_free_r>
 800a376:	4648      	mov	r0, r9
 800a378:	f7ff f8b8 	bl	80094ec <__malloc_unlock>
 800a37c:	f105 0b08 	add.w	fp, r5, #8
 800a380:	e718      	b.n	800a1b4 <_realloc_r+0x38>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	612b      	str	r3, [r5, #16]
 800a386:	68e3      	ldr	r3, [r4, #12]
 800a388:	616b      	str	r3, [r5, #20]
 800a38a:	2a24      	cmp	r2, #36	; 0x24
 800a38c:	bf01      	itttt	eq
 800a38e:	6923      	ldreq	r3, [r4, #16]
 800a390:	61ab      	streq	r3, [r5, #24]
 800a392:	6963      	ldreq	r3, [r4, #20]
 800a394:	61eb      	streq	r3, [r5, #28]
 800a396:	bf19      	ittee	ne
 800a398:	3410      	addne	r4, #16
 800a39a:	f105 0018 	addne.w	r0, r5, #24
 800a39e:	f105 0020 	addeq.w	r0, r5, #32
 800a3a2:	3418      	addeq	r4, #24
 800a3a4:	e7c7      	b.n	800a336 <_realloc_r+0x1ba>
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff fece 	bl	800a148 <memmove>
 800a3ac:	e7c9      	b.n	800a342 <_realloc_r+0x1c6>
 800a3ae:	45d8      	cmp	r8, fp
 800a3b0:	dc31      	bgt.n	800a416 <_realloc_r+0x29a>
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	68eb      	ldr	r3, [r5, #12]
 800a3b6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a3ba:	60d3      	str	r3, [r2, #12]
 800a3bc:	609a      	str	r2, [r3, #8]
 800a3be:	1f32      	subs	r2, r6, #4
 800a3c0:	2a24      	cmp	r2, #36	; 0x24
 800a3c2:	d824      	bhi.n	800a40e <_realloc_r+0x292>
 800a3c4:	2a13      	cmp	r2, #19
 800a3c6:	d908      	bls.n	800a3da <_realloc_r+0x25e>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	60ab      	str	r3, [r5, #8]
 800a3cc:	6863      	ldr	r3, [r4, #4]
 800a3ce:	60eb      	str	r3, [r5, #12]
 800a3d0:	2a1b      	cmp	r2, #27
 800a3d2:	d80a      	bhi.n	800a3ea <_realloc_r+0x26e>
 800a3d4:	3408      	adds	r4, #8
 800a3d6:	f105 0010 	add.w	r0, r5, #16
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	6003      	str	r3, [r0, #0]
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	6043      	str	r3, [r0, #4]
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	6083      	str	r3, [r0, #8]
 800a3e6:	465f      	mov	r7, fp
 800a3e8:	e7ab      	b.n	800a342 <_realloc_r+0x1c6>
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	612b      	str	r3, [r5, #16]
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	616b      	str	r3, [r5, #20]
 800a3f2:	2a24      	cmp	r2, #36	; 0x24
 800a3f4:	bf01      	itttt	eq
 800a3f6:	6923      	ldreq	r3, [r4, #16]
 800a3f8:	61ab      	streq	r3, [r5, #24]
 800a3fa:	6963      	ldreq	r3, [r4, #20]
 800a3fc:	61eb      	streq	r3, [r5, #28]
 800a3fe:	bf19      	ittee	ne
 800a400:	3410      	addne	r4, #16
 800a402:	f105 0018 	addne.w	r0, r5, #24
 800a406:	f105 0020 	addeq.w	r0, r5, #32
 800a40a:	3418      	addeq	r4, #24
 800a40c:	e7e5      	b.n	800a3da <_realloc_r+0x25e>
 800a40e:	4621      	mov	r1, r4
 800a410:	f7ff fe9a 	bl	800a148 <memmove>
 800a414:	e7e7      	b.n	800a3e6 <_realloc_r+0x26a>
 800a416:	4611      	mov	r1, r2
 800a418:	4648      	mov	r0, r9
 800a41a:	f7fe fe05 	bl	8009028 <_malloc_r>
 800a41e:	4683      	mov	fp, r0
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f af51 	beq.w	800a2c8 <_realloc_r+0x14c>
 800a426:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a42a:	f023 0301 	bic.w	r3, r3, #1
 800a42e:	4453      	add	r3, sl
 800a430:	f1a0 0208 	sub.w	r2, r0, #8
 800a434:	4293      	cmp	r3, r2
 800a436:	d107      	bne.n	800a448 <_realloc_r+0x2cc>
 800a438:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a43c:	f027 0703 	bic.w	r7, r7, #3
 800a440:	4437      	add	r7, r6
 800a442:	e6fc      	b.n	800a23e <_realloc_r+0xc2>
 800a444:	200005b4 	.word	0x200005b4
 800a448:	1f32      	subs	r2, r6, #4
 800a44a:	2a24      	cmp	r2, #36	; 0x24
 800a44c:	d82d      	bhi.n	800a4aa <_realloc_r+0x32e>
 800a44e:	2a13      	cmp	r2, #19
 800a450:	d928      	bls.n	800a4a4 <_realloc_r+0x328>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	6863      	ldr	r3, [r4, #4]
 800a458:	6043      	str	r3, [r0, #4]
 800a45a:	2a1b      	cmp	r2, #27
 800a45c:	d80e      	bhi.n	800a47c <_realloc_r+0x300>
 800a45e:	f104 0208 	add.w	r2, r4, #8
 800a462:	f100 0308 	add.w	r3, r0, #8
 800a466:	6811      	ldr	r1, [r2, #0]
 800a468:	6019      	str	r1, [r3, #0]
 800a46a:	6851      	ldr	r1, [r2, #4]
 800a46c:	6059      	str	r1, [r3, #4]
 800a46e:	6892      	ldr	r2, [r2, #8]
 800a470:	609a      	str	r2, [r3, #8]
 800a472:	4621      	mov	r1, r4
 800a474:	4648      	mov	r0, r9
 800a476:	f7fe f999 	bl	80087ac <_free_r>
 800a47a:	e725      	b.n	800a2c8 <_realloc_r+0x14c>
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	6083      	str	r3, [r0, #8]
 800a480:	68e3      	ldr	r3, [r4, #12]
 800a482:	60c3      	str	r3, [r0, #12]
 800a484:	2a24      	cmp	r2, #36	; 0x24
 800a486:	bf01      	itttt	eq
 800a488:	6923      	ldreq	r3, [r4, #16]
 800a48a:	6103      	streq	r3, [r0, #16]
 800a48c:	6961      	ldreq	r1, [r4, #20]
 800a48e:	6141      	streq	r1, [r0, #20]
 800a490:	bf19      	ittee	ne
 800a492:	f104 0210 	addne.w	r2, r4, #16
 800a496:	f100 0310 	addne.w	r3, r0, #16
 800a49a:	f104 0218 	addeq.w	r2, r4, #24
 800a49e:	f100 0318 	addeq.w	r3, r0, #24
 800a4a2:	e7e0      	b.n	800a466 <_realloc_r+0x2ea>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	e7dd      	b.n	800a466 <_realloc_r+0x2ea>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	f7ff fe4c 	bl	800a148 <memmove>
 800a4b0:	e7df      	b.n	800a472 <_realloc_r+0x2f6>
 800a4b2:	4637      	mov	r7, r6
 800a4b4:	e6c3      	b.n	800a23e <_realloc_r+0xc2>
 800a4b6:	431f      	orrs	r7, r3
 800a4b8:	606f      	str	r7, [r5, #4]
 800a4ba:	6853      	ldr	r3, [r2, #4]
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	e758      	b.n	800a376 <_realloc_r+0x1fa>

0800a4c4 <__sprint_r>:
 800a4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	6893      	ldr	r3, [r2, #8]
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	460f      	mov	r7, r1
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	b91b      	cbnz	r3, 800a4da <__sprint_r+0x16>
 800a4d2:	6053      	str	r3, [r2, #4]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a4dc:	049d      	lsls	r5, r3, #18
 800a4de:	d520      	bpl.n	800a522 <__sprint_r+0x5e>
 800a4e0:	6815      	ldr	r5, [r2, #0]
 800a4e2:	3508      	adds	r5, #8
 800a4e4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800a4f0:	45ca      	cmp	sl, r9
 800a4f2:	dc0b      	bgt.n	800a50c <__sprint_r+0x48>
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	f026 0003 	bic.w	r0, r6, #3
 800a4fa:	1a18      	subs	r0, r3, r0
 800a4fc:	60a0      	str	r0, [r4, #8]
 800a4fe:	3508      	adds	r5, #8
 800a500:	2800      	cmp	r0, #0
 800a502:	d1ef      	bne.n	800a4e4 <__sprint_r+0x20>
 800a504:	2300      	movs	r3, #0
 800a506:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a50a:	e7e4      	b.n	800a4d6 <__sprint_r+0x12>
 800a50c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800a510:	463a      	mov	r2, r7
 800a512:	4640      	mov	r0, r8
 800a514:	f000 fea1 	bl	800b25a <_fputwc_r>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d0f3      	beq.n	800a504 <__sprint_r+0x40>
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e7e6      	b.n	800a4f0 <__sprint_r+0x2c>
 800a522:	f000 fec5 	bl	800b2b0 <__sfvwrite_r>
 800a526:	e7ed      	b.n	800a504 <__sprint_r+0x40>

0800a528 <_vfiprintf_r>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	ed2d 8b02 	vpush	{d8}
 800a530:	b0b9      	sub	sp, #228	; 0xe4
 800a532:	460f      	mov	r7, r1
 800a534:	9201      	str	r2, [sp, #4]
 800a536:	461d      	mov	r5, r3
 800a538:	461c      	mov	r4, r3
 800a53a:	4681      	mov	r9, r0
 800a53c:	b118      	cbz	r0, 800a546 <_vfiprintf_r+0x1e>
 800a53e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a540:	b90b      	cbnz	r3, 800a546 <_vfiprintf_r+0x1e>
 800a542:	f000 fe21 	bl	800b188 <__sinit>
 800a546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a548:	07d8      	lsls	r0, r3, #31
 800a54a:	d405      	bmi.n	800a558 <_vfiprintf_r+0x30>
 800a54c:	89bb      	ldrh	r3, [r7, #12]
 800a54e:	0599      	lsls	r1, r3, #22
 800a550:	d402      	bmi.n	800a558 <_vfiprintf_r+0x30>
 800a552:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a554:	f7fe fd66 	bl	8009024 <__retarget_lock_acquire_recursive>
 800a558:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a55c:	049a      	lsls	r2, r3, #18
 800a55e:	d406      	bmi.n	800a56e <_vfiprintf_r+0x46>
 800a560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a564:	81bb      	strh	r3, [r7, #12]
 800a566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a56c:	667b      	str	r3, [r7, #100]	; 0x64
 800a56e:	89bb      	ldrh	r3, [r7, #12]
 800a570:	071e      	lsls	r6, r3, #28
 800a572:	d501      	bpl.n	800a578 <_vfiprintf_r+0x50>
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	b9bb      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x80>
 800a578:	4639      	mov	r1, r7
 800a57a:	4648      	mov	r0, r9
 800a57c:	f000 fcaa 	bl	800aed4 <__swsetup_r>
 800a580:	b190      	cbz	r0, 800a5a8 <_vfiprintf_r+0x80>
 800a582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a584:	07d8      	lsls	r0, r3, #31
 800a586:	d508      	bpl.n	800a59a <_vfiprintf_r+0x72>
 800a588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	9802      	ldr	r0, [sp, #8]
 800a590:	b039      	add	sp, #228	; 0xe4
 800a592:	ecbd 8b02 	vpop	{d8}
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	89bb      	ldrh	r3, [r7, #12]
 800a59c:	0599      	lsls	r1, r3, #22
 800a59e:	d4f3      	bmi.n	800a588 <_vfiprintf_r+0x60>
 800a5a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a5a2:	f7fe fd40 	bl	8009026 <__retarget_lock_release_recursive>
 800a5a6:	e7ef      	b.n	800a588 <_vfiprintf_r+0x60>
 800a5a8:	89bb      	ldrh	r3, [r7, #12]
 800a5aa:	f003 021a 	and.w	r2, r3, #26
 800a5ae:	2a0a      	cmp	r2, #10
 800a5b0:	d116      	bne.n	800a5e0 <_vfiprintf_r+0xb8>
 800a5b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	db12      	blt.n	800a5e0 <_vfiprintf_r+0xb8>
 800a5ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5bc:	07d2      	lsls	r2, r2, #31
 800a5be:	d404      	bmi.n	800a5ca <_vfiprintf_r+0xa2>
 800a5c0:	059e      	lsls	r6, r3, #22
 800a5c2:	d402      	bmi.n	800a5ca <_vfiprintf_r+0xa2>
 800a5c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a5c6:	f7fe fd2e 	bl	8009026 <__retarget_lock_release_recursive>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4648      	mov	r0, r9
 800a5d2:	b039      	add	sp, #228	; 0xe4
 800a5d4:	ecbd 8b02 	vpop	{d8}
 800a5d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	f000 bc3a 	b.w	800ae54 <__sbprintf>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800a5e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a5ea:	ae0f      	add	r6, sp, #60	; 0x3c
 800a5ec:	ee08 3a10 	vmov	s16, r3
 800a5f0:	960c      	str	r6, [sp, #48]	; 0x30
 800a5f2:	9307      	str	r3, [sp, #28]
 800a5f4:	9302      	str	r3, [sp, #8]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	461d      	mov	r5, r3
 800a5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5fe:	b10a      	cbz	r2, 800a604 <_vfiprintf_r+0xdc>
 800a600:	2a25      	cmp	r2, #37	; 0x25
 800a602:	d1f9      	bne.n	800a5f8 <_vfiprintf_r+0xd0>
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	ebb5 0803 	subs.w	r8, r5, r3
 800a60a:	d00d      	beq.n	800a628 <_vfiprintf_r+0x100>
 800a60c:	e9c6 3800 	strd	r3, r8, [r6]
 800a610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a612:	4443      	add	r3, r8
 800a614:	930e      	str	r3, [sp, #56]	; 0x38
 800a616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a618:	3301      	adds	r3, #1
 800a61a:	2b07      	cmp	r3, #7
 800a61c:	930d      	str	r3, [sp, #52]	; 0x34
 800a61e:	dc75      	bgt.n	800a70c <_vfiprintf_r+0x1e4>
 800a620:	3608      	adds	r6, #8
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	4443      	add	r3, r8
 800a626:	9302      	str	r3, [sp, #8]
 800a628:	782b      	ldrb	r3, [r5, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 83d6 	beq.w	800addc <_vfiprintf_r+0x8b4>
 800a630:	2300      	movs	r3, #0
 800a632:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a636:	1c6a      	adds	r2, r5, #1
 800a638:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a63c:	9100      	str	r1, [sp, #0]
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	469a      	mov	sl, r3
 800a642:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a646:	9201      	str	r2, [sp, #4]
 800a648:	f1a3 0220 	sub.w	r2, r3, #32
 800a64c:	2a5a      	cmp	r2, #90	; 0x5a
 800a64e:	f200 831f 	bhi.w	800ac90 <_vfiprintf_r+0x768>
 800a652:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a656:	009b      	.short	0x009b
 800a658:	031d031d 	.word	0x031d031d
 800a65c:	031d00a3 	.word	0x031d00a3
 800a660:	031d031d 	.word	0x031d031d
 800a664:	031d0082 	.word	0x031d0082
 800a668:	00a6031d 	.word	0x00a6031d
 800a66c:	031d00b0 	.word	0x031d00b0
 800a670:	00b200ad 	.word	0x00b200ad
 800a674:	00cd031d 	.word	0x00cd031d
 800a678:	00d000d0 	.word	0x00d000d0
 800a67c:	00d000d0 	.word	0x00d000d0
 800a680:	00d000d0 	.word	0x00d000d0
 800a684:	00d000d0 	.word	0x00d000d0
 800a688:	031d00d0 	.word	0x031d00d0
 800a68c:	031d031d 	.word	0x031d031d
 800a690:	031d031d 	.word	0x031d031d
 800a694:	031d031d 	.word	0x031d031d
 800a698:	031d031d 	.word	0x031d031d
 800a69c:	010800fa 	.word	0x010800fa
 800a6a0:	031d031d 	.word	0x031d031d
 800a6a4:	031d031d 	.word	0x031d031d
 800a6a8:	031d031d 	.word	0x031d031d
 800a6ac:	031d031d 	.word	0x031d031d
 800a6b0:	031d031d 	.word	0x031d031d
 800a6b4:	031d0158 	.word	0x031d0158
 800a6b8:	031d031d 	.word	0x031d031d
 800a6bc:	031d01a1 	.word	0x031d01a1
 800a6c0:	031d027e 	.word	0x031d027e
 800a6c4:	029e031d 	.word	0x029e031d
 800a6c8:	031d031d 	.word	0x031d031d
 800a6cc:	031d031d 	.word	0x031d031d
 800a6d0:	031d031d 	.word	0x031d031d
 800a6d4:	031d031d 	.word	0x031d031d
 800a6d8:	031d031d 	.word	0x031d031d
 800a6dc:	010a00fa 	.word	0x010a00fa
 800a6e0:	031d031d 	.word	0x031d031d
 800a6e4:	00e0031d 	.word	0x00e0031d
 800a6e8:	00f4010a 	.word	0x00f4010a
 800a6ec:	00ed031d 	.word	0x00ed031d
 800a6f0:	0136031d 	.word	0x0136031d
 800a6f4:	018f015a 	.word	0x018f015a
 800a6f8:	031d00f4 	.word	0x031d00f4
 800a6fc:	009901a1 	.word	0x009901a1
 800a700:	031d0280 	.word	0x031d0280
 800a704:	0065031d 	.word	0x0065031d
 800a708:	0099031d 	.word	0x0099031d
 800a70c:	aa0c      	add	r2, sp, #48	; 0x30
 800a70e:	4639      	mov	r1, r7
 800a710:	4648      	mov	r0, r9
 800a712:	f7ff fed7 	bl	800a4c4 <__sprint_r>
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 833f 	bne.w	800ad9a <_vfiprintf_r+0x872>
 800a71c:	ae0f      	add	r6, sp, #60	; 0x3c
 800a71e:	e780      	b.n	800a622 <_vfiprintf_r+0xfa>
 800a720:	4a9c      	ldr	r2, [pc, #624]	; (800a994 <_vfiprintf_r+0x46c>)
 800a722:	9205      	str	r2, [sp, #20]
 800a724:	f01a 0220 	ands.w	r2, sl, #32
 800a728:	f000 8235 	beq.w	800ab96 <_vfiprintf_r+0x66e>
 800a72c:	3407      	adds	r4, #7
 800a72e:	f024 0207 	bic.w	r2, r4, #7
 800a732:	4693      	mov	fp, r2
 800a734:	6855      	ldr	r5, [r2, #4]
 800a736:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a73a:	f01a 0f01 	tst.w	sl, #1
 800a73e:	d009      	beq.n	800a754 <_vfiprintf_r+0x22c>
 800a740:	ea54 0205 	orrs.w	r2, r4, r5
 800a744:	bf1f      	itttt	ne
 800a746:	2230      	movne	r2, #48	; 0x30
 800a748:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800a74c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800a750:	f04a 0a02 	orrne.w	sl, sl, #2
 800a754:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a758:	e11a      	b.n	800a990 <_vfiprintf_r+0x468>
 800a75a:	4648      	mov	r0, r9
 800a75c:	f7fe fc5c 	bl	8009018 <_localeconv_r>
 800a760:	6843      	ldr	r3, [r0, #4]
 800a762:	4618      	mov	r0, r3
 800a764:	ee08 3a10 	vmov	s16, r3
 800a768:	f7f5 fd3c 	bl	80001e4 <strlen>
 800a76c:	9007      	str	r0, [sp, #28]
 800a76e:	4648      	mov	r0, r9
 800a770:	f7fe fc52 	bl	8009018 <_localeconv_r>
 800a774:	6883      	ldr	r3, [r0, #8]
 800a776:	9306      	str	r3, [sp, #24]
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	b12b      	cbz	r3, 800a788 <_vfiprintf_r+0x260>
 800a77c:	9b06      	ldr	r3, [sp, #24]
 800a77e:	b11b      	cbz	r3, 800a788 <_vfiprintf_r+0x260>
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b10b      	cbz	r3, 800a788 <_vfiprintf_r+0x260>
 800a784:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800a788:	9a01      	ldr	r2, [sp, #4]
 800a78a:	e75a      	b.n	800a642 <_vfiprintf_r+0x11a>
 800a78c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1f9      	bne.n	800a788 <_vfiprintf_r+0x260>
 800a794:	2320      	movs	r3, #32
 800a796:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a79a:	e7f5      	b.n	800a788 <_vfiprintf_r+0x260>
 800a79c:	f04a 0a01 	orr.w	sl, sl, #1
 800a7a0:	e7f2      	b.n	800a788 <_vfiprintf_r+0x260>
 800a7a2:	f854 3b04 	ldr.w	r3, [r4], #4
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	daed      	bge.n	800a788 <_vfiprintf_r+0x260>
 800a7ac:	425b      	negs	r3, r3
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	f04a 0a04 	orr.w	sl, sl, #4
 800a7b4:	e7e8      	b.n	800a788 <_vfiprintf_r+0x260>
 800a7b6:	232b      	movs	r3, #43	; 0x2b
 800a7b8:	e7ed      	b.n	800a796 <_vfiprintf_r+0x26e>
 800a7ba:	9a01      	ldr	r2, [sp, #4]
 800a7bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c2:	d112      	bne.n	800a7ea <_vfiprintf_r+0x2c2>
 800a7c4:	f854 0b04 	ldr.w	r0, [r4], #4
 800a7c8:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800a7cc:	e9cd 3200 	strd	r3, r2, [sp]
 800a7d0:	e7da      	b.n	800a788 <_vfiprintf_r+0x260>
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	200a      	movs	r0, #10
 800a7d6:	fb00 1303 	mla	r3, r0, r3, r1
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a7e0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7e4:	2909      	cmp	r1, #9
 800a7e6:	d9f4      	bls.n	800a7d2 <_vfiprintf_r+0x2aa>
 800a7e8:	e72d      	b.n	800a646 <_vfiprintf_r+0x11e>
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	9100      	str	r1, [sp, #0]
 800a7ee:	e7f7      	b.n	800a7e0 <_vfiprintf_r+0x2b8>
 800a7f0:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a7f4:	e7c8      	b.n	800a788 <_vfiprintf_r+0x260>
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	9a01      	ldr	r2, [sp, #4]
 800a7fa:	9103      	str	r1, [sp, #12]
 800a7fc:	9903      	ldr	r1, [sp, #12]
 800a7fe:	3b30      	subs	r3, #48	; 0x30
 800a800:	200a      	movs	r0, #10
 800a802:	fb00 3301 	mla	r3, r0, r1, r3
 800a806:	9303      	str	r3, [sp, #12]
 800a808:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a80c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a810:	2909      	cmp	r1, #9
 800a812:	d9f3      	bls.n	800a7fc <_vfiprintf_r+0x2d4>
 800a814:	e717      	b.n	800a646 <_vfiprintf_r+0x11e>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b68      	cmp	r3, #104	; 0x68
 800a81c:	bf01      	itttt	eq
 800a81e:	9b01      	ldreq	r3, [sp, #4]
 800a820:	3301      	addeq	r3, #1
 800a822:	9301      	streq	r3, [sp, #4]
 800a824:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800a828:	bf18      	it	ne
 800a82a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800a82e:	e7ab      	b.n	800a788 <_vfiprintf_r+0x260>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b6c      	cmp	r3, #108	; 0x6c
 800a836:	d105      	bne.n	800a844 <_vfiprintf_r+0x31c>
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	3301      	adds	r3, #1
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f04a 0a20 	orr.w	sl, sl, #32
 800a842:	e7a1      	b.n	800a788 <_vfiprintf_r+0x260>
 800a844:	f04a 0a10 	orr.w	sl, sl, #16
 800a848:	e79e      	b.n	800a788 <_vfiprintf_r+0x260>
 800a84a:	46a3      	mov	fp, r4
 800a84c:	2100      	movs	r1, #0
 800a84e:	f85b 3b04 	ldr.w	r3, [fp], #4
 800a852:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a856:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800a85a:	2301      	movs	r3, #1
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	460d      	mov	r5, r1
 800a860:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800a864:	e0ad      	b.n	800a9c2 <_vfiprintf_r+0x49a>
 800a866:	f04a 0a10 	orr.w	sl, sl, #16
 800a86a:	f01a 0f20 	tst.w	sl, #32
 800a86e:	d011      	beq.n	800a894 <_vfiprintf_r+0x36c>
 800a870:	3407      	adds	r4, #7
 800a872:	f024 0307 	bic.w	r3, r4, #7
 800a876:	469b      	mov	fp, r3
 800a878:	685d      	ldr	r5, [r3, #4]
 800a87a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a87e:	2d00      	cmp	r5, #0
 800a880:	da06      	bge.n	800a890 <_vfiprintf_r+0x368>
 800a882:	4264      	negs	r4, r4
 800a884:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a888:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800a88c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800a890:	2301      	movs	r3, #1
 800a892:	e04a      	b.n	800a92a <_vfiprintf_r+0x402>
 800a894:	46a3      	mov	fp, r4
 800a896:	f01a 0f10 	tst.w	sl, #16
 800a89a:	f85b 5b04 	ldr.w	r5, [fp], #4
 800a89e:	d002      	beq.n	800a8a6 <_vfiprintf_r+0x37e>
 800a8a0:	462c      	mov	r4, r5
 800a8a2:	17ed      	asrs	r5, r5, #31
 800a8a4:	e7eb      	b.n	800a87e <_vfiprintf_r+0x356>
 800a8a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a8aa:	d003      	beq.n	800a8b4 <_vfiprintf_r+0x38c>
 800a8ac:	b22c      	sxth	r4, r5
 800a8ae:	f345 35c0 	sbfx	r5, r5, #15, #1
 800a8b2:	e7e4      	b.n	800a87e <_vfiprintf_r+0x356>
 800a8b4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a8b8:	d0f2      	beq.n	800a8a0 <_vfiprintf_r+0x378>
 800a8ba:	b26c      	sxtb	r4, r5
 800a8bc:	f345 15c0 	sbfx	r5, r5, #7, #1
 800a8c0:	e7dd      	b.n	800a87e <_vfiprintf_r+0x356>
 800a8c2:	f01a 0f20 	tst.w	sl, #32
 800a8c6:	f104 0b04 	add.w	fp, r4, #4
 800a8ca:	d007      	beq.n	800a8dc <_vfiprintf_r+0x3b4>
 800a8cc:	9a02      	ldr	r2, [sp, #8]
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	9902      	ldr	r1, [sp, #8]
 800a8d2:	17d2      	asrs	r2, r2, #31
 800a8d4:	e9c3 1200 	strd	r1, r2, [r3]
 800a8d8:	465c      	mov	r4, fp
 800a8da:	e68c      	b.n	800a5f6 <_vfiprintf_r+0xce>
 800a8dc:	f01a 0f10 	tst.w	sl, #16
 800a8e0:	d003      	beq.n	800a8ea <_vfiprintf_r+0x3c2>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	9a02      	ldr	r2, [sp, #8]
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	e7f6      	b.n	800a8d8 <_vfiprintf_r+0x3b0>
 800a8ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a8ee:	d003      	beq.n	800a8f8 <_vfiprintf_r+0x3d0>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	9a02      	ldr	r2, [sp, #8]
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	e7ef      	b.n	800a8d8 <_vfiprintf_r+0x3b0>
 800a8f8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a8fc:	d0f1      	beq.n	800a8e2 <_vfiprintf_r+0x3ba>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	9a02      	ldr	r2, [sp, #8]
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	e7e8      	b.n	800a8d8 <_vfiprintf_r+0x3b0>
 800a906:	f04a 0a10 	orr.w	sl, sl, #16
 800a90a:	f01a 0320 	ands.w	r3, sl, #32
 800a90e:	d01f      	beq.n	800a950 <_vfiprintf_r+0x428>
 800a910:	3407      	adds	r4, #7
 800a912:	f024 0307 	bic.w	r3, r4, #7
 800a916:	469b      	mov	fp, r3
 800a918:	685d      	ldr	r5, [r3, #4]
 800a91a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800a91e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a922:	2300      	movs	r3, #0
 800a924:	2200      	movs	r2, #0
 800a926:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800a92a:	9a00      	ldr	r2, [sp, #0]
 800a92c:	3201      	adds	r2, #1
 800a92e:	f000 8262 	beq.w	800adf6 <_vfiprintf_r+0x8ce>
 800a932:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800a936:	9204      	str	r2, [sp, #16]
 800a938:	ea54 0205 	orrs.w	r2, r4, r5
 800a93c:	f040 8261 	bne.w	800ae02 <_vfiprintf_r+0x8da>
 800a940:	9a00      	ldr	r2, [sp, #0]
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 8199 	beq.w	800ac7a <_vfiprintf_r+0x752>
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f040 825d 	bne.w	800ae08 <_vfiprintf_r+0x8e0>
 800a94e:	e139      	b.n	800abc4 <_vfiprintf_r+0x69c>
 800a950:	46a3      	mov	fp, r4
 800a952:	f01a 0510 	ands.w	r5, sl, #16
 800a956:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a95a:	d001      	beq.n	800a960 <_vfiprintf_r+0x438>
 800a95c:	461d      	mov	r5, r3
 800a95e:	e7de      	b.n	800a91e <_vfiprintf_r+0x3f6>
 800a960:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800a964:	d001      	beq.n	800a96a <_vfiprintf_r+0x442>
 800a966:	b2a4      	uxth	r4, r4
 800a968:	e7d9      	b.n	800a91e <_vfiprintf_r+0x3f6>
 800a96a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800a96e:	d0d6      	beq.n	800a91e <_vfiprintf_r+0x3f6>
 800a970:	b2e4      	uxtb	r4, r4
 800a972:	e7f3      	b.n	800a95c <_vfiprintf_r+0x434>
 800a974:	2330      	movs	r3, #48	; 0x30
 800a976:	46a3      	mov	fp, r4
 800a978:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a97c:	2378      	movs	r3, #120	; 0x78
 800a97e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800a982:	f85b 4b04 	ldr.w	r4, [fp], #4
 800a986:	4b03      	ldr	r3, [pc, #12]	; (800a994 <_vfiprintf_r+0x46c>)
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	2500      	movs	r5, #0
 800a98c:	f04a 0a02 	orr.w	sl, sl, #2
 800a990:	2302      	movs	r3, #2
 800a992:	e7c7      	b.n	800a924 <_vfiprintf_r+0x3fc>
 800a994:	0800bca8 	.word	0x0800bca8
 800a998:	9b00      	ldr	r3, [sp, #0]
 800a99a:	46a3      	mov	fp, r4
 800a99c:	2500      	movs	r5, #0
 800a99e:	1c5c      	adds	r4, r3, #1
 800a9a0:	f85b 8b04 	ldr.w	r8, [fp], #4
 800a9a4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800a9a8:	f000 80ce 	beq.w	800ab48 <_vfiprintf_r+0x620>
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	f7f5 fc25 	bl	8000200 <memchr>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f000 8174 	beq.w	800aca4 <_vfiprintf_r+0x77c>
 800a9bc:	eba0 0308 	sub.w	r3, r0, r8
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	9b00      	ldr	r3, [sp, #0]
 800a9c4:	42ab      	cmp	r3, r5
 800a9c6:	bfb8      	it	lt
 800a9c8:	462b      	movlt	r3, r5
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800a9d0:	b113      	cbz	r3, 800a9d8 <_vfiprintf_r+0x4b0>
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	f01a 0302 	ands.w	r3, sl, #2
 800a9dc:	9308      	str	r3, [sp, #32]
 800a9de:	bf1e      	ittt	ne
 800a9e0:	9b04      	ldrne	r3, [sp, #16]
 800a9e2:	3302      	addne	r3, #2
 800a9e4:	9304      	strne	r3, [sp, #16]
 800a9e6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800a9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ec:	d11f      	bne.n	800aa2e <_vfiprintf_r+0x506>
 800a9ee:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a9f2:	1a9c      	subs	r4, r3, r2
 800a9f4:	2c00      	cmp	r4, #0
 800a9f6:	dd1a      	ble.n	800aa2e <_vfiprintf_r+0x506>
 800a9f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a9fc:	48aa      	ldr	r0, [pc, #680]	; (800aca8 <_vfiprintf_r+0x780>)
 800a9fe:	6030      	str	r0, [r6, #0]
 800aa00:	2c10      	cmp	r4, #16
 800aa02:	f103 0301 	add.w	r3, r3, #1
 800aa06:	f106 0108 	add.w	r1, r6, #8
 800aa0a:	f300 8153 	bgt.w	800acb4 <_vfiprintf_r+0x78c>
 800aa0e:	6074      	str	r4, [r6, #4]
 800aa10:	2b07      	cmp	r3, #7
 800aa12:	4414      	add	r4, r2
 800aa14:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800aa18:	f340 815e 	ble.w	800acd8 <_vfiprintf_r+0x7b0>
 800aa1c:	aa0c      	add	r2, sp, #48	; 0x30
 800aa1e:	4639      	mov	r1, r7
 800aa20:	4648      	mov	r0, r9
 800aa22:	f7ff fd4f 	bl	800a4c4 <__sprint_r>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f040 81b7 	bne.w	800ad9a <_vfiprintf_r+0x872>
 800aa2c:	ae0f      	add	r6, sp, #60	; 0x3c
 800aa2e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800aa32:	b173      	cbz	r3, 800aa52 <_vfiprintf_r+0x52a>
 800aa34:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800aa38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa3a:	6032      	str	r2, [r6, #0]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	6072      	str	r2, [r6, #4]
 800aa40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa42:	3301      	adds	r3, #1
 800aa44:	3201      	adds	r2, #1
 800aa46:	2b07      	cmp	r3, #7
 800aa48:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800aa4c:	f300 8146 	bgt.w	800acdc <_vfiprintf_r+0x7b4>
 800aa50:	3608      	adds	r6, #8
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	b16b      	cbz	r3, 800aa72 <_vfiprintf_r+0x54a>
 800aa56:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa5a:	6032      	str	r2, [r6, #0]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	6072      	str	r2, [r6, #4]
 800aa60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa62:	3301      	adds	r3, #1
 800aa64:	3202      	adds	r2, #2
 800aa66:	2b07      	cmp	r3, #7
 800aa68:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800aa6c:	f300 813f 	bgt.w	800acee <_vfiprintf_r+0x7c6>
 800aa70:	3608      	adds	r6, #8
 800aa72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa74:	2b80      	cmp	r3, #128	; 0x80
 800aa76:	d11f      	bne.n	800aab8 <_vfiprintf_r+0x590>
 800aa78:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800aa7c:	1a9c      	subs	r4, r3, r2
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	dd1a      	ble.n	800aab8 <_vfiprintf_r+0x590>
 800aa82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800aa86:	4889      	ldr	r0, [pc, #548]	; (800acac <_vfiprintf_r+0x784>)
 800aa88:	6030      	str	r0, [r6, #0]
 800aa8a:	2c10      	cmp	r4, #16
 800aa8c:	f103 0301 	add.w	r3, r3, #1
 800aa90:	f106 0108 	add.w	r1, r6, #8
 800aa94:	f300 8134 	bgt.w	800ad00 <_vfiprintf_r+0x7d8>
 800aa98:	6074      	str	r4, [r6, #4]
 800aa9a:	2b07      	cmp	r3, #7
 800aa9c:	4414      	add	r4, r2
 800aa9e:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800aaa2:	f340 813f 	ble.w	800ad24 <_vfiprintf_r+0x7fc>
 800aaa6:	aa0c      	add	r2, sp, #48	; 0x30
 800aaa8:	4639      	mov	r1, r7
 800aaaa:	4648      	mov	r0, r9
 800aaac:	f7ff fd0a 	bl	800a4c4 <__sprint_r>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f040 8172 	bne.w	800ad9a <_vfiprintf_r+0x872>
 800aab6:	ae0f      	add	r6, sp, #60	; 0x3c
 800aab8:	9b00      	ldr	r3, [sp, #0]
 800aaba:	1aec      	subs	r4, r5, r3
 800aabc:	2c00      	cmp	r4, #0
 800aabe:	dd1a      	ble.n	800aaf6 <_vfiprintf_r+0x5ce>
 800aac0:	4d7a      	ldr	r5, [pc, #488]	; (800acac <_vfiprintf_r+0x784>)
 800aac2:	6035      	str	r5, [r6, #0]
 800aac4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800aac8:	2c10      	cmp	r4, #16
 800aaca:	f103 0301 	add.w	r3, r3, #1
 800aace:	f106 0208 	add.w	r2, r6, #8
 800aad2:	f300 8129 	bgt.w	800ad28 <_vfiprintf_r+0x800>
 800aad6:	6074      	str	r4, [r6, #4]
 800aad8:	2b07      	cmp	r3, #7
 800aada:	440c      	add	r4, r1
 800aadc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800aae0:	f340 8133 	ble.w	800ad4a <_vfiprintf_r+0x822>
 800aae4:	aa0c      	add	r2, sp, #48	; 0x30
 800aae6:	4639      	mov	r1, r7
 800aae8:	4648      	mov	r0, r9
 800aaea:	f7ff fceb 	bl	800a4c4 <__sprint_r>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f040 8153 	bne.w	800ad9a <_vfiprintf_r+0x872>
 800aaf4:	ae0f      	add	r6, sp, #60	; 0x3c
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aafa:	6073      	str	r3, [r6, #4]
 800aafc:	4418      	add	r0, r3
 800aafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab00:	f8c6 8000 	str.w	r8, [r6]
 800ab04:	3301      	adds	r3, #1
 800ab06:	2b07      	cmp	r3, #7
 800ab08:	900e      	str	r0, [sp, #56]	; 0x38
 800ab0a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab0c:	f300 811f 	bgt.w	800ad4e <_vfiprintf_r+0x826>
 800ab10:	f106 0308 	add.w	r3, r6, #8
 800ab14:	f01a 0f04 	tst.w	sl, #4
 800ab18:	f040 8121 	bne.w	800ad5e <_vfiprintf_r+0x836>
 800ab1c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab20:	9904      	ldr	r1, [sp, #16]
 800ab22:	428a      	cmp	r2, r1
 800ab24:	bfac      	ite	ge
 800ab26:	189b      	addge	r3, r3, r2
 800ab28:	185b      	addlt	r3, r3, r1
 800ab2a:	9302      	str	r3, [sp, #8]
 800ab2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab2e:	b13b      	cbz	r3, 800ab40 <_vfiprintf_r+0x618>
 800ab30:	aa0c      	add	r2, sp, #48	; 0x30
 800ab32:	4639      	mov	r1, r7
 800ab34:	4648      	mov	r0, r9
 800ab36:	f7ff fcc5 	bl	800a4c4 <__sprint_r>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f040 812d 	bne.w	800ad9a <_vfiprintf_r+0x872>
 800ab40:	2300      	movs	r3, #0
 800ab42:	930d      	str	r3, [sp, #52]	; 0x34
 800ab44:	ae0f      	add	r6, sp, #60	; 0x3c
 800ab46:	e6c7      	b.n	800a8d8 <_vfiprintf_r+0x3b0>
 800ab48:	4640      	mov	r0, r8
 800ab4a:	f7f5 fb4b 	bl	80001e4 <strlen>
 800ab4e:	9000      	str	r0, [sp, #0]
 800ab50:	e737      	b.n	800a9c2 <_vfiprintf_r+0x49a>
 800ab52:	f04a 0a10 	orr.w	sl, sl, #16
 800ab56:	f01a 0320 	ands.w	r3, sl, #32
 800ab5a:	d008      	beq.n	800ab6e <_vfiprintf_r+0x646>
 800ab5c:	3407      	adds	r4, #7
 800ab5e:	f024 0307 	bic.w	r3, r4, #7
 800ab62:	469b      	mov	fp, r3
 800ab64:	685d      	ldr	r5, [r3, #4]
 800ab66:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e6da      	b.n	800a924 <_vfiprintf_r+0x3fc>
 800ab6e:	46a3      	mov	fp, r4
 800ab70:	f01a 0510 	ands.w	r5, sl, #16
 800ab74:	f85b 4b04 	ldr.w	r4, [fp], #4
 800ab78:	d001      	beq.n	800ab7e <_vfiprintf_r+0x656>
 800ab7a:	461d      	mov	r5, r3
 800ab7c:	e7f5      	b.n	800ab6a <_vfiprintf_r+0x642>
 800ab7e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ab82:	d001      	beq.n	800ab88 <_vfiprintf_r+0x660>
 800ab84:	b2a4      	uxth	r4, r4
 800ab86:	e7f0      	b.n	800ab6a <_vfiprintf_r+0x642>
 800ab88:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ab8c:	d0ed      	beq.n	800ab6a <_vfiprintf_r+0x642>
 800ab8e:	b2e4      	uxtb	r4, r4
 800ab90:	e7f3      	b.n	800ab7a <_vfiprintf_r+0x652>
 800ab92:	4a47      	ldr	r2, [pc, #284]	; (800acb0 <_vfiprintf_r+0x788>)
 800ab94:	e5c5      	b.n	800a722 <_vfiprintf_r+0x1fa>
 800ab96:	46a3      	mov	fp, r4
 800ab98:	f01a 0510 	ands.w	r5, sl, #16
 800ab9c:	f85b 4b04 	ldr.w	r4, [fp], #4
 800aba0:	d001      	beq.n	800aba6 <_vfiprintf_r+0x67e>
 800aba2:	4615      	mov	r5, r2
 800aba4:	e5c9      	b.n	800a73a <_vfiprintf_r+0x212>
 800aba6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800abaa:	d001      	beq.n	800abb0 <_vfiprintf_r+0x688>
 800abac:	b2a4      	uxth	r4, r4
 800abae:	e5c4      	b.n	800a73a <_vfiprintf_r+0x212>
 800abb0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800abb4:	f43f adc1 	beq.w	800a73a <_vfiprintf_r+0x212>
 800abb8:	b2e4      	uxtb	r4, r4
 800abba:	e7f2      	b.n	800aba2 <_vfiprintf_r+0x67a>
 800abbc:	2c0a      	cmp	r4, #10
 800abbe:	f175 0300 	sbcs.w	r3, r5, #0
 800abc2:	d205      	bcs.n	800abd0 <_vfiprintf_r+0x6a8>
 800abc4:	3430      	adds	r4, #48	; 0x30
 800abc6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800abca:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800abce:	e137      	b.n	800ae40 <_vfiprintf_r+0x918>
 800abd0:	ab38      	add	r3, sp, #224	; 0xe0
 800abd2:	9308      	str	r3, [sp, #32]
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abda:	f04f 0a00 	mov.w	sl, #0
 800abde:	9309      	str	r3, [sp, #36]	; 0x24
 800abe0:	9b08      	ldr	r3, [sp, #32]
 800abe2:	220a      	movs	r2, #10
 800abe4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800abe8:	4620      	mov	r0, r4
 800abea:	2300      	movs	r3, #0
 800abec:	4629      	mov	r1, r5
 800abee:	f7f6 f85b 	bl	8000ca8 <__aeabi_uldivmod>
 800abf2:	9b08      	ldr	r3, [sp, #32]
 800abf4:	3230      	adds	r2, #48	; 0x30
 800abf6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800abfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfc:	f10a 0a01 	add.w	sl, sl, #1
 800ac00:	b1db      	cbz	r3, 800ac3a <_vfiprintf_r+0x712>
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	4553      	cmp	r3, sl
 800ac08:	d117      	bne.n	800ac3a <_vfiprintf_r+0x712>
 800ac0a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800ac0e:	d014      	beq.n	800ac3a <_vfiprintf_r+0x712>
 800ac10:	2c0a      	cmp	r4, #10
 800ac12:	f175 0300 	sbcs.w	r3, r5, #0
 800ac16:	d310      	bcc.n	800ac3a <_vfiprintf_r+0x712>
 800ac18:	9b07      	ldr	r3, [sp, #28]
 800ac1a:	eba8 0803 	sub.w	r8, r8, r3
 800ac1e:	461a      	mov	r2, r3
 800ac20:	ee18 1a10 	vmov	r1, s16
 800ac24:	4640      	mov	r0, r8
 800ac26:	f7ff f93f 	bl	8009ea8 <strncpy>
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	b1a3      	cbz	r3, 800ac5a <_vfiprintf_r+0x732>
 800ac30:	9b06      	ldr	r3, [sp, #24]
 800ac32:	3301      	adds	r3, #1
 800ac34:	9306      	str	r3, [sp, #24]
 800ac36:	f04f 0a00 	mov.w	sl, #0
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	220a      	movs	r2, #10
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f6 f831 	bl	8000ca8 <__aeabi_uldivmod>
 800ac46:	2c0a      	cmp	r4, #10
 800ac48:	f175 0300 	sbcs.w	r3, r5, #0
 800ac4c:	f0c0 80f8 	bcc.w	800ae40 <_vfiprintf_r+0x918>
 800ac50:	4604      	mov	r4, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	f8cd 8020 	str.w	r8, [sp, #32]
 800ac58:	e7c2      	b.n	800abe0 <_vfiprintf_r+0x6b8>
 800ac5a:	469a      	mov	sl, r3
 800ac5c:	e7ed      	b.n	800ac3a <_vfiprintf_r+0x712>
 800ac5e:	f004 030f 	and.w	r3, r4, #15
 800ac62:	9a05      	ldr	r2, [sp, #20]
 800ac64:	0924      	lsrs	r4, r4, #4
 800ac66:	5cd3      	ldrb	r3, [r2, r3]
 800ac68:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ac6c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ac70:	092d      	lsrs	r5, r5, #4
 800ac72:	ea54 0305 	orrs.w	r3, r4, r5
 800ac76:	d1f2      	bne.n	800ac5e <_vfiprintf_r+0x736>
 800ac78:	e0e2      	b.n	800ae40 <_vfiprintf_r+0x918>
 800ac7a:	b933      	cbnz	r3, 800ac8a <_vfiprintf_r+0x762>
 800ac7c:	f01a 0f01 	tst.w	sl, #1
 800ac80:	d003      	beq.n	800ac8a <_vfiprintf_r+0x762>
 800ac82:	2330      	movs	r3, #48	; 0x30
 800ac84:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800ac88:	e79f      	b.n	800abca <_vfiprintf_r+0x6a2>
 800ac8a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ac8e:	e0d7      	b.n	800ae40 <_vfiprintf_r+0x918>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 80a3 	beq.w	800addc <_vfiprintf_r+0x8b4>
 800ac96:	2100      	movs	r1, #0
 800ac98:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ac9c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800aca0:	46a3      	mov	fp, r4
 800aca2:	e5da      	b.n	800a85a <_vfiprintf_r+0x332>
 800aca4:	4605      	mov	r5, r0
 800aca6:	e68c      	b.n	800a9c2 <_vfiprintf_r+0x49a>
 800aca8:	0800c078 	.word	0x0800c078
 800acac:	0800c088 	.word	0x0800c088
 800acb0:	0800bcb9 	.word	0x0800bcb9
 800acb4:	2010      	movs	r0, #16
 800acb6:	4402      	add	r2, r0
 800acb8:	2b07      	cmp	r3, #7
 800acba:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800acbe:	6070      	str	r0, [r6, #4]
 800acc0:	dd07      	ble.n	800acd2 <_vfiprintf_r+0x7aa>
 800acc2:	aa0c      	add	r2, sp, #48	; 0x30
 800acc4:	4639      	mov	r1, r7
 800acc6:	4648      	mov	r0, r9
 800acc8:	f7ff fbfc 	bl	800a4c4 <__sprint_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	d164      	bne.n	800ad9a <_vfiprintf_r+0x872>
 800acd0:	a90f      	add	r1, sp, #60	; 0x3c
 800acd2:	3c10      	subs	r4, #16
 800acd4:	460e      	mov	r6, r1
 800acd6:	e68f      	b.n	800a9f8 <_vfiprintf_r+0x4d0>
 800acd8:	460e      	mov	r6, r1
 800acda:	e6a8      	b.n	800aa2e <_vfiprintf_r+0x506>
 800acdc:	aa0c      	add	r2, sp, #48	; 0x30
 800acde:	4639      	mov	r1, r7
 800ace0:	4648      	mov	r0, r9
 800ace2:	f7ff fbef 	bl	800a4c4 <__sprint_r>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d157      	bne.n	800ad9a <_vfiprintf_r+0x872>
 800acea:	ae0f      	add	r6, sp, #60	; 0x3c
 800acec:	e6b1      	b.n	800aa52 <_vfiprintf_r+0x52a>
 800acee:	aa0c      	add	r2, sp, #48	; 0x30
 800acf0:	4639      	mov	r1, r7
 800acf2:	4648      	mov	r0, r9
 800acf4:	f7ff fbe6 	bl	800a4c4 <__sprint_r>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d14e      	bne.n	800ad9a <_vfiprintf_r+0x872>
 800acfc:	ae0f      	add	r6, sp, #60	; 0x3c
 800acfe:	e6b8      	b.n	800aa72 <_vfiprintf_r+0x54a>
 800ad00:	2010      	movs	r0, #16
 800ad02:	4402      	add	r2, r0
 800ad04:	2b07      	cmp	r3, #7
 800ad06:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800ad0a:	6070      	str	r0, [r6, #4]
 800ad0c:	dd07      	ble.n	800ad1e <_vfiprintf_r+0x7f6>
 800ad0e:	aa0c      	add	r2, sp, #48	; 0x30
 800ad10:	4639      	mov	r1, r7
 800ad12:	4648      	mov	r0, r9
 800ad14:	f7ff fbd6 	bl	800a4c4 <__sprint_r>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d13e      	bne.n	800ad9a <_vfiprintf_r+0x872>
 800ad1c:	a90f      	add	r1, sp, #60	; 0x3c
 800ad1e:	3c10      	subs	r4, #16
 800ad20:	460e      	mov	r6, r1
 800ad22:	e6ae      	b.n	800aa82 <_vfiprintf_r+0x55a>
 800ad24:	460e      	mov	r6, r1
 800ad26:	e6c7      	b.n	800aab8 <_vfiprintf_r+0x590>
 800ad28:	2010      	movs	r0, #16
 800ad2a:	4401      	add	r1, r0
 800ad2c:	2b07      	cmp	r3, #7
 800ad2e:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ad32:	6070      	str	r0, [r6, #4]
 800ad34:	dd06      	ble.n	800ad44 <_vfiprintf_r+0x81c>
 800ad36:	aa0c      	add	r2, sp, #48	; 0x30
 800ad38:	4639      	mov	r1, r7
 800ad3a:	4648      	mov	r0, r9
 800ad3c:	f7ff fbc2 	bl	800a4c4 <__sprint_r>
 800ad40:	bb58      	cbnz	r0, 800ad9a <_vfiprintf_r+0x872>
 800ad42:	aa0f      	add	r2, sp, #60	; 0x3c
 800ad44:	3c10      	subs	r4, #16
 800ad46:	4616      	mov	r6, r2
 800ad48:	e6bb      	b.n	800aac2 <_vfiprintf_r+0x59a>
 800ad4a:	4616      	mov	r6, r2
 800ad4c:	e6d3      	b.n	800aaf6 <_vfiprintf_r+0x5ce>
 800ad4e:	aa0c      	add	r2, sp, #48	; 0x30
 800ad50:	4639      	mov	r1, r7
 800ad52:	4648      	mov	r0, r9
 800ad54:	f7ff fbb6 	bl	800a4c4 <__sprint_r>
 800ad58:	b9f8      	cbnz	r0, 800ad9a <_vfiprintf_r+0x872>
 800ad5a:	ab0f      	add	r3, sp, #60	; 0x3c
 800ad5c:	e6da      	b.n	800ab14 <_vfiprintf_r+0x5ec>
 800ad5e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ad62:	1a54      	subs	r4, r2, r1
 800ad64:	2c00      	cmp	r4, #0
 800ad66:	f77f aed9 	ble.w	800ab1c <_vfiprintf_r+0x5f4>
 800ad6a:	4d39      	ldr	r5, [pc, #228]	; (800ae50 <_vfiprintf_r+0x928>)
 800ad6c:	2610      	movs	r6, #16
 800ad6e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800ad72:	2c10      	cmp	r4, #16
 800ad74:	f102 0201 	add.w	r2, r2, #1
 800ad78:	601d      	str	r5, [r3, #0]
 800ad7a:	dc1d      	bgt.n	800adb8 <_vfiprintf_r+0x890>
 800ad7c:	605c      	str	r4, [r3, #4]
 800ad7e:	2a07      	cmp	r2, #7
 800ad80:	440c      	add	r4, r1
 800ad82:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800ad86:	f77f aec9 	ble.w	800ab1c <_vfiprintf_r+0x5f4>
 800ad8a:	aa0c      	add	r2, sp, #48	; 0x30
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f7ff fb98 	bl	800a4c4 <__sprint_r>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	f43f aec1 	beq.w	800ab1c <_vfiprintf_r+0x5f4>
 800ad9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad9c:	07d9      	lsls	r1, r3, #31
 800ad9e:	d405      	bmi.n	800adac <_vfiprintf_r+0x884>
 800ada0:	89bb      	ldrh	r3, [r7, #12]
 800ada2:	059a      	lsls	r2, r3, #22
 800ada4:	d402      	bmi.n	800adac <_vfiprintf_r+0x884>
 800ada6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ada8:	f7fe f93d 	bl	8009026 <__retarget_lock_release_recursive>
 800adac:	89bb      	ldrh	r3, [r7, #12]
 800adae:	065b      	lsls	r3, r3, #25
 800adb0:	f57f abed 	bpl.w	800a58e <_vfiprintf_r+0x66>
 800adb4:	f7ff bbe8 	b.w	800a588 <_vfiprintf_r+0x60>
 800adb8:	3110      	adds	r1, #16
 800adba:	2a07      	cmp	r2, #7
 800adbc:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800adc0:	605e      	str	r6, [r3, #4]
 800adc2:	dc02      	bgt.n	800adca <_vfiprintf_r+0x8a2>
 800adc4:	3308      	adds	r3, #8
 800adc6:	3c10      	subs	r4, #16
 800adc8:	e7d1      	b.n	800ad6e <_vfiprintf_r+0x846>
 800adca:	aa0c      	add	r2, sp, #48	; 0x30
 800adcc:	4639      	mov	r1, r7
 800adce:	4648      	mov	r0, r9
 800add0:	f7ff fb78 	bl	800a4c4 <__sprint_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	d1e0      	bne.n	800ad9a <_vfiprintf_r+0x872>
 800add8:	ab0f      	add	r3, sp, #60	; 0x3c
 800adda:	e7f4      	b.n	800adc6 <_vfiprintf_r+0x89e>
 800addc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adde:	b913      	cbnz	r3, 800ade6 <_vfiprintf_r+0x8be>
 800ade0:	2300      	movs	r3, #0
 800ade2:	930d      	str	r3, [sp, #52]	; 0x34
 800ade4:	e7d9      	b.n	800ad9a <_vfiprintf_r+0x872>
 800ade6:	aa0c      	add	r2, sp, #48	; 0x30
 800ade8:	4639      	mov	r1, r7
 800adea:	4648      	mov	r0, r9
 800adec:	f7ff fb6a 	bl	800a4c4 <__sprint_r>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d0f5      	beq.n	800ade0 <_vfiprintf_r+0x8b8>
 800adf4:	e7d1      	b.n	800ad9a <_vfiprintf_r+0x872>
 800adf6:	ea54 0205 	orrs.w	r2, r4, r5
 800adfa:	f8cd a010 	str.w	sl, [sp, #16]
 800adfe:	f43f ada3 	beq.w	800a948 <_vfiprintf_r+0x420>
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	f43f aeda 	beq.w	800abbc <_vfiprintf_r+0x694>
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ae0e:	f43f af26 	beq.w	800ac5e <_vfiprintf_r+0x736>
 800ae12:	f004 0307 	and.w	r3, r4, #7
 800ae16:	08e4      	lsrs	r4, r4, #3
 800ae18:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800ae1c:	08ed      	lsrs	r5, r5, #3
 800ae1e:	3330      	adds	r3, #48	; 0x30
 800ae20:	ea54 0105 	orrs.w	r1, r4, r5
 800ae24:	4642      	mov	r2, r8
 800ae26:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ae2a:	d1f2      	bne.n	800ae12 <_vfiprintf_r+0x8ea>
 800ae2c:	9904      	ldr	r1, [sp, #16]
 800ae2e:	07c8      	lsls	r0, r1, #31
 800ae30:	d506      	bpl.n	800ae40 <_vfiprintf_r+0x918>
 800ae32:	2b30      	cmp	r3, #48	; 0x30
 800ae34:	d004      	beq.n	800ae40 <_vfiprintf_r+0x918>
 800ae36:	2330      	movs	r3, #48	; 0x30
 800ae38:	f808 3c01 	strb.w	r3, [r8, #-1]
 800ae3c:	f1a2 0802 	sub.w	r8, r2, #2
 800ae40:	ab38      	add	r3, sp, #224	; 0xe0
 800ae42:	eba3 0308 	sub.w	r3, r3, r8
 800ae46:	9d00      	ldr	r5, [sp, #0]
 800ae48:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	e5b8      	b.n	800a9c2 <_vfiprintf_r+0x49a>
 800ae50:	0800c078 	.word	0x0800c078

0800ae54 <__sbprintf>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	460c      	mov	r4, r1
 800ae58:	8989      	ldrh	r1, [r1, #12]
 800ae5a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ae5e:	f021 0102 	bic.w	r1, r1, #2
 800ae62:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ae66:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ae68:	911b      	str	r1, [sp, #108]	; 0x6c
 800ae6a:	89e1      	ldrh	r1, [r4, #14]
 800ae6c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ae70:	69e1      	ldr	r1, [r4, #28]
 800ae72:	9109      	str	r1, [sp, #36]	; 0x24
 800ae74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae76:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae78:	a91c      	add	r1, sp, #112	; 0x70
 800ae7a:	9102      	str	r1, [sp, #8]
 800ae7c:	9106      	str	r1, [sp, #24]
 800ae7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ae82:	4606      	mov	r6, r0
 800ae84:	9104      	str	r1, [sp, #16]
 800ae86:	9107      	str	r1, [sp, #28]
 800ae88:	a818      	add	r0, sp, #96	; 0x60
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	e9cd 3200 	strd	r3, r2, [sp]
 800ae90:	9108      	str	r1, [sp, #32]
 800ae92:	f7fe f8c5 	bl	8009020 <__retarget_lock_init_recursive>
 800ae96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae9a:	a902      	add	r1, sp, #8
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff fb43 	bl	800a528 <_vfiprintf_r>
 800aea2:	1e05      	subs	r5, r0, #0
 800aea4:	db07      	blt.n	800aeb6 <__sbprintf+0x62>
 800aea6:	a902      	add	r1, sp, #8
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 f901 	bl	800b0b0 <_fflush_r>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	bf18      	it	ne
 800aeb2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800aeb6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800aeba:	9818      	ldr	r0, [sp, #96]	; 0x60
 800aebc:	065b      	lsls	r3, r3, #25
 800aebe:	bf42      	ittt	mi
 800aec0:	89a3      	ldrhmi	r3, [r4, #12]
 800aec2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800aec6:	81a3      	strhmi	r3, [r4, #12]
 800aec8:	f7fe f8ab 	bl	8009022 <__retarget_lock_close_recursive>
 800aecc:	4628      	mov	r0, r5
 800aece:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800aed2:	bd70      	pop	{r4, r5, r6, pc}

0800aed4 <__swsetup_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <__swsetup_r+0xac>)
 800aed8:	4605      	mov	r5, r0
 800aeda:	6818      	ldr	r0, [r3, #0]
 800aedc:	460c      	mov	r4, r1
 800aede:	b118      	cbz	r0, 800aee8 <__swsetup_r+0x14>
 800aee0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aee2:	b90b      	cbnz	r3, 800aee8 <__swsetup_r+0x14>
 800aee4:	f000 f950 	bl	800b188 <__sinit>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeee:	0718      	lsls	r0, r3, #28
 800aef0:	d422      	bmi.n	800af38 <__swsetup_r+0x64>
 800aef2:	06d9      	lsls	r1, r3, #27
 800aef4:	d407      	bmi.n	800af06 <__swsetup_r+0x32>
 800aef6:	2309      	movs	r3, #9
 800aef8:	602b      	str	r3, [r5, #0]
 800aefa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af04:	e034      	b.n	800af70 <__swsetup_r+0x9c>
 800af06:	0758      	lsls	r0, r3, #29
 800af08:	d512      	bpl.n	800af30 <__swsetup_r+0x5c>
 800af0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af0c:	b141      	cbz	r1, 800af20 <__swsetup_r+0x4c>
 800af0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800af12:	4299      	cmp	r1, r3
 800af14:	d002      	beq.n	800af1c <__swsetup_r+0x48>
 800af16:	4628      	mov	r0, r5
 800af18:	f7fd fc48 	bl	80087ac <_free_r>
 800af1c:	2300      	movs	r3, #0
 800af1e:	6323      	str	r3, [r4, #48]	; 0x30
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	2300      	movs	r3, #0
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f043 0308 	orr.w	r3, r3, #8
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	b94b      	cbnz	r3, 800af50 <__swsetup_r+0x7c>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af46:	d003      	beq.n	800af50 <__swsetup_r+0x7c>
 800af48:	4621      	mov	r1, r4
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 fb46 	bl	800b5dc <__smakebuf_r>
 800af50:	89a0      	ldrh	r0, [r4, #12]
 800af52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af56:	f010 0301 	ands.w	r3, r0, #1
 800af5a:	d00a      	beq.n	800af72 <__swsetup_r+0x9e>
 800af5c:	2300      	movs	r3, #0
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	6963      	ldr	r3, [r4, #20]
 800af62:	425b      	negs	r3, r3
 800af64:	61a3      	str	r3, [r4, #24]
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	b943      	cbnz	r3, 800af7c <__swsetup_r+0xa8>
 800af6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af6e:	d1c4      	bne.n	800aefa <__swsetup_r+0x26>
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	0781      	lsls	r1, r0, #30
 800af74:	bf58      	it	pl
 800af76:	6963      	ldrpl	r3, [r4, #20]
 800af78:	60a3      	str	r3, [r4, #8]
 800af7a:	e7f4      	b.n	800af66 <__swsetup_r+0x92>
 800af7c:	2000      	movs	r0, #0
 800af7e:	e7f7      	b.n	800af70 <__swsetup_r+0x9c>
 800af80:	20000014 	.word	0x20000014

0800af84 <abort>:
 800af84:	b508      	push	{r3, lr}
 800af86:	2006      	movs	r0, #6
 800af88:	f000 fb92 	bl	800b6b0 <raise>
 800af8c:	2001      	movs	r0, #1
 800af8e:	f7f6 fdc5 	bl	8001b1c <_exit>
	...

0800af94 <__sflush_r>:
 800af94:	898b      	ldrh	r3, [r1, #12]
 800af96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9e:	4605      	mov	r5, r0
 800afa0:	0718      	lsls	r0, r3, #28
 800afa2:	460c      	mov	r4, r1
 800afa4:	d45f      	bmi.n	800b066 <__sflush_r+0xd2>
 800afa6:	684b      	ldr	r3, [r1, #4]
 800afa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afac:	2b00      	cmp	r3, #0
 800afae:	818a      	strh	r2, [r1, #12]
 800afb0:	dc05      	bgt.n	800afbe <__sflush_r+0x2a>
 800afb2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc02      	bgt.n	800afbe <__sflush_r+0x2a>
 800afb8:	2000      	movs	r0, #0
 800afba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	d0f9      	beq.n	800afb8 <__sflush_r+0x24>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afca:	682f      	ldr	r7, [r5, #0]
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	d036      	beq.n	800b03e <__sflush_r+0xaa>
 800afd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	075a      	lsls	r2, r3, #29
 800afd6:	d505      	bpl.n	800afe4 <__sflush_r+0x50>
 800afd8:	6863      	ldr	r3, [r4, #4]
 800afda:	1ac0      	subs	r0, r0, r3
 800afdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afde:	b10b      	cbz	r3, 800afe4 <__sflush_r+0x50>
 800afe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	2300      	movs	r3, #0
 800afe6:	4602      	mov	r2, r0
 800afe8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afea:	69e1      	ldr	r1, [r4, #28]
 800afec:	4628      	mov	r0, r5
 800afee:	47b0      	blx	r6
 800aff0:	1c43      	adds	r3, r0, #1
 800aff2:	89a3      	ldrh	r3, [r4, #12]
 800aff4:	d106      	bne.n	800b004 <__sflush_r+0x70>
 800aff6:	6829      	ldr	r1, [r5, #0]
 800aff8:	291d      	cmp	r1, #29
 800affa:	d830      	bhi.n	800b05e <__sflush_r+0xca>
 800affc:	4a2b      	ldr	r2, [pc, #172]	; (800b0ac <__sflush_r+0x118>)
 800affe:	40ca      	lsrs	r2, r1
 800b000:	07d6      	lsls	r6, r2, #31
 800b002:	d52c      	bpl.n	800b05e <__sflush_r+0xca>
 800b004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b008:	b21b      	sxth	r3, r3
 800b00a:	2200      	movs	r2, #0
 800b00c:	6062      	str	r2, [r4, #4]
 800b00e:	04d9      	lsls	r1, r3, #19
 800b010:	6922      	ldr	r2, [r4, #16]
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	6022      	str	r2, [r4, #0]
 800b016:	d504      	bpl.n	800b022 <__sflush_r+0x8e>
 800b018:	1c42      	adds	r2, r0, #1
 800b01a:	d101      	bne.n	800b020 <__sflush_r+0x8c>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b903      	cbnz	r3, 800b022 <__sflush_r+0x8e>
 800b020:	6520      	str	r0, [r4, #80]	; 0x50
 800b022:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b024:	602f      	str	r7, [r5, #0]
 800b026:	2900      	cmp	r1, #0
 800b028:	d0c6      	beq.n	800afb8 <__sflush_r+0x24>
 800b02a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b02e:	4299      	cmp	r1, r3
 800b030:	d002      	beq.n	800b038 <__sflush_r+0xa4>
 800b032:	4628      	mov	r0, r5
 800b034:	f7fd fbba 	bl	80087ac <_free_r>
 800b038:	2000      	movs	r0, #0
 800b03a:	6320      	str	r0, [r4, #48]	; 0x30
 800b03c:	e7bd      	b.n	800afba <__sflush_r+0x26>
 800b03e:	69e1      	ldr	r1, [r4, #28]
 800b040:	2301      	movs	r3, #1
 800b042:	4628      	mov	r0, r5
 800b044:	47b0      	blx	r6
 800b046:	1c41      	adds	r1, r0, #1
 800b048:	d1c3      	bne.n	800afd2 <__sflush_r+0x3e>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0c0      	beq.n	800afd2 <__sflush_r+0x3e>
 800b050:	2b1d      	cmp	r3, #29
 800b052:	d001      	beq.n	800b058 <__sflush_r+0xc4>
 800b054:	2b16      	cmp	r3, #22
 800b056:	d101      	bne.n	800b05c <__sflush_r+0xc8>
 800b058:	602f      	str	r7, [r5, #0]
 800b05a:	e7ad      	b.n	800afb8 <__sflush_r+0x24>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	e7a9      	b.n	800afba <__sflush_r+0x26>
 800b066:	690f      	ldr	r7, [r1, #16]
 800b068:	2f00      	cmp	r7, #0
 800b06a:	d0a5      	beq.n	800afb8 <__sflush_r+0x24>
 800b06c:	079b      	lsls	r3, r3, #30
 800b06e:	680e      	ldr	r6, [r1, #0]
 800b070:	bf08      	it	eq
 800b072:	694b      	ldreq	r3, [r1, #20]
 800b074:	600f      	str	r7, [r1, #0]
 800b076:	bf18      	it	ne
 800b078:	2300      	movne	r3, #0
 800b07a:	eba6 0807 	sub.w	r8, r6, r7
 800b07e:	608b      	str	r3, [r1, #8]
 800b080:	f1b8 0f00 	cmp.w	r8, #0
 800b084:	dd98      	ble.n	800afb8 <__sflush_r+0x24>
 800b086:	69e1      	ldr	r1, [r4, #28]
 800b088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b08a:	4643      	mov	r3, r8
 800b08c:	463a      	mov	r2, r7
 800b08e:	4628      	mov	r0, r5
 800b090:	47b0      	blx	r6
 800b092:	2800      	cmp	r0, #0
 800b094:	dc06      	bgt.n	800b0a4 <__sflush_r+0x110>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0a2:	e78a      	b.n	800afba <__sflush_r+0x26>
 800b0a4:	4407      	add	r7, r0
 800b0a6:	eba8 0800 	sub.w	r8, r8, r0
 800b0aa:	e7e9      	b.n	800b080 <__sflush_r+0xec>
 800b0ac:	20400001 	.word	0x20400001

0800b0b0 <_fflush_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	b118      	cbz	r0, 800b0c0 <_fflush_r+0x10>
 800b0b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b0ba:	b90b      	cbnz	r3, 800b0c0 <_fflush_r+0x10>
 800b0bc:	f000 f864 	bl	800b188 <__sinit>
 800b0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c4:	b1bb      	cbz	r3, 800b0f6 <_fflush_r+0x46>
 800b0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0c8:	07d0      	lsls	r0, r2, #31
 800b0ca:	d404      	bmi.n	800b0d6 <_fflush_r+0x26>
 800b0cc:	0599      	lsls	r1, r3, #22
 800b0ce:	d402      	bmi.n	800b0d6 <_fflush_r+0x26>
 800b0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0d2:	f7fd ffa7 	bl	8009024 <__retarget_lock_acquire_recursive>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f7ff ff5b 	bl	800af94 <__sflush_r>
 800b0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e0:	07da      	lsls	r2, r3, #31
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	d405      	bmi.n	800b0f2 <_fflush_r+0x42>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	059b      	lsls	r3, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_fflush_r+0x42>
 800b0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ee:	f7fd ff9a 	bl	8009026 <__retarget_lock_release_recursive>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
 800b0f6:	461d      	mov	r5, r3
 800b0f8:	e7fb      	b.n	800b0f2 <_fflush_r+0x42>
	...

0800b0fc <std>:
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	b510      	push	{r4, lr}
 800b100:	4604      	mov	r4, r0
 800b102:	e9c0 3300 	strd	r3, r3, [r0]
 800b106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b10a:	6083      	str	r3, [r0, #8]
 800b10c:	8181      	strh	r1, [r0, #12]
 800b10e:	6643      	str	r3, [r0, #100]	; 0x64
 800b110:	81c2      	strh	r2, [r0, #14]
 800b112:	6183      	str	r3, [r0, #24]
 800b114:	4619      	mov	r1, r3
 800b116:	2208      	movs	r2, #8
 800b118:	305c      	adds	r0, #92	; 0x5c
 800b11a:	f7fa fb61 	bl	80057e0 <memset>
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <std+0x40>)
 800b120:	6223      	str	r3, [r4, #32]
 800b122:	4b07      	ldr	r3, [pc, #28]	; (800b140 <std+0x44>)
 800b124:	6263      	str	r3, [r4, #36]	; 0x24
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <std+0x48>)
 800b128:	62a3      	str	r3, [r4, #40]	; 0x28
 800b12a:	4b07      	ldr	r3, [pc, #28]	; (800b148 <std+0x4c>)
 800b12c:	61e4      	str	r4, [r4, #28]
 800b12e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b130:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b138:	f7fd bf72 	b.w	8009020 <__retarget_lock_init_recursive>
 800b13c:	0800b6e9 	.word	0x0800b6e9
 800b140:	0800b70b 	.word	0x0800b70b
 800b144:	0800b743 	.word	0x0800b743
 800b148:	0800b767 	.word	0x0800b767

0800b14c <_cleanup_r>:
 800b14c:	4901      	ldr	r1, [pc, #4]	; (800b154 <_cleanup_r+0x8>)
 800b14e:	f000 b9f9 	b.w	800b544 <_fwalk_reent>
 800b152:	bf00      	nop
 800b154:	0800b871 	.word	0x0800b871

0800b158 <__sfp_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__sfp_lock_acquire+0x8>)
 800b15a:	f7fd bf63 	b.w	8009024 <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	20000bb2 	.word	0x20000bb2

0800b164 <__sfp_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sfp_lock_release+0x8>)
 800b166:	f7fd bf5e 	b.w	8009026 <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	20000bb2 	.word	0x20000bb2

0800b170 <__sinit_lock_acquire>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sinit_lock_acquire+0x8>)
 800b172:	f7fd bf57 	b.w	8009024 <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	20000bb3 	.word	0x20000bb3

0800b17c <__sinit_lock_release>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sinit_lock_release+0x8>)
 800b17e:	f7fd bf52 	b.w	8009026 <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	20000bb3 	.word	0x20000bb3

0800b188 <__sinit>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	f7ff fff0 	bl	800b170 <__sinit_lock_acquire>
 800b190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b192:	b11a      	cbz	r2, 800b19c <__sinit+0x14>
 800b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b198:	f7ff bff0 	b.w	800b17c <__sinit_lock_release>
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <__sinit+0x4c>)
 800b19e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800b1a6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800b1aa:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800b1ae:	6860      	ldr	r0, [r4, #4]
 800b1b0:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800b1b4:	2104      	movs	r1, #4
 800b1b6:	f7ff ffa1 	bl	800b0fc <std>
 800b1ba:	68a0      	ldr	r0, [r4, #8]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	2109      	movs	r1, #9
 800b1c0:	f7ff ff9c 	bl	800b0fc <std>
 800b1c4:	68e0      	ldr	r0, [r4, #12]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	2112      	movs	r1, #18
 800b1ca:	f7ff ff97 	bl	800b0fc <std>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b1d2:	e7df      	b.n	800b194 <__sinit+0xc>
 800b1d4:	0800b14d 	.word	0x0800b14d

0800b1d8 <__fputwc>:
 800b1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	4680      	mov	r8, r0
 800b1de:	460e      	mov	r6, r1
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	f7fd ff13 	bl	800900c <__locale_mb_cur_max>
 800b1e6:	2801      	cmp	r0, #1
 800b1e8:	d11c      	bne.n	800b224 <__fputwc+0x4c>
 800b1ea:	1e73      	subs	r3, r6, #1
 800b1ec:	2bfe      	cmp	r3, #254	; 0xfe
 800b1ee:	d819      	bhi.n	800b224 <__fputwc+0x4c>
 800b1f0:	f88d 6004 	strb.w	r6, [sp, #4]
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	2700      	movs	r7, #0
 800b1f8:	f10d 0904 	add.w	r9, sp, #4
 800b1fc:	42a7      	cmp	r7, r4
 800b1fe:	d020      	beq.n	800b242 <__fputwc+0x6a>
 800b200:	68ab      	ldr	r3, [r5, #8]
 800b202:	f817 1009 	ldrb.w	r1, [r7, r9]
 800b206:	3b01      	subs	r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	60ab      	str	r3, [r5, #8]
 800b20c:	da04      	bge.n	800b218 <__fputwc+0x40>
 800b20e:	69aa      	ldr	r2, [r5, #24]
 800b210:	4293      	cmp	r3, r2
 800b212:	db1a      	blt.n	800b24a <__fputwc+0x72>
 800b214:	290a      	cmp	r1, #10
 800b216:	d018      	beq.n	800b24a <__fputwc+0x72>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	602a      	str	r2, [r5, #0]
 800b21e:	7019      	strb	r1, [r3, #0]
 800b220:	3701      	adds	r7, #1
 800b222:	e7eb      	b.n	800b1fc <__fputwc+0x24>
 800b224:	a901      	add	r1, sp, #4
 800b226:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800b22a:	4632      	mov	r2, r6
 800b22c:	4640      	mov	r0, r8
 800b22e:	f000 fae7 	bl	800b800 <_wcrtomb_r>
 800b232:	1c41      	adds	r1, r0, #1
 800b234:	4604      	mov	r4, r0
 800b236:	d1de      	bne.n	800b1f6 <__fputwc+0x1e>
 800b238:	89ab      	ldrh	r3, [r5, #12]
 800b23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23e:	81ab      	strh	r3, [r5, #12]
 800b240:	4606      	mov	r6, r0
 800b242:	4630      	mov	r0, r6
 800b244:	b003      	add	sp, #12
 800b246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24a:	462a      	mov	r2, r5
 800b24c:	4640      	mov	r0, r8
 800b24e:	f000 fa8e 	bl	800b76e <__swbuf_r>
 800b252:	1c42      	adds	r2, r0, #1
 800b254:	d1e4      	bne.n	800b220 <__fputwc+0x48>
 800b256:	4606      	mov	r6, r0
 800b258:	e7f3      	b.n	800b242 <__fputwc+0x6a>

0800b25a <_fputwc_r>:
 800b25a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b25e:	4614      	mov	r4, r2
 800b260:	07da      	lsls	r2, r3, #31
 800b262:	4605      	mov	r5, r0
 800b264:	d407      	bmi.n	800b276 <_fputwc_r+0x1c>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	059b      	lsls	r3, r3, #22
 800b26a:	d404      	bmi.n	800b276 <_fputwc_r+0x1c>
 800b26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b26e:	9101      	str	r1, [sp, #4]
 800b270:	f7fd fed8 	bl	8009024 <__retarget_lock_acquire_recursive>
 800b274:	9901      	ldr	r1, [sp, #4]
 800b276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27a:	0498      	lsls	r0, r3, #18
 800b27c:	d406      	bmi.n	800b28c <_fputwc_r+0x32>
 800b27e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b282:	81a3      	strh	r3, [r4, #12]
 800b284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b28a:	6663      	str	r3, [r4, #100]	; 0x64
 800b28c:	4622      	mov	r2, r4
 800b28e:	4628      	mov	r0, r5
 800b290:	f7ff ffa2 	bl	800b1d8 <__fputwc>
 800b294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b296:	07da      	lsls	r2, r3, #31
 800b298:	4605      	mov	r5, r0
 800b29a:	d405      	bmi.n	800b2a8 <_fputwc_r+0x4e>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	059b      	lsls	r3, r3, #22
 800b2a0:	d402      	bmi.n	800b2a8 <_fputwc_r+0x4e>
 800b2a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a4:	f7fd febf 	bl	8009026 <__retarget_lock_release_recursive>
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	b003      	add	sp, #12
 800b2ac:	bd30      	pop	{r4, r5, pc}
	...

0800b2b0 <__sfvwrite_r>:
 800b2b0:	6893      	ldr	r3, [r2, #8]
 800b2b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	4690      	mov	r8, r2
 800b2bc:	b91b      	cbnz	r3, 800b2c6 <__sfvwrite_r+0x16>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	b003      	add	sp, #12
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	898b      	ldrh	r3, [r1, #12]
 800b2c8:	0718      	lsls	r0, r3, #28
 800b2ca:	d550      	bpl.n	800b36e <__sfvwrite_r+0xbe>
 800b2cc:	690b      	ldr	r3, [r1, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d04d      	beq.n	800b36e <__sfvwrite_r+0xbe>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f8d8 7000 	ldr.w	r7, [r8]
 800b2d8:	f013 0902 	ands.w	r9, r3, #2
 800b2dc:	d16c      	bne.n	800b3b8 <__sfvwrite_r+0x108>
 800b2de:	f013 0301 	ands.w	r3, r3, #1
 800b2e2:	f000 809c 	beq.w	800b41e <__sfvwrite_r+0x16e>
 800b2e6:	4648      	mov	r0, r9
 800b2e8:	46ca      	mov	sl, r9
 800b2ea:	46cb      	mov	fp, r9
 800b2ec:	f1bb 0f00 	cmp.w	fp, #0
 800b2f0:	f000 8103 	beq.w	800b4fa <__sfvwrite_r+0x24a>
 800b2f4:	b950      	cbnz	r0, 800b30c <__sfvwrite_r+0x5c>
 800b2f6:	465a      	mov	r2, fp
 800b2f8:	210a      	movs	r1, #10
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	f7f4 ff80 	bl	8000200 <memchr>
 800b300:	2800      	cmp	r0, #0
 800b302:	f000 80ff 	beq.w	800b504 <__sfvwrite_r+0x254>
 800b306:	3001      	adds	r0, #1
 800b308:	eba0 090a 	sub.w	r9, r0, sl
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	6921      	ldr	r1, [r4, #16]
 800b310:	6963      	ldr	r3, [r4, #20]
 800b312:	45d9      	cmp	r9, fp
 800b314:	464a      	mov	r2, r9
 800b316:	bf28      	it	cs
 800b318:	465a      	movcs	r2, fp
 800b31a:	4288      	cmp	r0, r1
 800b31c:	f240 80f5 	bls.w	800b50a <__sfvwrite_r+0x25a>
 800b320:	68a5      	ldr	r5, [r4, #8]
 800b322:	441d      	add	r5, r3
 800b324:	42aa      	cmp	r2, r5
 800b326:	f340 80f0 	ble.w	800b50a <__sfvwrite_r+0x25a>
 800b32a:	4651      	mov	r1, sl
 800b32c:	462a      	mov	r2, r5
 800b32e:	f7fe ff0b 	bl	800a148 <memmove>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	442b      	add	r3, r5
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	4621      	mov	r1, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff feb8 	bl	800b0b0 <_fflush_r>
 800b340:	2800      	cmp	r0, #0
 800b342:	d167      	bne.n	800b414 <__sfvwrite_r+0x164>
 800b344:	ebb9 0905 	subs.w	r9, r9, r5
 800b348:	f040 80f7 	bne.w	800b53a <__sfvwrite_r+0x28a>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff feae 	bl	800b0b0 <_fflush_r>
 800b354:	2800      	cmp	r0, #0
 800b356:	d15d      	bne.n	800b414 <__sfvwrite_r+0x164>
 800b358:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b35c:	44aa      	add	sl, r5
 800b35e:	ebab 0b05 	sub.w	fp, fp, r5
 800b362:	1b55      	subs	r5, r2, r5
 800b364:	f8c8 5008 	str.w	r5, [r8, #8]
 800b368:	2d00      	cmp	r5, #0
 800b36a:	d1bf      	bne.n	800b2ec <__sfvwrite_r+0x3c>
 800b36c:	e7a7      	b.n	800b2be <__sfvwrite_r+0xe>
 800b36e:	4621      	mov	r1, r4
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fdaf 	bl	800aed4 <__swsetup_r>
 800b376:	2800      	cmp	r0, #0
 800b378:	d0ab      	beq.n	800b2d2 <__sfvwrite_r+0x22>
 800b37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b37e:	e79f      	b.n	800b2c0 <__sfvwrite_r+0x10>
 800b380:	e9d7 b900 	ldrd	fp, r9, [r7]
 800b384:	3708      	adds	r7, #8
 800b386:	f1b9 0f00 	cmp.w	r9, #0
 800b38a:	d0f9      	beq.n	800b380 <__sfvwrite_r+0xd0>
 800b38c:	45d1      	cmp	r9, sl
 800b38e:	464b      	mov	r3, r9
 800b390:	69e1      	ldr	r1, [r4, #28]
 800b392:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b394:	bf28      	it	cs
 800b396:	4653      	movcs	r3, sl
 800b398:	465a      	mov	r2, fp
 800b39a:	4630      	mov	r0, r6
 800b39c:	47a8      	blx	r5
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	dd38      	ble.n	800b414 <__sfvwrite_r+0x164>
 800b3a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a6:	4483      	add	fp, r0
 800b3a8:	eba9 0900 	sub.w	r9, r9, r0
 800b3ac:	1a18      	subs	r0, r3, r0
 800b3ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d1e7      	bne.n	800b386 <__sfvwrite_r+0xd6>
 800b3b6:	e782      	b.n	800b2be <__sfvwrite_r+0xe>
 800b3b8:	f04f 0b00 	mov.w	fp, #0
 800b3bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 800b540 <__sfvwrite_r+0x290>
 800b3c0:	46d9      	mov	r9, fp
 800b3c2:	e7e0      	b.n	800b386 <__sfvwrite_r+0xd6>
 800b3c4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	f1ba 0f00 	cmp.w	sl, #0
 800b3ce:	d0f9      	beq.n	800b3c4 <__sfvwrite_r+0x114>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	68a2      	ldr	r2, [r4, #8]
 800b3d6:	0599      	lsls	r1, r3, #22
 800b3d8:	d563      	bpl.n	800b4a2 <__sfvwrite_r+0x1f2>
 800b3da:	4552      	cmp	r2, sl
 800b3dc:	d836      	bhi.n	800b44c <__sfvwrite_r+0x19c>
 800b3de:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b3e2:	d033      	beq.n	800b44c <__sfvwrite_r+0x19c>
 800b3e4:	6921      	ldr	r1, [r4, #16]
 800b3e6:	6965      	ldr	r5, [r4, #20]
 800b3e8:	eba0 0b01 	sub.w	fp, r0, r1
 800b3ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3f4:	f10b 0201 	add.w	r2, fp, #1
 800b3f8:	106d      	asrs	r5, r5, #1
 800b3fa:	4452      	add	r2, sl
 800b3fc:	4295      	cmp	r5, r2
 800b3fe:	bf38      	it	cc
 800b400:	4615      	movcc	r5, r2
 800b402:	055b      	lsls	r3, r3, #21
 800b404:	d53d      	bpl.n	800b482 <__sfvwrite_r+0x1d2>
 800b406:	4629      	mov	r1, r5
 800b408:	4630      	mov	r0, r6
 800b40a:	f7fd fe0d 	bl	8009028 <_malloc_r>
 800b40e:	b948      	cbnz	r0, 800b424 <__sfvwrite_r+0x174>
 800b410:	230c      	movs	r3, #12
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	e7ad      	b.n	800b37a <__sfvwrite_r+0xca>
 800b41e:	4699      	mov	r9, r3
 800b420:	469a      	mov	sl, r3
 800b422:	e7d2      	b.n	800b3ca <__sfvwrite_r+0x11a>
 800b424:	465a      	mov	r2, fp
 800b426:	6921      	ldr	r1, [r4, #16]
 800b428:	9001      	str	r0, [sp, #4]
 800b42a:	f7fe f84b 	bl	80094c4 <memcpy>
 800b42e:	89a2      	ldrh	r2, [r4, #12]
 800b430:	9b01      	ldr	r3, [sp, #4]
 800b432:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b43a:	81a2      	strh	r2, [r4, #12]
 800b43c:	6123      	str	r3, [r4, #16]
 800b43e:	6165      	str	r5, [r4, #20]
 800b440:	445b      	add	r3, fp
 800b442:	eba5 050b 	sub.w	r5, r5, fp
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	4652      	mov	r2, sl
 800b44a:	60a5      	str	r5, [r4, #8]
 800b44c:	4552      	cmp	r2, sl
 800b44e:	bf28      	it	cs
 800b450:	4652      	movcs	r2, sl
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	9201      	str	r2, [sp, #4]
 800b456:	4649      	mov	r1, r9
 800b458:	f7fe fe76 	bl	800a148 <memmove>
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	9a01      	ldr	r2, [sp, #4]
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	441a      	add	r2, r3
 800b468:	4655      	mov	r5, sl
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b470:	44a9      	add	r9, r5
 800b472:	ebaa 0a05 	sub.w	sl, sl, r5
 800b476:	1b45      	subs	r5, r0, r5
 800b478:	f8c8 5008 	str.w	r5, [r8, #8]
 800b47c:	2d00      	cmp	r5, #0
 800b47e:	d1a4      	bne.n	800b3ca <__sfvwrite_r+0x11a>
 800b480:	e71d      	b.n	800b2be <__sfvwrite_r+0xe>
 800b482:	462a      	mov	r2, r5
 800b484:	4630      	mov	r0, r6
 800b486:	f7fe fe79 	bl	800a17c <_realloc_r>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1d5      	bne.n	800b43c <__sfvwrite_r+0x18c>
 800b490:	6921      	ldr	r1, [r4, #16]
 800b492:	4630      	mov	r0, r6
 800b494:	f7fd f98a 	bl	80087ac <_free_r>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	e7b6      	b.n	800b410 <__sfvwrite_r+0x160>
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	4283      	cmp	r3, r0
 800b4a6:	d302      	bcc.n	800b4ae <__sfvwrite_r+0x1fe>
 800b4a8:	6961      	ldr	r1, [r4, #20]
 800b4aa:	4551      	cmp	r1, sl
 800b4ac:	d915      	bls.n	800b4da <__sfvwrite_r+0x22a>
 800b4ae:	4552      	cmp	r2, sl
 800b4b0:	bf28      	it	cs
 800b4b2:	4652      	movcs	r2, sl
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4615      	mov	r5, r2
 800b4b8:	f7fe fe46 	bl	800a148 <memmove>
 800b4bc:	68a3      	ldr	r3, [r4, #8]
 800b4be:	6822      	ldr	r2, [r4, #0]
 800b4c0:	1b5b      	subs	r3, r3, r5
 800b4c2:	442a      	add	r2, r5
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	6022      	str	r2, [r4, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1cf      	bne.n	800b46c <__sfvwrite_r+0x1bc>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff fdee 	bl	800b0b0 <_fflush_r>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d0c9      	beq.n	800b46c <__sfvwrite_r+0x1bc>
 800b4d8:	e79c      	b.n	800b414 <__sfvwrite_r+0x164>
 800b4da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b4de:	459a      	cmp	sl, r3
 800b4e0:	bf38      	it	cc
 800b4e2:	4653      	movcc	r3, sl
 800b4e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4e6:	fb93 f3f1 	sdiv	r3, r3, r1
 800b4ea:	464a      	mov	r2, r9
 800b4ec:	434b      	muls	r3, r1
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	69e1      	ldr	r1, [r4, #28]
 800b4f2:	47a8      	blx	r5
 800b4f4:	1e05      	subs	r5, r0, #0
 800b4f6:	dcb9      	bgt.n	800b46c <__sfvwrite_r+0x1bc>
 800b4f8:	e78c      	b.n	800b414 <__sfvwrite_r+0x164>
 800b4fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4fe:	2000      	movs	r0, #0
 800b500:	3708      	adds	r7, #8
 800b502:	e6f3      	b.n	800b2ec <__sfvwrite_r+0x3c>
 800b504:	f10b 0901 	add.w	r9, fp, #1
 800b508:	e700      	b.n	800b30c <__sfvwrite_r+0x5c>
 800b50a:	4293      	cmp	r3, r2
 800b50c:	dc08      	bgt.n	800b520 <__sfvwrite_r+0x270>
 800b50e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b510:	69e1      	ldr	r1, [r4, #28]
 800b512:	4652      	mov	r2, sl
 800b514:	4630      	mov	r0, r6
 800b516:	47a8      	blx	r5
 800b518:	1e05      	subs	r5, r0, #0
 800b51a:	f73f af13 	bgt.w	800b344 <__sfvwrite_r+0x94>
 800b51e:	e779      	b.n	800b414 <__sfvwrite_r+0x164>
 800b520:	4651      	mov	r1, sl
 800b522:	9201      	str	r2, [sp, #4]
 800b524:	f7fe fe10 	bl	800a148 <memmove>
 800b528:	9a01      	ldr	r2, [sp, #4]
 800b52a:	68a3      	ldr	r3, [r4, #8]
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	60a3      	str	r3, [r4, #8]
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	4413      	add	r3, r2
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	4615      	mov	r5, r2
 800b538:	e704      	b.n	800b344 <__sfvwrite_r+0x94>
 800b53a:	2001      	movs	r0, #1
 800b53c:	e70c      	b.n	800b358 <__sfvwrite_r+0xa8>
 800b53e:	bf00      	nop
 800b540:	7ffffc00 	.word	0x7ffffc00

0800b544 <_fwalk_reent>:
 800b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b548:	4606      	mov	r6, r0
 800b54a:	4688      	mov	r8, r1
 800b54c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800b550:	2700      	movs	r7, #0
 800b552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b556:	f1b9 0901 	subs.w	r9, r9, #1
 800b55a:	d505      	bpl.n	800b568 <_fwalk_reent+0x24>
 800b55c:	6824      	ldr	r4, [r4, #0]
 800b55e:	2c00      	cmp	r4, #0
 800b560:	d1f7      	bne.n	800b552 <_fwalk_reent+0xe>
 800b562:	4638      	mov	r0, r7
 800b564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b568:	89ab      	ldrh	r3, [r5, #12]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d907      	bls.n	800b57e <_fwalk_reent+0x3a>
 800b56e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b572:	3301      	adds	r3, #1
 800b574:	d003      	beq.n	800b57e <_fwalk_reent+0x3a>
 800b576:	4629      	mov	r1, r5
 800b578:	4630      	mov	r0, r6
 800b57a:	47c0      	blx	r8
 800b57c:	4307      	orrs	r7, r0
 800b57e:	3568      	adds	r5, #104	; 0x68
 800b580:	e7e9      	b.n	800b556 <_fwalk_reent+0x12>

0800b582 <__swhatbuf_r>:
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	460e      	mov	r6, r1
 800b586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58a:	2900      	cmp	r1, #0
 800b58c:	b096      	sub	sp, #88	; 0x58
 800b58e:	4614      	mov	r4, r2
 800b590:	461d      	mov	r5, r3
 800b592:	da0a      	bge.n	800b5aa <__swhatbuf_r+0x28>
 800b594:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800b598:	2300      	movs	r3, #0
 800b59a:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	d116      	bne.n	800b5d0 <__swhatbuf_r+0x4e>
 800b5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	e015      	b.n	800b5d6 <__swhatbuf_r+0x54>
 800b5aa:	466a      	mov	r2, sp
 800b5ac:	f000 f9b8 	bl	800b920 <_fstat_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dbef      	blt.n	800b594 <__swhatbuf_r+0x12>
 800b5b4:	9a01      	ldr	r2, [sp, #4]
 800b5b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5be:	425a      	negs	r2, r3
 800b5c0:	415a      	adcs	r2, r3
 800b5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c6:	602a      	str	r2, [r5, #0]
 800b5c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	e002      	b.n	800b5d6 <__swhatbuf_r+0x54>
 800b5d0:	2240      	movs	r2, #64	; 0x40
 800b5d2:	6022      	str	r2, [r4, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	b016      	add	sp, #88	; 0x58
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5dc <__smakebuf_r>:
 800b5dc:	898b      	ldrh	r3, [r1, #12]
 800b5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5e0:	079d      	lsls	r5, r3, #30
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	d507      	bpl.n	800b5f8 <__smakebuf_r+0x1c>
 800b5e8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	6163      	str	r3, [r4, #20]
 800b5f4:	b002      	add	sp, #8
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	ab01      	add	r3, sp, #4
 800b5fa:	466a      	mov	r2, sp
 800b5fc:	f7ff ffc1 	bl	800b582 <__swhatbuf_r>
 800b600:	9900      	ldr	r1, [sp, #0]
 800b602:	4605      	mov	r5, r0
 800b604:	4630      	mov	r0, r6
 800b606:	f7fd fd0f 	bl	8009028 <_malloc_r>
 800b60a:	b948      	cbnz	r0, 800b620 <__smakebuf_r+0x44>
 800b60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b610:	059a      	lsls	r2, r3, #22
 800b612:	d4ef      	bmi.n	800b5f4 <__smakebuf_r+0x18>
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	f043 0302 	orr.w	r3, r3, #2
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	e7e3      	b.n	800b5e8 <__smakebuf_r+0xc>
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <__smakebuf_r+0x7c>)
 800b622:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	6163      	str	r3, [r4, #20]
 800b632:	9b01      	ldr	r3, [sp, #4]
 800b634:	6120      	str	r0, [r4, #16]
 800b636:	b15b      	cbz	r3, 800b650 <__smakebuf_r+0x74>
 800b638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63c:	4630      	mov	r0, r6
 800b63e:	f000 f981 	bl	800b944 <_isatty_r>
 800b642:	b128      	cbz	r0, 800b650 <__smakebuf_r+0x74>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	f043 0301 	orr.w	r3, r3, #1
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	89a0      	ldrh	r0, [r4, #12]
 800b652:	4305      	orrs	r5, r0
 800b654:	81a5      	strh	r5, [r4, #12]
 800b656:	e7cd      	b.n	800b5f4 <__smakebuf_r+0x18>
 800b658:	0800b14d 	.word	0x0800b14d

0800b65c <_raise_r>:
 800b65c:	291f      	cmp	r1, #31
 800b65e:	b538      	push	{r3, r4, r5, lr}
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	d904      	bls.n	800b670 <_raise_r+0x14>
 800b666:	2316      	movs	r3, #22
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800b674:	b112      	cbz	r2, 800b67c <_raise_r+0x20>
 800b676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b67a:	b94b      	cbnz	r3, 800b690 <_raise_r+0x34>
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 f831 	bl	800b6e4 <_getpid_r>
 800b682:	462a      	mov	r2, r5
 800b684:	4601      	mov	r1, r0
 800b686:	4620      	mov	r0, r4
 800b688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b68c:	f000 b818 	b.w	800b6c0 <_kill_r>
 800b690:	2b01      	cmp	r3, #1
 800b692:	d00a      	beq.n	800b6aa <_raise_r+0x4e>
 800b694:	1c59      	adds	r1, r3, #1
 800b696:	d103      	bne.n	800b6a0 <_raise_r+0x44>
 800b698:	2316      	movs	r3, #22
 800b69a:	6003      	str	r3, [r0, #0]
 800b69c:	2001      	movs	r0, #1
 800b69e:	e7e6      	b.n	800b66e <_raise_r+0x12>
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	4798      	blx	r3
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7df      	b.n	800b66e <_raise_r+0x12>
	...

0800b6b0 <raise>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <raise+0xc>)
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	f7ff bfd1 	b.w	800b65c <_raise_r>
 800b6ba:	bf00      	nop
 800b6bc:	20000014 	.word	0x20000014

0800b6c0 <_kill_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_kill_r+0x20>)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	602b      	str	r3, [r5, #0]
 800b6ce:	f7f6 fa15 	bl	8001afc <_kill>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d102      	bne.n	800b6dc <_kill_r+0x1c>
 800b6d6:	682b      	ldr	r3, [r5, #0]
 800b6d8:	b103      	cbz	r3, 800b6dc <_kill_r+0x1c>
 800b6da:	6023      	str	r3, [r4, #0]
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000be8 	.word	0x20000be8

0800b6e4 <_getpid_r>:
 800b6e4:	f7f6 ba02 	b.w	8001aec <_getpid>

0800b6e8 <__sread>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f0:	f000 f94a 	bl	800b988 <_read_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	bfab      	itete	ge
 800b6f8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b6fc:	181b      	addge	r3, r3, r0
 800b6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b702:	bfac      	ite	ge
 800b704:	6523      	strge	r3, [r4, #80]	; 0x50
 800b706:	81a3      	strhlt	r3, [r4, #12]
 800b708:	bd10      	pop	{r4, pc}

0800b70a <__swrite>:
 800b70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70e:	461f      	mov	r7, r3
 800b710:	898b      	ldrh	r3, [r1, #12]
 800b712:	05db      	lsls	r3, r3, #23
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	4616      	mov	r6, r2
 800b71a:	d505      	bpl.n	800b728 <__swrite+0x1e>
 800b71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b720:	2302      	movs	r3, #2
 800b722:	2200      	movs	r2, #0
 800b724:	f000 f91e 	bl	800b964 <_lseek_r>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	4632      	mov	r2, r6
 800b736:	463b      	mov	r3, r7
 800b738:	4628      	mov	r0, r5
 800b73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73e:	f000 b875 	b.w	800b82c <_write_r>

0800b742 <__sseek>:
 800b742:	b510      	push	{r4, lr}
 800b744:	460c      	mov	r4, r1
 800b746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74a:	f000 f90b 	bl	800b964 <_lseek_r>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	bf15      	itete	ne
 800b754:	6520      	strne	r0, [r4, #80]	; 0x50
 800b756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b75e:	81a3      	strheq	r3, [r4, #12]
 800b760:	bf18      	it	ne
 800b762:	81a3      	strhne	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__sclose>:
 800b766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76a:	f000 b871 	b.w	800b850 <_close_r>

0800b76e <__swbuf_r>:
 800b76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b770:	460e      	mov	r6, r1
 800b772:	4614      	mov	r4, r2
 800b774:	4605      	mov	r5, r0
 800b776:	b118      	cbz	r0, 800b780 <__swbuf_r+0x12>
 800b778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b77a:	b90b      	cbnz	r3, 800b780 <__swbuf_r+0x12>
 800b77c:	f7ff fd04 	bl	800b188 <__sinit>
 800b780:	69a3      	ldr	r3, [r4, #24]
 800b782:	60a3      	str	r3, [r4, #8]
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	0719      	lsls	r1, r3, #28
 800b788:	d529      	bpl.n	800b7de <__swbuf_r+0x70>
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	b33b      	cbz	r3, 800b7de <__swbuf_r+0x70>
 800b78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b792:	b2f6      	uxtb	r6, r6
 800b794:	049a      	lsls	r2, r3, #18
 800b796:	4637      	mov	r7, r6
 800b798:	d52a      	bpl.n	800b7f0 <__swbuf_r+0x82>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	6920      	ldr	r0, [r4, #16]
 800b79e:	1a18      	subs	r0, r3, r0
 800b7a0:	6963      	ldr	r3, [r4, #20]
 800b7a2:	4283      	cmp	r3, r0
 800b7a4:	dc04      	bgt.n	800b7b0 <__swbuf_r+0x42>
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7ff fc81 	bl	800b0b0 <_fflush_r>
 800b7ae:	b9e0      	cbnz	r0, 800b7ea <__swbuf_r+0x7c>
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	60a3      	str	r3, [r4, #8]
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	701e      	strb	r6, [r3, #0]
 800b7be:	6962      	ldr	r2, [r4, #20]
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d004      	beq.n	800b7d0 <__swbuf_r+0x62>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	07db      	lsls	r3, r3, #31
 800b7ca:	d506      	bpl.n	800b7da <__swbuf_r+0x6c>
 800b7cc:	2e0a      	cmp	r6, #10
 800b7ce:	d104      	bne.n	800b7da <__swbuf_r+0x6c>
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7ff fc6c 	bl	800b0b0 <_fflush_r>
 800b7d8:	b938      	cbnz	r0, 800b7ea <__swbuf_r+0x7c>
 800b7da:	4638      	mov	r0, r7
 800b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f7ff fb77 	bl	800aed4 <__swsetup_r>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d0d1      	beq.n	800b78e <__swbuf_r+0x20>
 800b7ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7ee:	e7f4      	b.n	800b7da <__swbuf_r+0x6c>
 800b7f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b7f4:	81a3      	strh	r3, [r4, #12]
 800b7f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7fc:	6663      	str	r3, [r4, #100]	; 0x64
 800b7fe:	e7cc      	b.n	800b79a <__swbuf_r+0x2c>

0800b800 <_wcrtomb_r>:
 800b800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b802:	4c09      	ldr	r4, [pc, #36]	; (800b828 <_wcrtomb_r+0x28>)
 800b804:	b085      	sub	sp, #20
 800b806:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800b80a:	4605      	mov	r5, r0
 800b80c:	461e      	mov	r6, r3
 800b80e:	b909      	cbnz	r1, 800b814 <_wcrtomb_r+0x14>
 800b810:	460a      	mov	r2, r1
 800b812:	a901      	add	r1, sp, #4
 800b814:	47b8      	blx	r7
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	bf01      	itttt	eq
 800b81a:	2300      	moveq	r3, #0
 800b81c:	6033      	streq	r3, [r6, #0]
 800b81e:	238a      	moveq	r3, #138	; 0x8a
 800b820:	602b      	streq	r3, [r5, #0]
 800b822:	b005      	add	sp, #20
 800b824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b826:	bf00      	nop
 800b828:	20000448 	.word	0x20000448

0800b82c <_write_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	4d07      	ldr	r5, [pc, #28]	; (800b84c <_write_r+0x20>)
 800b830:	4604      	mov	r4, r0
 800b832:	4608      	mov	r0, r1
 800b834:	4611      	mov	r1, r2
 800b836:	2200      	movs	r2, #0
 800b838:	602a      	str	r2, [r5, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	f7f6 f995 	bl	8001b6a <_write>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_write_r+0x1e>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_write_r+0x1e>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	20000be8 	.word	0x20000be8

0800b850 <_close_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d06      	ldr	r5, [pc, #24]	; (800b86c <_close_r+0x1c>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7f6 f9a1 	bl	8001ba2 <_close>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_close_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_close_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20000be8 	.word	0x20000be8

0800b870 <_fclose_r>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4606      	mov	r6, r0
 800b874:	460c      	mov	r4, r1
 800b876:	b911      	cbnz	r1, 800b87e <_fclose_r+0xe>
 800b878:	2500      	movs	r5, #0
 800b87a:	4628      	mov	r0, r5
 800b87c:	bd70      	pop	{r4, r5, r6, pc}
 800b87e:	b118      	cbz	r0, 800b888 <_fclose_r+0x18>
 800b880:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b882:	b90b      	cbnz	r3, 800b888 <_fclose_r+0x18>
 800b884:	f7ff fc80 	bl	800b188 <__sinit>
 800b888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b88a:	07d8      	lsls	r0, r3, #31
 800b88c:	d405      	bmi.n	800b89a <_fclose_r+0x2a>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	0599      	lsls	r1, r3, #22
 800b892:	d402      	bmi.n	800b89a <_fclose_r+0x2a>
 800b894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b896:	f7fd fbc5 	bl	8009024 <__retarget_lock_acquire_recursive>
 800b89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89e:	b93b      	cbnz	r3, 800b8b0 <_fclose_r+0x40>
 800b8a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b8a2:	f015 0501 	ands.w	r5, r5, #1
 800b8a6:	d1e7      	bne.n	800b878 <_fclose_r+0x8>
 800b8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8aa:	f7fd fbbc 	bl	8009026 <__retarget_lock_release_recursive>
 800b8ae:	e7e4      	b.n	800b87a <_fclose_r+0xa>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff fb6e 	bl	800af94 <__sflush_r>
 800b8b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	b133      	cbz	r3, 800b8cc <_fclose_r+0x5c>
 800b8be:	69e1      	ldr	r1, [r4, #28]
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4798      	blx	r3
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	bfb8      	it	lt
 800b8c8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	061a      	lsls	r2, r3, #24
 800b8d0:	d503      	bpl.n	800b8da <_fclose_r+0x6a>
 800b8d2:	6921      	ldr	r1, [r4, #16]
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7fc ff69 	bl	80087ac <_free_r>
 800b8da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b8dc:	b141      	cbz	r1, 800b8f0 <_fclose_r+0x80>
 800b8de:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	d002      	beq.n	800b8ec <_fclose_r+0x7c>
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7fc ff60 	bl	80087ac <_free_r>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b8f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b8f2:	b121      	cbz	r1, 800b8fe <_fclose_r+0x8e>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7fc ff59 	bl	80087ac <_free_r>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6463      	str	r3, [r4, #68]	; 0x44
 800b8fe:	f7ff fc2b 	bl	800b158 <__sfp_lock_acquire>
 800b902:	2300      	movs	r3, #0
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b908:	07db      	lsls	r3, r3, #31
 800b90a:	d402      	bmi.n	800b912 <_fclose_r+0xa2>
 800b90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b90e:	f7fd fb8a 	bl	8009026 <__retarget_lock_release_recursive>
 800b912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b914:	f7fd fb85 	bl	8009022 <__retarget_lock_close_recursive>
 800b918:	f7ff fc24 	bl	800b164 <__sfp_lock_release>
 800b91c:	e7ad      	b.n	800b87a <_fclose_r+0xa>
	...

0800b920 <_fstat_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	; (800b940 <_fstat_r+0x20>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	4611      	mov	r1, r2
 800b92c:	602b      	str	r3, [r5, #0]
 800b92e:	f7f6 f944 	bl	8001bba <_fstat>
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d102      	bne.n	800b93c <_fstat_r+0x1c>
 800b936:	682b      	ldr	r3, [r5, #0]
 800b938:	b103      	cbz	r3, 800b93c <_fstat_r+0x1c>
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
 800b93e:	bf00      	nop
 800b940:	20000be8 	.word	0x20000be8

0800b944 <_isatty_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4d06      	ldr	r5, [pc, #24]	; (800b960 <_isatty_r+0x1c>)
 800b948:	2300      	movs	r3, #0
 800b94a:	4604      	mov	r4, r0
 800b94c:	4608      	mov	r0, r1
 800b94e:	602b      	str	r3, [r5, #0]
 800b950:	f7f6 f943 	bl	8001bda <_isatty>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_isatty_r+0x1a>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_isatty_r+0x1a>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	20000be8 	.word	0x20000be8

0800b964 <_lseek_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4d07      	ldr	r5, [pc, #28]	; (800b984 <_lseek_r+0x20>)
 800b968:	4604      	mov	r4, r0
 800b96a:	4608      	mov	r0, r1
 800b96c:	4611      	mov	r1, r2
 800b96e:	2200      	movs	r2, #0
 800b970:	602a      	str	r2, [r5, #0]
 800b972:	461a      	mov	r2, r3
 800b974:	f7f6 f93c 	bl	8001bf0 <_lseek>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d102      	bne.n	800b982 <_lseek_r+0x1e>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b103      	cbz	r3, 800b982 <_lseek_r+0x1e>
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	20000be8 	.word	0x20000be8

0800b988 <_read_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4d07      	ldr	r5, [pc, #28]	; (800b9a8 <_read_r+0x20>)
 800b98c:	4604      	mov	r4, r0
 800b98e:	4608      	mov	r0, r1
 800b990:	4611      	mov	r1, r2
 800b992:	2200      	movs	r2, #0
 800b994:	602a      	str	r2, [r5, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	f7f6 f8ca 	bl	8001b30 <_read>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	d102      	bne.n	800b9a6 <_read_r+0x1e>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b103      	cbz	r3, 800b9a6 <_read_r+0x1e>
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	20000be8 	.word	0x20000be8

0800b9ac <_init>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr

0800b9b8 <_fini>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	bf00      	nop
 800b9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9be:	bc08      	pop	{r3}
 800b9c0:	469e      	mov	lr, r3
 800b9c2:	4770      	bx	lr
